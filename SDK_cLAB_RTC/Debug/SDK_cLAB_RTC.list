
SDK_cLAB_RTC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  2000d000  2000d000  0000d000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c24  2000d190  2000d190  0000d190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000494  2000fdb4  2000fdb4  0000fdb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  20010248  20010248  000102d8  2**0
                  CONTENTS
  4 .ARM          00000008  20010248  20010248  00010248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  20010250  200102d8  000102d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  20010250  20010250  00010250  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  20010254  20010254  00010254  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20010258  20010258  00010258  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000060  200102d8  200102d8  000102d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20010338  20010338  000102d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000102d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007ee5  00000000  00000000  00010308  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001a78  00000000  00000000  000181ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000610  00000000  00000000  00019c68  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000004f8  00000000  00000000  0001a278  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002140b  00000000  00000000  0001a770  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007f1d  00000000  00000000  0003bb7b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c5efd  00000000  00000000  00043a98  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00109995  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000017f8  00000000  00000000  00109a10  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

2000d190 <__do_global_dtors_aux>:
2000d190:	b510      	push	{r4, lr}
2000d192:	4c05      	ldr	r4, [pc, #20]	; (2000d1a8 <__do_global_dtors_aux+0x18>)
2000d194:	7823      	ldrb	r3, [r4, #0]
2000d196:	b933      	cbnz	r3, 2000d1a6 <__do_global_dtors_aux+0x16>
2000d198:	4b04      	ldr	r3, [pc, #16]	; (2000d1ac <__do_global_dtors_aux+0x1c>)
2000d19a:	b113      	cbz	r3, 2000d1a2 <__do_global_dtors_aux+0x12>
2000d19c:	4804      	ldr	r0, [pc, #16]	; (2000d1b0 <__do_global_dtors_aux+0x20>)
2000d19e:	f3af 8000 	nop.w
2000d1a2:	2301      	movs	r3, #1
2000d1a4:	7023      	strb	r3, [r4, #0]
2000d1a6:	bd10      	pop	{r4, pc}
2000d1a8:	200102d8 	.word	0x200102d8
2000d1ac:	00000000 	.word	0x00000000
2000d1b0:	2000fd9c 	.word	0x2000fd9c

2000d1b4 <frame_dummy>:
2000d1b4:	b508      	push	{r3, lr}
2000d1b6:	4b03      	ldr	r3, [pc, #12]	; (2000d1c4 <frame_dummy+0x10>)
2000d1b8:	b11b      	cbz	r3, 2000d1c2 <frame_dummy+0xe>
2000d1ba:	4903      	ldr	r1, [pc, #12]	; (2000d1c8 <frame_dummy+0x14>)
2000d1bc:	4803      	ldr	r0, [pc, #12]	; (2000d1cc <frame_dummy+0x18>)
2000d1be:	f3af 8000 	nop.w
2000d1c2:	bd08      	pop	{r3, pc}
2000d1c4:	00000000 	.word	0x00000000
2000d1c8:	200102dc 	.word	0x200102dc
2000d1cc:	2000fd9c 	.word	0x2000fd9c

2000d1d0 <strlen>:
2000d1d0:	4603      	mov	r3, r0
2000d1d2:	f813 2b01 	ldrb.w	r2, [r3], #1
2000d1d6:	2a00      	cmp	r2, #0
2000d1d8:	d1fb      	bne.n	2000d1d2 <strlen+0x2>
2000d1da:	1a18      	subs	r0, r3, r0
2000d1dc:	3801      	subs	r0, #1
2000d1de:	4770      	bx	lr

2000d1e0 <memchr>:
2000d1e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
2000d1e4:	2a10      	cmp	r2, #16
2000d1e6:	db2b      	blt.n	2000d240 <memchr+0x60>
2000d1e8:	f010 0f07 	tst.w	r0, #7
2000d1ec:	d008      	beq.n	2000d200 <memchr+0x20>
2000d1ee:	f810 3b01 	ldrb.w	r3, [r0], #1
2000d1f2:	3a01      	subs	r2, #1
2000d1f4:	428b      	cmp	r3, r1
2000d1f6:	d02d      	beq.n	2000d254 <memchr+0x74>
2000d1f8:	f010 0f07 	tst.w	r0, #7
2000d1fc:	b342      	cbz	r2, 2000d250 <memchr+0x70>
2000d1fe:	d1f6      	bne.n	2000d1ee <memchr+0xe>
2000d200:	b4f0      	push	{r4, r5, r6, r7}
2000d202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
2000d206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
2000d20a:	f022 0407 	bic.w	r4, r2, #7
2000d20e:	f07f 0700 	mvns.w	r7, #0
2000d212:	2300      	movs	r3, #0
2000d214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
2000d218:	3c08      	subs	r4, #8
2000d21a:	ea85 0501 	eor.w	r5, r5, r1
2000d21e:	ea86 0601 	eor.w	r6, r6, r1
2000d222:	fa85 f547 	uadd8	r5, r5, r7
2000d226:	faa3 f587 	sel	r5, r3, r7
2000d22a:	fa86 f647 	uadd8	r6, r6, r7
2000d22e:	faa5 f687 	sel	r6, r5, r7
2000d232:	b98e      	cbnz	r6, 2000d258 <memchr+0x78>
2000d234:	d1ee      	bne.n	2000d214 <memchr+0x34>
2000d236:	bcf0      	pop	{r4, r5, r6, r7}
2000d238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
2000d23c:	f002 0207 	and.w	r2, r2, #7
2000d240:	b132      	cbz	r2, 2000d250 <memchr+0x70>
2000d242:	f810 3b01 	ldrb.w	r3, [r0], #1
2000d246:	3a01      	subs	r2, #1
2000d248:	ea83 0301 	eor.w	r3, r3, r1
2000d24c:	b113      	cbz	r3, 2000d254 <memchr+0x74>
2000d24e:	d1f8      	bne.n	2000d242 <memchr+0x62>
2000d250:	2000      	movs	r0, #0
2000d252:	4770      	bx	lr
2000d254:	3801      	subs	r0, #1
2000d256:	4770      	bx	lr
2000d258:	2d00      	cmp	r5, #0
2000d25a:	bf06      	itte	eq
2000d25c:	4635      	moveq	r5, r6
2000d25e:	3803      	subeq	r0, #3
2000d260:	3807      	subne	r0, #7
2000d262:	f015 0f01 	tst.w	r5, #1
2000d266:	d107      	bne.n	2000d278 <memchr+0x98>
2000d268:	3001      	adds	r0, #1
2000d26a:	f415 7f80 	tst.w	r5, #256	; 0x100
2000d26e:	bf02      	ittt	eq
2000d270:	3001      	addeq	r0, #1
2000d272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
2000d276:	3001      	addeq	r0, #1
2000d278:	bcf0      	pop	{r4, r5, r6, r7}
2000d27a:	3801      	subs	r0, #1
2000d27c:	4770      	bx	lr
2000d27e:	bf00      	nop

2000d280 <__aeabi_uldivmod>:
2000d280:	b953      	cbnz	r3, 2000d298 <__aeabi_uldivmod+0x18>
2000d282:	b94a      	cbnz	r2, 2000d298 <__aeabi_uldivmod+0x18>
2000d284:	2900      	cmp	r1, #0
2000d286:	bf08      	it	eq
2000d288:	2800      	cmpeq	r0, #0
2000d28a:	bf1c      	itt	ne
2000d28c:	f04f 31ff 	movne.w	r1, #4294967295
2000d290:	f04f 30ff 	movne.w	r0, #4294967295
2000d294:	f000 b972 	b.w	2000d57c <__aeabi_idiv0>
2000d298:	f1ad 0c08 	sub.w	ip, sp, #8
2000d29c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
2000d2a0:	f000 f806 	bl	2000d2b0 <__udivmoddi4>
2000d2a4:	f8dd e004 	ldr.w	lr, [sp, #4]
2000d2a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
2000d2ac:	b004      	add	sp, #16
2000d2ae:	4770      	bx	lr

2000d2b0 <__udivmoddi4>:
2000d2b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
2000d2b4:	9e08      	ldr	r6, [sp, #32]
2000d2b6:	4604      	mov	r4, r0
2000d2b8:	4688      	mov	r8, r1
2000d2ba:	2b00      	cmp	r3, #0
2000d2bc:	d14b      	bne.n	2000d356 <__udivmoddi4+0xa6>
2000d2be:	428a      	cmp	r2, r1
2000d2c0:	4615      	mov	r5, r2
2000d2c2:	d967      	bls.n	2000d394 <__udivmoddi4+0xe4>
2000d2c4:	fab2 f282 	clz	r2, r2
2000d2c8:	b14a      	cbz	r2, 2000d2de <__udivmoddi4+0x2e>
2000d2ca:	f1c2 0720 	rsb	r7, r2, #32
2000d2ce:	fa01 f302 	lsl.w	r3, r1, r2
2000d2d2:	fa20 f707 	lsr.w	r7, r0, r7
2000d2d6:	4095      	lsls	r5, r2
2000d2d8:	ea47 0803 	orr.w	r8, r7, r3
2000d2dc:	4094      	lsls	r4, r2
2000d2de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
2000d2e2:	0c23      	lsrs	r3, r4, #16
2000d2e4:	fbb8 f7fe 	udiv	r7, r8, lr
2000d2e8:	fa1f fc85 	uxth.w	ip, r5
2000d2ec:	fb0e 8817 	mls	r8, lr, r7, r8
2000d2f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
2000d2f4:	fb07 f10c 	mul.w	r1, r7, ip
2000d2f8:	4299      	cmp	r1, r3
2000d2fa:	d909      	bls.n	2000d310 <__udivmoddi4+0x60>
2000d2fc:	18eb      	adds	r3, r5, r3
2000d2fe:	f107 30ff 	add.w	r0, r7, #4294967295
2000d302:	f080 811b 	bcs.w	2000d53c <__udivmoddi4+0x28c>
2000d306:	4299      	cmp	r1, r3
2000d308:	f240 8118 	bls.w	2000d53c <__udivmoddi4+0x28c>
2000d30c:	3f02      	subs	r7, #2
2000d30e:	442b      	add	r3, r5
2000d310:	1a5b      	subs	r3, r3, r1
2000d312:	b2a4      	uxth	r4, r4
2000d314:	fbb3 f0fe 	udiv	r0, r3, lr
2000d318:	fb0e 3310 	mls	r3, lr, r0, r3
2000d31c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
2000d320:	fb00 fc0c 	mul.w	ip, r0, ip
2000d324:	45a4      	cmp	ip, r4
2000d326:	d909      	bls.n	2000d33c <__udivmoddi4+0x8c>
2000d328:	192c      	adds	r4, r5, r4
2000d32a:	f100 33ff 	add.w	r3, r0, #4294967295
2000d32e:	f080 8107 	bcs.w	2000d540 <__udivmoddi4+0x290>
2000d332:	45a4      	cmp	ip, r4
2000d334:	f240 8104 	bls.w	2000d540 <__udivmoddi4+0x290>
2000d338:	3802      	subs	r0, #2
2000d33a:	442c      	add	r4, r5
2000d33c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
2000d340:	eba4 040c 	sub.w	r4, r4, ip
2000d344:	2700      	movs	r7, #0
2000d346:	b11e      	cbz	r6, 2000d350 <__udivmoddi4+0xa0>
2000d348:	40d4      	lsrs	r4, r2
2000d34a:	2300      	movs	r3, #0
2000d34c:	e9c6 4300 	strd	r4, r3, [r6]
2000d350:	4639      	mov	r1, r7
2000d352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
2000d356:	428b      	cmp	r3, r1
2000d358:	d909      	bls.n	2000d36e <__udivmoddi4+0xbe>
2000d35a:	2e00      	cmp	r6, #0
2000d35c:	f000 80eb 	beq.w	2000d536 <__udivmoddi4+0x286>
2000d360:	2700      	movs	r7, #0
2000d362:	e9c6 0100 	strd	r0, r1, [r6]
2000d366:	4638      	mov	r0, r7
2000d368:	4639      	mov	r1, r7
2000d36a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
2000d36e:	fab3 f783 	clz	r7, r3
2000d372:	2f00      	cmp	r7, #0
2000d374:	d147      	bne.n	2000d406 <__udivmoddi4+0x156>
2000d376:	428b      	cmp	r3, r1
2000d378:	d302      	bcc.n	2000d380 <__udivmoddi4+0xd0>
2000d37a:	4282      	cmp	r2, r0
2000d37c:	f200 80fa 	bhi.w	2000d574 <__udivmoddi4+0x2c4>
2000d380:	1a84      	subs	r4, r0, r2
2000d382:	eb61 0303 	sbc.w	r3, r1, r3
2000d386:	2001      	movs	r0, #1
2000d388:	4698      	mov	r8, r3
2000d38a:	2e00      	cmp	r6, #0
2000d38c:	d0e0      	beq.n	2000d350 <__udivmoddi4+0xa0>
2000d38e:	e9c6 4800 	strd	r4, r8, [r6]
2000d392:	e7dd      	b.n	2000d350 <__udivmoddi4+0xa0>
2000d394:	b902      	cbnz	r2, 2000d398 <__udivmoddi4+0xe8>
2000d396:	deff      	udf	#255	; 0xff
2000d398:	fab2 f282 	clz	r2, r2
2000d39c:	2a00      	cmp	r2, #0
2000d39e:	f040 808f 	bne.w	2000d4c0 <__udivmoddi4+0x210>
2000d3a2:	1b49      	subs	r1, r1, r5
2000d3a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
2000d3a8:	fa1f f885 	uxth.w	r8, r5
2000d3ac:	2701      	movs	r7, #1
2000d3ae:	fbb1 fcfe 	udiv	ip, r1, lr
2000d3b2:	0c23      	lsrs	r3, r4, #16
2000d3b4:	fb0e 111c 	mls	r1, lr, ip, r1
2000d3b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
2000d3bc:	fb08 f10c 	mul.w	r1, r8, ip
2000d3c0:	4299      	cmp	r1, r3
2000d3c2:	d907      	bls.n	2000d3d4 <__udivmoddi4+0x124>
2000d3c4:	18eb      	adds	r3, r5, r3
2000d3c6:	f10c 30ff 	add.w	r0, ip, #4294967295
2000d3ca:	d202      	bcs.n	2000d3d2 <__udivmoddi4+0x122>
2000d3cc:	4299      	cmp	r1, r3
2000d3ce:	f200 80cd 	bhi.w	2000d56c <__udivmoddi4+0x2bc>
2000d3d2:	4684      	mov	ip, r0
2000d3d4:	1a59      	subs	r1, r3, r1
2000d3d6:	b2a3      	uxth	r3, r4
2000d3d8:	fbb1 f0fe 	udiv	r0, r1, lr
2000d3dc:	fb0e 1410 	mls	r4, lr, r0, r1
2000d3e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
2000d3e4:	fb08 f800 	mul.w	r8, r8, r0
2000d3e8:	45a0      	cmp	r8, r4
2000d3ea:	d907      	bls.n	2000d3fc <__udivmoddi4+0x14c>
2000d3ec:	192c      	adds	r4, r5, r4
2000d3ee:	f100 33ff 	add.w	r3, r0, #4294967295
2000d3f2:	d202      	bcs.n	2000d3fa <__udivmoddi4+0x14a>
2000d3f4:	45a0      	cmp	r8, r4
2000d3f6:	f200 80b6 	bhi.w	2000d566 <__udivmoddi4+0x2b6>
2000d3fa:	4618      	mov	r0, r3
2000d3fc:	eba4 0408 	sub.w	r4, r4, r8
2000d400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
2000d404:	e79f      	b.n	2000d346 <__udivmoddi4+0x96>
2000d406:	f1c7 0c20 	rsb	ip, r7, #32
2000d40a:	40bb      	lsls	r3, r7
2000d40c:	fa22 fe0c 	lsr.w	lr, r2, ip
2000d410:	ea4e 0e03 	orr.w	lr, lr, r3
2000d414:	fa01 f407 	lsl.w	r4, r1, r7
2000d418:	fa20 f50c 	lsr.w	r5, r0, ip
2000d41c:	fa21 f30c 	lsr.w	r3, r1, ip
2000d420:	ea4f 481e 	mov.w	r8, lr, lsr #16
2000d424:	4325      	orrs	r5, r4
2000d426:	fbb3 f9f8 	udiv	r9, r3, r8
2000d42a:	0c2c      	lsrs	r4, r5, #16
2000d42c:	fb08 3319 	mls	r3, r8, r9, r3
2000d430:	fa1f fa8e 	uxth.w	sl, lr
2000d434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
2000d438:	fb09 f40a 	mul.w	r4, r9, sl
2000d43c:	429c      	cmp	r4, r3
2000d43e:	fa02 f207 	lsl.w	r2, r2, r7
2000d442:	fa00 f107 	lsl.w	r1, r0, r7
2000d446:	d90b      	bls.n	2000d460 <__udivmoddi4+0x1b0>
2000d448:	eb1e 0303 	adds.w	r3, lr, r3
2000d44c:	f109 30ff 	add.w	r0, r9, #4294967295
2000d450:	f080 8087 	bcs.w	2000d562 <__udivmoddi4+0x2b2>
2000d454:	429c      	cmp	r4, r3
2000d456:	f240 8084 	bls.w	2000d562 <__udivmoddi4+0x2b2>
2000d45a:	f1a9 0902 	sub.w	r9, r9, #2
2000d45e:	4473      	add	r3, lr
2000d460:	1b1b      	subs	r3, r3, r4
2000d462:	b2ad      	uxth	r5, r5
2000d464:	fbb3 f0f8 	udiv	r0, r3, r8
2000d468:	fb08 3310 	mls	r3, r8, r0, r3
2000d46c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
2000d470:	fb00 fa0a 	mul.w	sl, r0, sl
2000d474:	45a2      	cmp	sl, r4
2000d476:	d908      	bls.n	2000d48a <__udivmoddi4+0x1da>
2000d478:	eb1e 0404 	adds.w	r4, lr, r4
2000d47c:	f100 33ff 	add.w	r3, r0, #4294967295
2000d480:	d26b      	bcs.n	2000d55a <__udivmoddi4+0x2aa>
2000d482:	45a2      	cmp	sl, r4
2000d484:	d969      	bls.n	2000d55a <__udivmoddi4+0x2aa>
2000d486:	3802      	subs	r0, #2
2000d488:	4474      	add	r4, lr
2000d48a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
2000d48e:	fba0 8902 	umull	r8, r9, r0, r2
2000d492:	eba4 040a 	sub.w	r4, r4, sl
2000d496:	454c      	cmp	r4, r9
2000d498:	46c2      	mov	sl, r8
2000d49a:	464b      	mov	r3, r9
2000d49c:	d354      	bcc.n	2000d548 <__udivmoddi4+0x298>
2000d49e:	d051      	beq.n	2000d544 <__udivmoddi4+0x294>
2000d4a0:	2e00      	cmp	r6, #0
2000d4a2:	d069      	beq.n	2000d578 <__udivmoddi4+0x2c8>
2000d4a4:	ebb1 050a 	subs.w	r5, r1, sl
2000d4a8:	eb64 0403 	sbc.w	r4, r4, r3
2000d4ac:	fa04 fc0c 	lsl.w	ip, r4, ip
2000d4b0:	40fd      	lsrs	r5, r7
2000d4b2:	40fc      	lsrs	r4, r7
2000d4b4:	ea4c 0505 	orr.w	r5, ip, r5
2000d4b8:	e9c6 5400 	strd	r5, r4, [r6]
2000d4bc:	2700      	movs	r7, #0
2000d4be:	e747      	b.n	2000d350 <__udivmoddi4+0xa0>
2000d4c0:	f1c2 0320 	rsb	r3, r2, #32
2000d4c4:	fa20 f703 	lsr.w	r7, r0, r3
2000d4c8:	4095      	lsls	r5, r2
2000d4ca:	fa01 f002 	lsl.w	r0, r1, r2
2000d4ce:	fa21 f303 	lsr.w	r3, r1, r3
2000d4d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
2000d4d6:	4338      	orrs	r0, r7
2000d4d8:	0c01      	lsrs	r1, r0, #16
2000d4da:	fbb3 f7fe 	udiv	r7, r3, lr
2000d4de:	fa1f f885 	uxth.w	r8, r5
2000d4e2:	fb0e 3317 	mls	r3, lr, r7, r3
2000d4e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
2000d4ea:	fb07 f308 	mul.w	r3, r7, r8
2000d4ee:	428b      	cmp	r3, r1
2000d4f0:	fa04 f402 	lsl.w	r4, r4, r2
2000d4f4:	d907      	bls.n	2000d506 <__udivmoddi4+0x256>
2000d4f6:	1869      	adds	r1, r5, r1
2000d4f8:	f107 3cff 	add.w	ip, r7, #4294967295
2000d4fc:	d22f      	bcs.n	2000d55e <__udivmoddi4+0x2ae>
2000d4fe:	428b      	cmp	r3, r1
2000d500:	d92d      	bls.n	2000d55e <__udivmoddi4+0x2ae>
2000d502:	3f02      	subs	r7, #2
2000d504:	4429      	add	r1, r5
2000d506:	1acb      	subs	r3, r1, r3
2000d508:	b281      	uxth	r1, r0
2000d50a:	fbb3 f0fe 	udiv	r0, r3, lr
2000d50e:	fb0e 3310 	mls	r3, lr, r0, r3
2000d512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
2000d516:	fb00 f308 	mul.w	r3, r0, r8
2000d51a:	428b      	cmp	r3, r1
2000d51c:	d907      	bls.n	2000d52e <__udivmoddi4+0x27e>
2000d51e:	1869      	adds	r1, r5, r1
2000d520:	f100 3cff 	add.w	ip, r0, #4294967295
2000d524:	d217      	bcs.n	2000d556 <__udivmoddi4+0x2a6>
2000d526:	428b      	cmp	r3, r1
2000d528:	d915      	bls.n	2000d556 <__udivmoddi4+0x2a6>
2000d52a:	3802      	subs	r0, #2
2000d52c:	4429      	add	r1, r5
2000d52e:	1ac9      	subs	r1, r1, r3
2000d530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
2000d534:	e73b      	b.n	2000d3ae <__udivmoddi4+0xfe>
2000d536:	4637      	mov	r7, r6
2000d538:	4630      	mov	r0, r6
2000d53a:	e709      	b.n	2000d350 <__udivmoddi4+0xa0>
2000d53c:	4607      	mov	r7, r0
2000d53e:	e6e7      	b.n	2000d310 <__udivmoddi4+0x60>
2000d540:	4618      	mov	r0, r3
2000d542:	e6fb      	b.n	2000d33c <__udivmoddi4+0x8c>
2000d544:	4541      	cmp	r1, r8
2000d546:	d2ab      	bcs.n	2000d4a0 <__udivmoddi4+0x1f0>
2000d548:	ebb8 0a02 	subs.w	sl, r8, r2
2000d54c:	eb69 020e 	sbc.w	r2, r9, lr
2000d550:	3801      	subs	r0, #1
2000d552:	4613      	mov	r3, r2
2000d554:	e7a4      	b.n	2000d4a0 <__udivmoddi4+0x1f0>
2000d556:	4660      	mov	r0, ip
2000d558:	e7e9      	b.n	2000d52e <__udivmoddi4+0x27e>
2000d55a:	4618      	mov	r0, r3
2000d55c:	e795      	b.n	2000d48a <__udivmoddi4+0x1da>
2000d55e:	4667      	mov	r7, ip
2000d560:	e7d1      	b.n	2000d506 <__udivmoddi4+0x256>
2000d562:	4681      	mov	r9, r0
2000d564:	e77c      	b.n	2000d460 <__udivmoddi4+0x1b0>
2000d566:	3802      	subs	r0, #2
2000d568:	442c      	add	r4, r5
2000d56a:	e747      	b.n	2000d3fc <__udivmoddi4+0x14c>
2000d56c:	f1ac 0c02 	sub.w	ip, ip, #2
2000d570:	442b      	add	r3, r5
2000d572:	e72f      	b.n	2000d3d4 <__udivmoddi4+0x124>
2000d574:	4638      	mov	r0, r7
2000d576:	e708      	b.n	2000d38a <__udivmoddi4+0xda>
2000d578:	4637      	mov	r7, r6
2000d57a:	e6e9      	b.n	2000d350 <__udivmoddi4+0xa0>

2000d57c <__aeabi_idiv0>:
2000d57c:	4770      	bx	lr
2000d57e:	bf00      	nop

2000d580 <crc32stream>:
2000d580:	b480      	push	{r7}
2000d582:	b083      	sub	sp, #12
2000d584:	af00      	add	r7, sp, #0
2000d586:	4603      	mov	r3, r0
2000d588:	6039      	str	r1, [r7, #0]
2000d58a:	71fb      	strb	r3, [r7, #7]
2000d58c:	683b      	ldr	r3, [r7, #0]
2000d58e:	0a1a      	lsrs	r2, r3, #8
2000d590:	79f9      	ldrb	r1, [r7, #7]
2000d592:	683b      	ldr	r3, [r7, #0]
2000d594:	404b      	eors	r3, r1
2000d596:	b2db      	uxtb	r3, r3
2000d598:	4906      	ldr	r1, [pc, #24]	; (2000d5b4 <crc32stream+0x34>)
2000d59a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
2000d59e:	4053      	eors	r3, r2
2000d5a0:	603b      	str	r3, [r7, #0]
2000d5a2:	683b      	ldr	r3, [r7, #0]
2000d5a4:	43db      	mvns	r3, r3
2000d5a6:	4618      	mov	r0, r3
2000d5a8:	370c      	adds	r7, #12
2000d5aa:	46bd      	mov	sp, r7
2000d5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
2000d5b0:	4770      	bx	lr
2000d5b2:	bf00      	nop
2000d5b4:	2000fe04 	.word	0x2000fe04

2000d5b8 <crc32>:
2000d5b8:	b580      	push	{r7, lr}
2000d5ba:	b086      	sub	sp, #24
2000d5bc:	af00      	add	r7, sp, #0
2000d5be:	60f8      	str	r0, [r7, #12]
2000d5c0:	60b9      	str	r1, [r7, #8]
2000d5c2:	607a      	str	r2, [r7, #4]
2000d5c4:	2300      	movs	r3, #0
2000d5c6:	617b      	str	r3, [r7, #20]
2000d5c8:	e00b      	b.n	2000d5e2 <crc32+0x2a>
2000d5ca:	68fa      	ldr	r2, [r7, #12]
2000d5cc:	697b      	ldr	r3, [r7, #20]
2000d5ce:	4413      	add	r3, r2
2000d5d0:	781b      	ldrb	r3, [r3, #0]
2000d5d2:	6879      	ldr	r1, [r7, #4]
2000d5d4:	4618      	mov	r0, r3
2000d5d6:	f7ff ffd3 	bl	2000d580 <crc32stream>
2000d5da:	6078      	str	r0, [r7, #4]
2000d5dc:	697b      	ldr	r3, [r7, #20]
2000d5de:	3301      	adds	r3, #1
2000d5e0:	617b      	str	r3, [r7, #20]
2000d5e2:	697a      	ldr	r2, [r7, #20]
2000d5e4:	68bb      	ldr	r3, [r7, #8]
2000d5e6:	429a      	cmp	r2, r3
2000d5e8:	d3ef      	bcc.n	2000d5ca <crc32+0x12>
2000d5ea:	687b      	ldr	r3, [r7, #4]
2000d5ec:	4618      	mov	r0, r3
2000d5ee:	3718      	adds	r7, #24
2000d5f0:	46bd      	mov	sp, r7
2000d5f2:	bd80      	pop	{r7, pc}

2000d5f4 <MX_GPIO_Init>:
     PD9   ------> USART3_RX
     PD5   ------> USART2_TX
     PD6   ------> USART2_RX
*/
void MX_GPIO_Init(void)
{
2000d5f4:	b580      	push	{r7, lr}
2000d5f6:	b08a      	sub	sp, #40	; 0x28
2000d5f8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
2000d5fa:	f107 0314 	add.w	r3, r7, #20
2000d5fe:	2200      	movs	r2, #0
2000d600:	601a      	str	r2, [r3, #0]
2000d602:	605a      	str	r2, [r3, #4]
2000d604:	609a      	str	r2, [r3, #8]
2000d606:	60da      	str	r2, [r3, #12]
2000d608:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
2000d60a:	2300      	movs	r3, #0
2000d60c:	613b      	str	r3, [r7, #16]
2000d60e:	4b3f      	ldr	r3, [pc, #252]	; (2000d70c <MX_GPIO_Init+0x118>)
2000d610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2000d612:	4a3e      	ldr	r2, [pc, #248]	; (2000d70c <MX_GPIO_Init+0x118>)
2000d614:	f043 0304 	orr.w	r3, r3, #4
2000d618:	6313      	str	r3, [r2, #48]	; 0x30
2000d61a:	4b3c      	ldr	r3, [pc, #240]	; (2000d70c <MX_GPIO_Init+0x118>)
2000d61c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2000d61e:	f003 0304 	and.w	r3, r3, #4
2000d622:	613b      	str	r3, [r7, #16]
2000d624:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
2000d626:	2300      	movs	r3, #0
2000d628:	60fb      	str	r3, [r7, #12]
2000d62a:	4b38      	ldr	r3, [pc, #224]	; (2000d70c <MX_GPIO_Init+0x118>)
2000d62c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2000d62e:	4a37      	ldr	r2, [pc, #220]	; (2000d70c <MX_GPIO_Init+0x118>)
2000d630:	f043 0380 	orr.w	r3, r3, #128	; 0x80
2000d634:	6313      	str	r3, [r2, #48]	; 0x30
2000d636:	4b35      	ldr	r3, [pc, #212]	; (2000d70c <MX_GPIO_Init+0x118>)
2000d638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2000d63a:	f003 0380 	and.w	r3, r3, #128	; 0x80
2000d63e:	60fb      	str	r3, [r7, #12]
2000d640:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
2000d642:	2300      	movs	r3, #0
2000d644:	60bb      	str	r3, [r7, #8]
2000d646:	4b31      	ldr	r3, [pc, #196]	; (2000d70c <MX_GPIO_Init+0x118>)
2000d648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2000d64a:	4a30      	ldr	r2, [pc, #192]	; (2000d70c <MX_GPIO_Init+0x118>)
2000d64c:	f043 0308 	orr.w	r3, r3, #8
2000d650:	6313      	str	r3, [r2, #48]	; 0x30
2000d652:	4b2e      	ldr	r3, [pc, #184]	; (2000d70c <MX_GPIO_Init+0x118>)
2000d654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2000d656:	f003 0308 	and.w	r3, r3, #8
2000d65a:	60bb      	str	r3, [r7, #8]
2000d65c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
2000d65e:	2300      	movs	r3, #0
2000d660:	607b      	str	r3, [r7, #4]
2000d662:	4b2a      	ldr	r3, [pc, #168]	; (2000d70c <MX_GPIO_Init+0x118>)
2000d664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2000d666:	4a29      	ldr	r2, [pc, #164]	; (2000d70c <MX_GPIO_Init+0x118>)
2000d668:	f043 0301 	orr.w	r3, r3, #1
2000d66c:	6313      	str	r3, [r2, #48]	; 0x30
2000d66e:	4b27      	ldr	r3, [pc, #156]	; (2000d70c <MX_GPIO_Init+0x118>)
2000d670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2000d672:	f003 0301 	and.w	r3, r3, #1
2000d676:	607b      	str	r3, [r7, #4]
2000d678:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
2000d67a:	2300      	movs	r3, #0
2000d67c:	603b      	str	r3, [r7, #0]
2000d67e:	4b23      	ldr	r3, [pc, #140]	; (2000d70c <MX_GPIO_Init+0x118>)
2000d680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2000d682:	4a22      	ldr	r2, [pc, #136]	; (2000d70c <MX_GPIO_Init+0x118>)
2000d684:	f043 0302 	orr.w	r3, r3, #2
2000d688:	6313      	str	r3, [r2, #48]	; 0x30
2000d68a:	4b20      	ldr	r3, [pc, #128]	; (2000d70c <MX_GPIO_Init+0x118>)
2000d68c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2000d68e:	f003 0302 	and.w	r3, r3, #2
2000d692:	603b      	str	r3, [r7, #0]
2000d694:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
2000d696:	2200      	movs	r2, #0
2000d698:	f44f 4160 	mov.w	r1, #57344	; 0xe000
2000d69c:	481c      	ldr	r0, [pc, #112]	; (2000d710 <MX_GPIO_Init+0x11c>)
2000d69e:	f000 fecb 	bl	2000e438 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD8 PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
2000d6a2:	f44f 7340 	mov.w	r3, #768	; 0x300
2000d6a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
2000d6a8:	2302      	movs	r3, #2
2000d6aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
2000d6ac:	2300      	movs	r3, #0
2000d6ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
2000d6b0:	2303      	movs	r3, #3
2000d6b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
2000d6b4:	2307      	movs	r3, #7
2000d6b6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
2000d6b8:	f107 0314 	add.w	r3, r7, #20
2000d6bc:	4619      	mov	r1, r3
2000d6be:	4814      	ldr	r0, [pc, #80]	; (2000d710 <MX_GPIO_Init+0x11c>)
2000d6c0:	f000 fd20 	bl	2000e104 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
2000d6c4:	f44f 4360 	mov.w	r3, #57344	; 0xe000
2000d6c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
2000d6ca:	2301      	movs	r3, #1
2000d6cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
2000d6ce:	2300      	movs	r3, #0
2000d6d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
2000d6d2:	2302      	movs	r3, #2
2000d6d4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
2000d6d6:	f107 0314 	add.w	r3, r7, #20
2000d6da:	4619      	mov	r1, r3
2000d6dc:	480c      	ldr	r0, [pc, #48]	; (2000d710 <MX_GPIO_Init+0x11c>)
2000d6de:	f000 fd11 	bl	2000e104 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD5 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
2000d6e2:	2360      	movs	r3, #96	; 0x60
2000d6e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
2000d6e6:	2302      	movs	r3, #2
2000d6e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
2000d6ea:	2300      	movs	r3, #0
2000d6ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
2000d6ee:	2303      	movs	r3, #3
2000d6f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
2000d6f2:	2307      	movs	r3, #7
2000d6f4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
2000d6f6:	f107 0314 	add.w	r3, r7, #20
2000d6fa:	4619      	mov	r1, r3
2000d6fc:	4804      	ldr	r0, [pc, #16]	; (2000d710 <MX_GPIO_Init+0x11c>)
2000d6fe:	f000 fd01 	bl	2000e104 <HAL_GPIO_Init>

}
2000d702:	bf00      	nop
2000d704:	3728      	adds	r7, #40	; 0x28
2000d706:	46bd      	mov	sp, r7
2000d708:	bd80      	pop	{r7, pc}
2000d70a:	bf00      	nop
2000d70c:	40023800 	.word	0x40023800
2000d710:	40020c00 	.word	0x40020c00

2000d714 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
2000d714:	b580      	push	{r7, lr}
2000d716:	af00      	add	r7, sp, #0

  hiwdg.Instance = IWDG;
2000d718:	4b09      	ldr	r3, [pc, #36]	; (2000d740 <MX_IWDG_Init+0x2c>)
2000d71a:	4a0a      	ldr	r2, [pc, #40]	; (2000d744 <MX_IWDG_Init+0x30>)
2000d71c:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_64;
2000d71e:	4b08      	ldr	r3, [pc, #32]	; (2000d740 <MX_IWDG_Init+0x2c>)
2000d720:	2204      	movs	r2, #4
2000d722:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4095;
2000d724:	4b06      	ldr	r3, [pc, #24]	; (2000d740 <MX_IWDG_Init+0x2c>)
2000d726:	f640 72ff 	movw	r2, #4095	; 0xfff
2000d72a:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
2000d72c:	4804      	ldr	r0, [pc, #16]	; (2000d740 <MX_IWDG_Init+0x2c>)
2000d72e:	f000 fe9c 	bl	2000e46a <HAL_IWDG_Init>
2000d732:	4603      	mov	r3, r0
2000d734:	2b00      	cmp	r3, #0
2000d736:	d001      	beq.n	2000d73c <MX_IWDG_Init+0x28>
  {
    Error_Handler();
2000d738:	f000 f924 	bl	2000d984 <Error_Handler>
  }

}
2000d73c:	bf00      	nop
2000d73e:	bd80      	pop	{r7, pc}
2000d740:	20010304 	.word	0x20010304
2000d744:	40003000 	.word	0x40003000

2000d748 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
2000d748:	b580      	push	{r7, lr}
2000d74a:	b0a2      	sub	sp, #136	; 0x88
2000d74c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
2000d74e:	f000 fb5f 	bl	2000de10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
2000d752:	f000 f895 	bl	2000d880 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
2000d756:	f7ff ff4d 	bl	2000d5f4 <MX_GPIO_Init>
  MX_IWDG_Init();
2000d75a:	f7ff ffdb 	bl	2000d714 <MX_IWDG_Init>
  MX_RTC_Init();
2000d75e:	f000 f919 	bl	2000d994 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  /* Do not remove this code below */
  MX_TRACE_Init();
2000d762:	f000 fa29 	bl	2000dbb8 <MX_TRACE_Init>
  SDK_TRACE_Start();
2000d766:	f000 fa49 	bl	2000dbfc <SDK_TRACE_Start>
  /* Do not remove this code from above */

  /* Place your code from here */

  	RTC_TimeTypeDef time = {0};
2000d76a:	f107 0368 	add.w	r3, r7, #104	; 0x68
2000d76e:	2200      	movs	r2, #0
2000d770:	601a      	str	r2, [r3, #0]
2000d772:	605a      	str	r2, [r3, #4]
2000d774:	609a      	str	r2, [r3, #8]
2000d776:	60da      	str	r2, [r3, #12]
2000d778:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef date = {0};
2000d77a:	2300      	movs	r3, #0
2000d77c:	667b      	str	r3, [r7, #100]	; 0x64

	char str[100] = {0};
2000d77e:	463b      	mov	r3, r7
2000d780:	2264      	movs	r2, #100	; 0x64
2000d782:	2100      	movs	r1, #0
2000d784:	4618      	mov	r0, r3
2000d786:	f001 fefb 	bl	2000f580 <memset>

	HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
2000d78a:	f107 0368 	add.w	r3, r7, #104	; 0x68
2000d78e:	2200      	movs	r2, #0
2000d790:	4619      	mov	r1, r3
2000d792:	4838      	ldr	r0, [pc, #224]	; (2000d874 <main+0x12c>)
2000d794:	f001 fce6 	bl	2000f164 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
2000d798:	f107 0364 	add.w	r3, r7, #100	; 0x64
2000d79c:	2200      	movs	r2, #0
2000d79e:	4619      	mov	r1, r3
2000d7a0:	4834      	ldr	r0, [pc, #208]	; (2000d874 <main+0x12c>)
2000d7a2:	f001 fde4 	bl	2000f36e <HAL_RTC_GetDate>

	SDK_TRACE_Timestamp(PRINT, 0);
2000d7a6:	2100      	movs	r1, #0
2000d7a8:	2004      	movs	r0, #4
2000d7aa:	f000 fa5f 	bl	2000dc6c <SDK_TRACE_Timestamp>
  	SDK_TRACE_Timestamp(PRINT, 1);
2000d7ae:	2101      	movs	r1, #1
2000d7b0:	2004      	movs	r0, #4
2000d7b2:	f000 fa5b 	bl	2000dc6c <SDK_TRACE_Timestamp>
	sprintf(str, "1: Hour = %d Minutes = %d Seconds = %d", time.Hours, time.Minutes, time.Seconds);
2000d7b6:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
2000d7ba:	461a      	mov	r2, r3
2000d7bc:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
2000d7c0:	4619      	mov	r1, r3
2000d7c2:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
2000d7c6:	4638      	mov	r0, r7
2000d7c8:	9300      	str	r3, [sp, #0]
2000d7ca:	460b      	mov	r3, r1
2000d7cc:	492a      	ldr	r1, [pc, #168]	; (2000d878 <main+0x130>)
2000d7ce:	f001 fedf 	bl	2000f590 <siprintf>
  	SDK_TRACE_Print(str);
2000d7d2:	463b      	mov	r3, r7
2000d7d4:	4618      	mov	r0, r3
2000d7d6:	f000 fa9b 	bl	2000dd10 <SDK_TRACE_Print>
  	SDK_TRACE_Timestamp(PRINT, 1);
2000d7da:	2101      	movs	r1, #1
2000d7dc:	2004      	movs	r0, #4
2000d7de:	f000 fa45 	bl	2000dc6c <SDK_TRACE_Timestamp>
	SDK_TRACE_Timestamp(PRINT, 0);
2000d7e2:	2100      	movs	r1, #0
2000d7e4:	2004      	movs	r0, #4
2000d7e6:	f000 fa41 	bl	2000dc6c <SDK_TRACE_Timestamp>

  	for(int i = 0; i < 100; i++)
2000d7ea:	2300      	movs	r3, #0
2000d7ec:	67fb      	str	r3, [r7, #124]	; 0x7c
2000d7ee:	e007      	b.n	2000d800 <main+0xb8>
  		str[i] = 0;
2000d7f0:	463a      	mov	r2, r7
2000d7f2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
2000d7f4:	4413      	add	r3, r2
2000d7f6:	2200      	movs	r2, #0
2000d7f8:	701a      	strb	r2, [r3, #0]
  	for(int i = 0; i < 100; i++)
2000d7fa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
2000d7fc:	3301      	adds	r3, #1
2000d7fe:	67fb      	str	r3, [r7, #124]	; 0x7c
2000d800:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
2000d802:	2b63      	cmp	r3, #99	; 0x63
2000d804:	ddf4      	ble.n	2000d7f0 <main+0xa8>

  	HAL_Delay(3000);
2000d806:	f640 30b8 	movw	r0, #3000	; 0xbb8
2000d80a:	f000 fb73 	bl	2000def4 <HAL_Delay>

	HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
2000d80e:	f107 0368 	add.w	r3, r7, #104	; 0x68
2000d812:	2200      	movs	r2, #0
2000d814:	4619      	mov	r1, r3
2000d816:	4817      	ldr	r0, [pc, #92]	; (2000d874 <main+0x12c>)
2000d818:	f001 fca4 	bl	2000f164 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
2000d81c:	f107 0364 	add.w	r3, r7, #100	; 0x64
2000d820:	2200      	movs	r2, #0
2000d822:	4619      	mov	r1, r3
2000d824:	4813      	ldr	r0, [pc, #76]	; (2000d874 <main+0x12c>)
2000d826:	f001 fda2 	bl	2000f36e <HAL_RTC_GetDate>

	SDK_TRACE_Timestamp(PRINT, 0);
2000d82a:	2100      	movs	r1, #0
2000d82c:	2004      	movs	r0, #4
2000d82e:	f000 fa1d 	bl	2000dc6c <SDK_TRACE_Timestamp>
  	SDK_TRACE_Timestamp(PRINT, 1);
2000d832:	2101      	movs	r1, #1
2000d834:	2004      	movs	r0, #4
2000d836:	f000 fa19 	bl	2000dc6c <SDK_TRACE_Timestamp>
	sprintf(str, "2: Hour = %d Minutes = %d Seconds = %d", time.Hours, time.Minutes, time.Seconds);
2000d83a:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
2000d83e:	461a      	mov	r2, r3
2000d840:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
2000d844:	4619      	mov	r1, r3
2000d846:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
2000d84a:	4638      	mov	r0, r7
2000d84c:	9300      	str	r3, [sp, #0]
2000d84e:	460b      	mov	r3, r1
2000d850:	490a      	ldr	r1, [pc, #40]	; (2000d87c <main+0x134>)
2000d852:	f001 fe9d 	bl	2000f590 <siprintf>
  	SDK_TRACE_Print(str);
2000d856:	463b      	mov	r3, r7
2000d858:	4618      	mov	r0, r3
2000d85a:	f000 fa59 	bl	2000dd10 <SDK_TRACE_Print>
  	SDK_TRACE_Timestamp(PRINT, 1);
2000d85e:	2101      	movs	r1, #1
2000d860:	2004      	movs	r0, #4
2000d862:	f000 fa03 	bl	2000dc6c <SDK_TRACE_Timestamp>
	SDK_TRACE_Timestamp(PRINT, 0);
2000d866:	2100      	movs	r1, #0
2000d868:	2004      	movs	r0, #4
2000d86a:	f000 f9ff 	bl	2000dc6c <SDK_TRACE_Timestamp>

  /* Place your code before here */
  /* Do not remove this code below */
  SDK_TRACE_Stop();
2000d86e:	f000 f9d5 	bl	2000dc1c <SDK_TRACE_Stop>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
2000d872:	e7fe      	b.n	2000d872 <main+0x12a>
2000d874:	20010310 	.word	0x20010310
2000d878:	2000fdb4 	.word	0x2000fdb4
2000d87c:	2000fddc 	.word	0x2000fddc

2000d880 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
2000d880:	b580      	push	{r7, lr}
2000d882:	b098      	sub	sp, #96	; 0x60
2000d884:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
2000d886:	f107 0330 	add.w	r3, r7, #48	; 0x30
2000d88a:	2230      	movs	r2, #48	; 0x30
2000d88c:	2100      	movs	r1, #0
2000d88e:	4618      	mov	r0, r3
2000d890:	f001 fe76 	bl	2000f580 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
2000d894:	f107 031c 	add.w	r3, r7, #28
2000d898:	2200      	movs	r2, #0
2000d89a:	601a      	str	r2, [r3, #0]
2000d89c:	605a      	str	r2, [r3, #4]
2000d89e:	609a      	str	r2, [r3, #8]
2000d8a0:	60da      	str	r2, [r3, #12]
2000d8a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
2000d8a4:	f107 030c 	add.w	r3, r7, #12
2000d8a8:	2200      	movs	r2, #0
2000d8aa:	601a      	str	r2, [r3, #0]
2000d8ac:	605a      	str	r2, [r3, #4]
2000d8ae:	609a      	str	r2, [r3, #8]
2000d8b0:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
2000d8b2:	2300      	movs	r3, #0
2000d8b4:	60bb      	str	r3, [r7, #8]
2000d8b6:	4b31      	ldr	r3, [pc, #196]	; (2000d97c <SystemClock_Config+0xfc>)
2000d8b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2000d8ba:	4a30      	ldr	r2, [pc, #192]	; (2000d97c <SystemClock_Config+0xfc>)
2000d8bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
2000d8c0:	6413      	str	r3, [r2, #64]	; 0x40
2000d8c2:	4b2e      	ldr	r3, [pc, #184]	; (2000d97c <SystemClock_Config+0xfc>)
2000d8c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2000d8c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
2000d8ca:	60bb      	str	r3, [r7, #8]
2000d8cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
2000d8ce:	2300      	movs	r3, #0
2000d8d0:	607b      	str	r3, [r7, #4]
2000d8d2:	4b2b      	ldr	r3, [pc, #172]	; (2000d980 <SystemClock_Config+0x100>)
2000d8d4:	681b      	ldr	r3, [r3, #0]
2000d8d6:	4a2a      	ldr	r2, [pc, #168]	; (2000d980 <SystemClock_Config+0x100>)
2000d8d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
2000d8dc:	6013      	str	r3, [r2, #0]
2000d8de:	4b28      	ldr	r3, [pc, #160]	; (2000d980 <SystemClock_Config+0x100>)
2000d8e0:	681b      	ldr	r3, [r3, #0]
2000d8e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
2000d8e6:	607b      	str	r3, [r7, #4]
2000d8e8:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
2000d8ea:	2309      	movs	r3, #9
2000d8ec:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
2000d8ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
2000d8f2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
2000d8f4:	2301      	movs	r3, #1
2000d8f6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
2000d8f8:	2302      	movs	r3, #2
2000d8fa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
2000d8fc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
2000d900:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 25;
2000d902:	2319      	movs	r3, #25
2000d904:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
2000d906:	f44f 73a8 	mov.w	r3, #336	; 0x150
2000d90a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
2000d90c:	2302      	movs	r3, #2
2000d90e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
2000d910:	2304      	movs	r3, #4
2000d912:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
2000d914:	f107 0330 	add.w	r3, r7, #48	; 0x30
2000d918:	4618      	mov	r0, r3
2000d91a:	f000 fddf 	bl	2000e4dc <HAL_RCC_OscConfig>
2000d91e:	4603      	mov	r3, r0
2000d920:	2b00      	cmp	r3, #0
2000d922:	d001      	beq.n	2000d928 <SystemClock_Config+0xa8>
  {
    Error_Handler();
2000d924:	f000 f82e 	bl	2000d984 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
2000d928:	230f      	movs	r3, #15
2000d92a:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
2000d92c:	2302      	movs	r3, #2
2000d92e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
2000d930:	2300      	movs	r3, #0
2000d932:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
2000d934:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
2000d938:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
2000d93a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
2000d93e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
2000d940:	f107 031c 	add.w	r3, r7, #28
2000d944:	2105      	movs	r1, #5
2000d946:	4618      	mov	r0, r3
2000d948:	f001 f838 	bl	2000e9bc <HAL_RCC_ClockConfig>
2000d94c:	4603      	mov	r3, r0
2000d94e:	2b00      	cmp	r3, #0
2000d950:	d001      	beq.n	2000d956 <SystemClock_Config+0xd6>
  {
    Error_Handler();
2000d952:	f000 f817 	bl	2000d984 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
2000d956:	2302      	movs	r3, #2
2000d958:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
2000d95a:	f44f 7300 	mov.w	r3, #512	; 0x200
2000d95e:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
2000d960:	f107 030c 	add.w	r3, r7, #12
2000d964:	4618      	mov	r0, r3
2000d966:	f001 f9cd 	bl	2000ed04 <HAL_RCCEx_PeriphCLKConfig>
2000d96a:	4603      	mov	r3, r0
2000d96c:	2b00      	cmp	r3, #0
2000d96e:	d001      	beq.n	2000d974 <SystemClock_Config+0xf4>
  {
    Error_Handler();
2000d970:	f000 f808 	bl	2000d984 <Error_Handler>
  }
}
2000d974:	bf00      	nop
2000d976:	3760      	adds	r7, #96	; 0x60
2000d978:	46bd      	mov	sp, r7
2000d97a:	bd80      	pop	{r7, pc}
2000d97c:	40023800 	.word	0x40023800
2000d980:	40007000 	.word	0x40007000

2000d984 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
2000d984:	b480      	push	{r7}
2000d986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
2000d988:	bf00      	nop
2000d98a:	46bd      	mov	sp, r7
2000d98c:	f85d 7b04 	ldr.w	r7, [sp], #4
2000d990:	4770      	bx	lr
	...

2000d994 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
2000d994:	b580      	push	{r7, lr}
2000d996:	b086      	sub	sp, #24
2000d998:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef sTime = {0};
2000d99a:	1d3b      	adds	r3, r7, #4
2000d99c:	2200      	movs	r2, #0
2000d99e:	601a      	str	r2, [r3, #0]
2000d9a0:	605a      	str	r2, [r3, #4]
2000d9a2:	609a      	str	r2, [r3, #8]
2000d9a4:	60da      	str	r2, [r3, #12]
2000d9a6:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
2000d9a8:	2300      	movs	r3, #0
2000d9aa:	603b      	str	r3, [r7, #0]

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
2000d9ac:	4b24      	ldr	r3, [pc, #144]	; (2000da40 <MX_RTC_Init+0xac>)
2000d9ae:	4a25      	ldr	r2, [pc, #148]	; (2000da44 <MX_RTC_Init+0xb0>)
2000d9b0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
2000d9b2:	4b23      	ldr	r3, [pc, #140]	; (2000da40 <MX_RTC_Init+0xac>)
2000d9b4:	2200      	movs	r2, #0
2000d9b6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
2000d9b8:	4b21      	ldr	r3, [pc, #132]	; (2000da40 <MX_RTC_Init+0xac>)
2000d9ba:	227f      	movs	r2, #127	; 0x7f
2000d9bc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
2000d9be:	4b20      	ldr	r3, [pc, #128]	; (2000da40 <MX_RTC_Init+0xac>)
2000d9c0:	22ff      	movs	r2, #255	; 0xff
2000d9c2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
2000d9c4:	4b1e      	ldr	r3, [pc, #120]	; (2000da40 <MX_RTC_Init+0xac>)
2000d9c6:	2200      	movs	r2, #0
2000d9c8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
2000d9ca:	4b1d      	ldr	r3, [pc, #116]	; (2000da40 <MX_RTC_Init+0xac>)
2000d9cc:	2200      	movs	r2, #0
2000d9ce:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
2000d9d0:	4b1b      	ldr	r3, [pc, #108]	; (2000da40 <MX_RTC_Init+0xac>)
2000d9d2:	2200      	movs	r2, #0
2000d9d4:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
2000d9d6:	481a      	ldr	r0, [pc, #104]	; (2000da40 <MX_RTC_Init+0xac>)
2000d9d8:	f001 fa76 	bl	2000eec8 <HAL_RTC_Init>
2000d9dc:	4603      	mov	r3, r0
2000d9de:	2b00      	cmp	r3, #0
2000d9e0:	d001      	beq.n	2000d9e6 <MX_RTC_Init+0x52>
  {
    Error_Handler();
2000d9e2:	f7ff ffcf 	bl	2000d984 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x16;
2000d9e6:	2316      	movs	r3, #22
2000d9e8:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x20;
2000d9ea:	2320      	movs	r3, #32
2000d9ec:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x30;
2000d9ee:	2330      	movs	r3, #48	; 0x30
2000d9f0:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
2000d9f2:	2300      	movs	r3, #0
2000d9f4:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
2000d9f6:	2300      	movs	r3, #0
2000d9f8:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
2000d9fa:	1d3b      	adds	r3, r7, #4
2000d9fc:	2201      	movs	r2, #1
2000d9fe:	4619      	mov	r1, r3
2000da00:	480f      	ldr	r0, [pc, #60]	; (2000da40 <MX_RTC_Init+0xac>)
2000da02:	f001 faf2 	bl	2000efea <HAL_RTC_SetTime>
2000da06:	4603      	mov	r3, r0
2000da08:	2b00      	cmp	r3, #0
2000da0a:	d001      	beq.n	2000da10 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
2000da0c:	f7ff ffba 	bl	2000d984 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
2000da10:	2301      	movs	r3, #1
2000da12:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
2000da14:	2301      	movs	r3, #1
2000da16:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
2000da18:	2301      	movs	r3, #1
2000da1a:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
2000da1c:	2300      	movs	r3, #0
2000da1e:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
2000da20:	463b      	mov	r3, r7
2000da22:	2201      	movs	r2, #1
2000da24:	4619      	mov	r1, r3
2000da26:	4806      	ldr	r0, [pc, #24]	; (2000da40 <MX_RTC_Init+0xac>)
2000da28:	f001 fbfa 	bl	2000f220 <HAL_RTC_SetDate>
2000da2c:	4603      	mov	r3, r0
2000da2e:	2b00      	cmp	r3, #0
2000da30:	d001      	beq.n	2000da36 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
2000da32:	f7ff ffa7 	bl	2000d984 <Error_Handler>
  }

}
2000da36:	bf00      	nop
2000da38:	3718      	adds	r7, #24
2000da3a:	46bd      	mov	sp, r7
2000da3c:	bd80      	pop	{r7, pc}
2000da3e:	bf00      	nop
2000da40:	20010310 	.word	0x20010310
2000da44:	40002800 	.word	0x40002800

2000da48 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
2000da48:	b480      	push	{r7}
2000da4a:	b083      	sub	sp, #12
2000da4c:	af00      	add	r7, sp, #0
2000da4e:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
2000da50:	687b      	ldr	r3, [r7, #4]
2000da52:	681b      	ldr	r3, [r3, #0]
2000da54:	4a05      	ldr	r2, [pc, #20]	; (2000da6c <HAL_RTC_MspInit+0x24>)
2000da56:	4293      	cmp	r3, r2
2000da58:	d102      	bne.n	2000da60 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
2000da5a:	4b05      	ldr	r3, [pc, #20]	; (2000da70 <HAL_RTC_MspInit+0x28>)
2000da5c:	2201      	movs	r2, #1
2000da5e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
2000da60:	bf00      	nop
2000da62:	370c      	adds	r7, #12
2000da64:	46bd      	mov	sp, r7
2000da66:	f85d 7b04 	ldr.w	r7, [sp], #4
2000da6a:	4770      	bx	lr
2000da6c:	40002800 	.word	0x40002800
2000da70:	42470e3c 	.word	0x42470e3c

2000da74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
2000da74:	b480      	push	{r7}
2000da76:	b083      	sub	sp, #12
2000da78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
2000da7a:	2300      	movs	r3, #0
2000da7c:	607b      	str	r3, [r7, #4]
2000da7e:	4b10      	ldr	r3, [pc, #64]	; (2000dac0 <HAL_MspInit+0x4c>)
2000da80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2000da82:	4a0f      	ldr	r2, [pc, #60]	; (2000dac0 <HAL_MspInit+0x4c>)
2000da84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
2000da88:	6453      	str	r3, [r2, #68]	; 0x44
2000da8a:	4b0d      	ldr	r3, [pc, #52]	; (2000dac0 <HAL_MspInit+0x4c>)
2000da8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2000da8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
2000da92:	607b      	str	r3, [r7, #4]
2000da94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
2000da96:	2300      	movs	r3, #0
2000da98:	603b      	str	r3, [r7, #0]
2000da9a:	4b09      	ldr	r3, [pc, #36]	; (2000dac0 <HAL_MspInit+0x4c>)
2000da9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2000da9e:	4a08      	ldr	r2, [pc, #32]	; (2000dac0 <HAL_MspInit+0x4c>)
2000daa0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
2000daa4:	6413      	str	r3, [r2, #64]	; 0x40
2000daa6:	4b06      	ldr	r3, [pc, #24]	; (2000dac0 <HAL_MspInit+0x4c>)
2000daa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2000daaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
2000daae:	603b      	str	r3, [r7, #0]
2000dab0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
2000dab2:	bf00      	nop
2000dab4:	370c      	adds	r7, #12
2000dab6:	46bd      	mov	sp, r7
2000dab8:	f85d 7b04 	ldr.w	r7, [sp], #4
2000dabc:	4770      	bx	lr
2000dabe:	bf00      	nop
2000dac0:	40023800 	.word	0x40023800

2000dac4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
2000dac4:	b480      	push	{r7}
2000dac6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
2000dac8:	bf00      	nop
2000daca:	46bd      	mov	sp, r7
2000dacc:	f85d 7b04 	ldr.w	r7, [sp], #4
2000dad0:	4770      	bx	lr

2000dad2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
2000dad2:	b480      	push	{r7}
2000dad4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
2000dad6:	e7fe      	b.n	2000dad6 <HardFault_Handler+0x4>

2000dad8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
2000dad8:	b480      	push	{r7}
2000dada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
2000dadc:	e7fe      	b.n	2000dadc <MemManage_Handler+0x4>

2000dade <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
2000dade:	b480      	push	{r7}
2000dae0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
2000dae2:	e7fe      	b.n	2000dae2 <BusFault_Handler+0x4>

2000dae4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
2000dae4:	b480      	push	{r7}
2000dae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
2000dae8:	e7fe      	b.n	2000dae8 <UsageFault_Handler+0x4>

2000daea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
2000daea:	b480      	push	{r7}
2000daec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
2000daee:	bf00      	nop
2000daf0:	46bd      	mov	sp, r7
2000daf2:	f85d 7b04 	ldr.w	r7, [sp], #4
2000daf6:	4770      	bx	lr

2000daf8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
2000daf8:	b480      	push	{r7}
2000dafa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
2000dafc:	bf00      	nop
2000dafe:	46bd      	mov	sp, r7
2000db00:	f85d 7b04 	ldr.w	r7, [sp], #4
2000db04:	4770      	bx	lr

2000db06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
2000db06:	b480      	push	{r7}
2000db08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
2000db0a:	bf00      	nop
2000db0c:	46bd      	mov	sp, r7
2000db0e:	f85d 7b04 	ldr.w	r7, [sp], #4
2000db12:	4770      	bx	lr

2000db14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
2000db14:	b580      	push	{r7, lr}
2000db16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
2000db18:	f000 f9cc 	bl	2000deb4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
2000db1c:	bf00      	nop
2000db1e:	bd80      	pop	{r7, pc}

2000db20 <_sbrk>:
2000db20:	b580      	push	{r7, lr}
2000db22:	b086      	sub	sp, #24
2000db24:	af00      	add	r7, sp, #0
2000db26:	6078      	str	r0, [r7, #4]
2000db28:	4a14      	ldr	r2, [pc, #80]	; (2000db7c <_sbrk+0x5c>)
2000db2a:	4b15      	ldr	r3, [pc, #84]	; (2000db80 <_sbrk+0x60>)
2000db2c:	1ad3      	subs	r3, r2, r3
2000db2e:	617b      	str	r3, [r7, #20]
2000db30:	697b      	ldr	r3, [r7, #20]
2000db32:	613b      	str	r3, [r7, #16]
2000db34:	4b13      	ldr	r3, [pc, #76]	; (2000db84 <_sbrk+0x64>)
2000db36:	681b      	ldr	r3, [r3, #0]
2000db38:	2b00      	cmp	r3, #0
2000db3a:	d102      	bne.n	2000db42 <_sbrk+0x22>
2000db3c:	4b11      	ldr	r3, [pc, #68]	; (2000db84 <_sbrk+0x64>)
2000db3e:	4a12      	ldr	r2, [pc, #72]	; (2000db88 <_sbrk+0x68>)
2000db40:	601a      	str	r2, [r3, #0]
2000db42:	4b10      	ldr	r3, [pc, #64]	; (2000db84 <_sbrk+0x64>)
2000db44:	681a      	ldr	r2, [r3, #0]
2000db46:	687b      	ldr	r3, [r7, #4]
2000db48:	4413      	add	r3, r2
2000db4a:	693a      	ldr	r2, [r7, #16]
2000db4c:	429a      	cmp	r2, r3
2000db4e:	d207      	bcs.n	2000db60 <_sbrk+0x40>
2000db50:	f001 fcec 	bl	2000f52c <__errno>
2000db54:	4602      	mov	r2, r0
2000db56:	230c      	movs	r3, #12
2000db58:	6013      	str	r3, [r2, #0]
2000db5a:	f04f 33ff 	mov.w	r3, #4294967295
2000db5e:	e009      	b.n	2000db74 <_sbrk+0x54>
2000db60:	4b08      	ldr	r3, [pc, #32]	; (2000db84 <_sbrk+0x64>)
2000db62:	681b      	ldr	r3, [r3, #0]
2000db64:	60fb      	str	r3, [r7, #12]
2000db66:	4b07      	ldr	r3, [pc, #28]	; (2000db84 <_sbrk+0x64>)
2000db68:	681a      	ldr	r2, [r3, #0]
2000db6a:	687b      	ldr	r3, [r7, #4]
2000db6c:	4413      	add	r3, r2
2000db6e:	4a05      	ldr	r2, [pc, #20]	; (2000db84 <_sbrk+0x64>)
2000db70:	6013      	str	r3, [r2, #0]
2000db72:	68fb      	ldr	r3, [r7, #12]
2000db74:	4618      	mov	r0, r3
2000db76:	3718      	adds	r7, #24
2000db78:	46bd      	mov	sp, r7
2000db7a:	bd80      	pop	{r7, pc}
2000db7c:	20020000 	.word	0x20020000
2000db80:	00000400 	.word	0x00000400
2000db84:	200102f4 	.word	0x200102f4
2000db88:	20010338 	.word	0x20010338

2000db8c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
2000db8c:	b480      	push	{r7}
2000db8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
2000db90:	4b07      	ldr	r3, [pc, #28]	; (2000dbb0 <SystemInit+0x24>)
2000db92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
2000db96:	4a06      	ldr	r2, [pc, #24]	; (2000dbb0 <SystemInit+0x24>)
2000db98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
2000db9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
2000dba0:	4b03      	ldr	r3, [pc, #12]	; (2000dbb0 <SystemInit+0x24>)
2000dba2:	4a04      	ldr	r2, [pc, #16]	; (2000dbb4 <SystemInit+0x28>)
2000dba4:	609a      	str	r2, [r3, #8]
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif
}
2000dba6:	bf00      	nop
2000dba8:	46bd      	mov	sp, r7
2000dbaa:	f85d 7b04 	ldr.w	r7, [sp], #4
2000dbae:	4770      	bx	lr
2000dbb0:	e000ed00 	.word	0xe000ed00
2000dbb4:	2000d000 	.word	0x2000d000

2000dbb8 <MX_TRACE_Init>:
 * ----------------------------------------------------------------------
 * Trace initialization function
 *-----------------------------------------------------------------------
 */
void MX_TRACE_Init(void)
{
2000dbb8:	b480      	push	{r7}
2000dbba:	af00      	add	r7, sp, #0
	InitCC();
2000dbbc:	4b0c      	ldr	r3, [pc, #48]	; (2000dbf0 <MX_TRACE_Init+0x38>)
2000dbbe:	681b      	ldr	r3, [r3, #0]
2000dbc0:	4a0b      	ldr	r2, [pc, #44]	; (2000dbf0 <MX_TRACE_Init+0x38>)
2000dbc2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
2000dbc6:	6013      	str	r3, [r2, #0]
	ResetCC();
2000dbc8:	4b0a      	ldr	r3, [pc, #40]	; (2000dbf4 <MX_TRACE_Init+0x3c>)
2000dbca:	2200      	movs	r2, #0
2000dbcc:	601a      	str	r2, [r3, #0]
	TI->printlog_size = 0x00;
2000dbce:	4b0a      	ldr	r3, [pc, #40]	; (2000dbf8 <MX_TRACE_Init+0x40>)
2000dbd0:	681b      	ldr	r3, [r3, #0]
2000dbd2:	2200      	movs	r2, #0
2000dbd4:	605a      	str	r2, [r3, #4]
	TI->tracelog_size = 0x00;
2000dbd6:	4b08      	ldr	r3, [pc, #32]	; (2000dbf8 <MX_TRACE_Init+0x40>)
2000dbd8:	681b      	ldr	r3, [r3, #0]
2000dbda:	2200      	movs	r2, #0
2000dbdc:	601a      	str	r2, [r3, #0]
	TI->dumpbuf_size = 0x00;
2000dbde:	4b06      	ldr	r3, [pc, #24]	; (2000dbf8 <MX_TRACE_Init+0x40>)
2000dbe0:	681b      	ldr	r3, [r3, #0]
2000dbe2:	2200      	movs	r2, #0
2000dbe4:	609a      	str	r2, [r3, #8]
}
2000dbe6:	bf00      	nop
2000dbe8:	46bd      	mov	sp, r7
2000dbea:	f85d 7b04 	ldr.w	r7, [sp], #4
2000dbee:	4770      	bx	lr
2000dbf0:	e000edfc 	.word	0xe000edfc
2000dbf4:	e0001004 	.word	0xe0001004
2000dbf8:	2001025c 	.word	0x2001025c

2000dbfc <SDK_TRACE_Start>:
 * ----------------------------------------------------------------------
 * Start trace recording function
 *-----------------------------------------------------------------------
 */
void SDK_TRACE_Start(void)
{
2000dbfc:	b480      	push	{r7}
2000dbfe:	af00      	add	r7, sp, #0
	EnableCC();
2000dc00:	4b05      	ldr	r3, [pc, #20]	; (2000dc18 <SDK_TRACE_Start+0x1c>)
2000dc02:	681b      	ldr	r3, [r3, #0]
2000dc04:	4a04      	ldr	r2, [pc, #16]	; (2000dc18 <SDK_TRACE_Start+0x1c>)
2000dc06:	f043 0301 	orr.w	r3, r3, #1
2000dc0a:	6013      	str	r3, [r2, #0]
}
2000dc0c:	bf00      	nop
2000dc0e:	46bd      	mov	sp, r7
2000dc10:	f85d 7b04 	ldr.w	r7, [sp], #4
2000dc14:	4770      	bx	lr
2000dc16:	bf00      	nop
2000dc18:	e0001000 	.word	0xe0001000

2000dc1c <SDK_TRACE_Stop>:
 * ----------------------------------------------------------------------
 * Stop trace recording function
 *-----------------------------------------------------------------------
 */
void SDK_TRACE_Stop(void)
{
2000dc1c:	b598      	push	{r3, r4, r7, lr}
2000dc1e:	af00      	add	r7, sp, #0
	DisableCC();
2000dc20:	4b0c      	ldr	r3, [pc, #48]	; (2000dc54 <SDK_TRACE_Stop+0x38>)
2000dc22:	681b      	ldr	r3, [r3, #0]
2000dc24:	4a0b      	ldr	r2, [pc, #44]	; (2000dc54 <SDK_TRACE_Stop+0x38>)
2000dc26:	f023 0301 	bic.w	r3, r3, #1
2000dc2a:	6013      	str	r3, [r2, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
2000dc2c:	b672      	cpsid	i
	__disable_irq();
	*CRC32 = crc32((unsigned char *)TRACEINFO_ADDR, sizeof(traceinfo_t) + (TI->tracelog_size), 0);
2000dc2e:	4b0a      	ldr	r3, [pc, #40]	; (2000dc58 <SDK_TRACE_Stop+0x3c>)
2000dc30:	681b      	ldr	r3, [r3, #0]
2000dc32:	681b      	ldr	r3, [r3, #0]
2000dc34:	f103 0110 	add.w	r1, r3, #16
2000dc38:	4b08      	ldr	r3, [pc, #32]	; (2000dc5c <SDK_TRACE_Stop+0x40>)
2000dc3a:	681c      	ldr	r4, [r3, #0]
2000dc3c:	2200      	movs	r2, #0
2000dc3e:	4808      	ldr	r0, [pc, #32]	; (2000dc60 <SDK_TRACE_Stop+0x44>)
2000dc40:	f7ff fcba 	bl	2000d5b8 <crc32>
2000dc44:	4603      	mov	r3, r0
2000dc46:	6023      	str	r3, [r4, #0]
	SCB->AIRCR = 0x05FA0004;
2000dc48:	4b06      	ldr	r3, [pc, #24]	; (2000dc64 <SDK_TRACE_Stop+0x48>)
2000dc4a:	4a07      	ldr	r2, [pc, #28]	; (2000dc68 <SDK_TRACE_Stop+0x4c>)
2000dc4c:	60da      	str	r2, [r3, #12]
}
2000dc4e:	bf00      	nop
2000dc50:	bd98      	pop	{r3, r4, r7, pc}
2000dc52:	bf00      	nop
2000dc54:	e0001000 	.word	0xe0001000
2000dc58:	2001025c 	.word	0x2001025c
2000dc5c:	20010264 	.word	0x20010264
2000dc60:	10000004 	.word	0x10000004
2000dc64:	e000ed00 	.word	0xe000ed00
2000dc68:	05fa0004 	.word	0x05fa0004

2000dc6c <SDK_TRACE_Timestamp>:
 * @param id Event ID (For example: LED1)
 * @param value LED port state (0 or 1)
 *-----------------------------------------------------------------------
 */
void SDK_TRACE_Timestamp(uint8_t id, uint8_t value)
{
2000dc6c:	b590      	push	{r4, r7, lr}
2000dc6e:	b085      	sub	sp, #20
2000dc70:	af00      	add	r7, sp, #0
2000dc72:	4603      	mov	r3, r0
2000dc74:	460a      	mov	r2, r1
2000dc76:	71fb      	strb	r3, [r7, #7]
2000dc78:	4613      	mov	r3, r2
2000dc7a:	71bb      	strb	r3, [r7, #6]
	uint32_t eCode = 0x00;
2000dc7c:	2300      	movs	r3, #0
2000dc7e:	60fb      	str	r3, [r7, #12]
	eCode = (eCode << 8) + 0x01;
2000dc80:	68fb      	ldr	r3, [r7, #12]
2000dc82:	021b      	lsls	r3, r3, #8
2000dc84:	3301      	adds	r3, #1
2000dc86:	60fb      	str	r3, [r7, #12]
	eCode = (eCode << 8) + value;
2000dc88:	68fb      	ldr	r3, [r7, #12]
2000dc8a:	021a      	lsls	r2, r3, #8
2000dc8c:	79bb      	ldrb	r3, [r7, #6]
2000dc8e:	4413      	add	r3, r2
2000dc90:	60fb      	str	r3, [r7, #12]
	eCode = (eCode << 8) + id;
2000dc92:	68fb      	ldr	r3, [r7, #12]
2000dc94:	021a      	lsls	r2, r3, #8
2000dc96:	79fb      	ldrb	r3, [r7, #7]
2000dc98:	4413      	add	r3, r2
2000dc9a:	60fb      	str	r3, [r7, #12]
	TL[TI->tracelog_size/8].timecode = GetCC() / (HAL_RCC_GetHCLKFreq() / CLK_Prescaler);
2000dc9c:	4b17      	ldr	r3, [pc, #92]	; (2000dcfc <SDK_TRACE_Timestamp+0x90>)
2000dc9e:	681c      	ldr	r4, [r3, #0]
2000dca0:	f001 f824 	bl	2000ecec <HAL_RCC_GetHCLKFreq>
2000dca4:	4602      	mov	r2, r0
2000dca6:	4b16      	ldr	r3, [pc, #88]	; (2000dd00 <SDK_TRACE_Timestamp+0x94>)
2000dca8:	fba3 2302 	umull	r2, r3, r3, r2
2000dcac:	0c9a      	lsrs	r2, r3, #18
2000dcae:	4b15      	ldr	r3, [pc, #84]	; (2000dd04 <SDK_TRACE_Timestamp+0x98>)
2000dcb0:	6819      	ldr	r1, [r3, #0]
2000dcb2:	4b15      	ldr	r3, [pc, #84]	; (2000dd08 <SDK_TRACE_Timestamp+0x9c>)
2000dcb4:	681b      	ldr	r3, [r3, #0]
2000dcb6:	681b      	ldr	r3, [r3, #0]
2000dcb8:	f023 0307 	bic.w	r3, r3, #7
2000dcbc:	440b      	add	r3, r1
2000dcbe:	fbb4 f2f2 	udiv	r2, r4, r2
2000dcc2:	601a      	str	r2, [r3, #0]
	TL[TI->tracelog_size/8].eventcode = eCode;
2000dcc4:	4b0f      	ldr	r3, [pc, #60]	; (2000dd04 <SDK_TRACE_Timestamp+0x98>)
2000dcc6:	681a      	ldr	r2, [r3, #0]
2000dcc8:	4b0f      	ldr	r3, [pc, #60]	; (2000dd08 <SDK_TRACE_Timestamp+0x9c>)
2000dcca:	681b      	ldr	r3, [r3, #0]
2000dccc:	681b      	ldr	r3, [r3, #0]
2000dcce:	f023 0307 	bic.w	r3, r3, #7
2000dcd2:	4413      	add	r3, r2
2000dcd4:	68fa      	ldr	r2, [r7, #12]
2000dcd6:	605a      	str	r2, [r3, #4]
	TI->tracelog_size+=8;
2000dcd8:	4b0b      	ldr	r3, [pc, #44]	; (2000dd08 <SDK_TRACE_Timestamp+0x9c>)
2000dcda:	681b      	ldr	r3, [r3, #0]
2000dcdc:	681a      	ldr	r2, [r3, #0]
2000dcde:	4b0a      	ldr	r3, [pc, #40]	; (2000dd08 <SDK_TRACE_Timestamp+0x9c>)
2000dce0:	681b      	ldr	r3, [r3, #0]
2000dce2:	3208      	adds	r2, #8
2000dce4:	601a      	str	r2, [r3, #0]
	eventId++;
2000dce6:	4b09      	ldr	r3, [pc, #36]	; (2000dd0c <SDK_TRACE_Timestamp+0xa0>)
2000dce8:	781b      	ldrb	r3, [r3, #0]
2000dcea:	3301      	adds	r3, #1
2000dcec:	b2da      	uxtb	r2, r3
2000dcee:	4b07      	ldr	r3, [pc, #28]	; (2000dd0c <SDK_TRACE_Timestamp+0xa0>)
2000dcf0:	701a      	strb	r2, [r3, #0]
}
2000dcf2:	bf00      	nop
2000dcf4:	3714      	adds	r7, #20
2000dcf6:	46bd      	mov	sp, r7
2000dcf8:	bd90      	pop	{r4, r7, pc}
2000dcfa:	bf00      	nop
2000dcfc:	e0001004 	.word	0xe0001004
2000dd00:	431bde83 	.word	0x431bde83
2000dd04:	20010260 	.word	0x20010260
2000dd08:	2001025c 	.word	0x2001025c
2000dd0c:	200102f8 	.word	0x200102f8

2000dd10 <SDK_TRACE_Print>:
 * Function for writing a message to the trace buffer
 * @param data Pointer to array of chars
 *-----------------------------------------------------------------------
 */
void SDK_TRACE_Print(const char * data)
{
2000dd10:	b590      	push	{r4, r7, lr}
2000dd12:	b085      	sub	sp, #20
2000dd14:	af00      	add	r7, sp, #0
2000dd16:	6078      	str	r0, [r7, #4]
	uint8_t len = strlen(data);
2000dd18:	6878      	ldr	r0, [r7, #4]
2000dd1a:	f7ff fa59 	bl	2000d1d0 <strlen>
2000dd1e:	4603      	mov	r3, r0
2000dd20:	72fb      	strb	r3, [r7, #11]

	*(__IO uint32_t *)(Print_Write_Address+TI->printlog_size) = GetCC() / (HAL_RCC_GetHCLKFreq() / CLK_Prescaler);
2000dd22:	4b22      	ldr	r3, [pc, #136]	; (2000ddac <SDK_TRACE_Print+0x9c>)
2000dd24:	681c      	ldr	r4, [r3, #0]
2000dd26:	f000 ffe1 	bl	2000ecec <HAL_RCC_GetHCLKFreq>
2000dd2a:	4602      	mov	r2, r0
2000dd2c:	4b20      	ldr	r3, [pc, #128]	; (2000ddb0 <SDK_TRACE_Print+0xa0>)
2000dd2e:	fba3 2302 	umull	r2, r3, r3, r2
2000dd32:	0c9b      	lsrs	r3, r3, #18
2000dd34:	4a1f      	ldr	r2, [pc, #124]	; (2000ddb4 <SDK_TRACE_Print+0xa4>)
2000dd36:	6812      	ldr	r2, [r2, #0]
2000dd38:	6851      	ldr	r1, [r2, #4]
2000dd3a:	4a1f      	ldr	r2, [pc, #124]	; (2000ddb8 <SDK_TRACE_Print+0xa8>)
2000dd3c:	6812      	ldr	r2, [r2, #0]
2000dd3e:	440a      	add	r2, r1
2000dd40:	fbb4 f3f3 	udiv	r3, r4, r3
2000dd44:	6013      	str	r3, [r2, #0]
	TI->printlog_size+=4;
2000dd46:	4b1b      	ldr	r3, [pc, #108]	; (2000ddb4 <SDK_TRACE_Print+0xa4>)
2000dd48:	681b      	ldr	r3, [r3, #0]
2000dd4a:	685a      	ldr	r2, [r3, #4]
2000dd4c:	4b19      	ldr	r3, [pc, #100]	; (2000ddb4 <SDK_TRACE_Print+0xa4>)
2000dd4e:	681b      	ldr	r3, [r3, #0]
2000dd50:	3204      	adds	r2, #4
2000dd52:	605a      	str	r2, [r3, #4]

	*(__IO uint8_t *)(Print_Write_Address+TI->printlog_size) = len;
2000dd54:	4b17      	ldr	r3, [pc, #92]	; (2000ddb4 <SDK_TRACE_Print+0xa4>)
2000dd56:	681b      	ldr	r3, [r3, #0]
2000dd58:	685a      	ldr	r2, [r3, #4]
2000dd5a:	4b17      	ldr	r3, [pc, #92]	; (2000ddb8 <SDK_TRACE_Print+0xa8>)
2000dd5c:	681b      	ldr	r3, [r3, #0]
2000dd5e:	4413      	add	r3, r2
2000dd60:	461a      	mov	r2, r3
2000dd62:	7afb      	ldrb	r3, [r7, #11]
2000dd64:	7013      	strb	r3, [r2, #0]
	TI->printlog_size++;
2000dd66:	4b13      	ldr	r3, [pc, #76]	; (2000ddb4 <SDK_TRACE_Print+0xa4>)
2000dd68:	681b      	ldr	r3, [r3, #0]
2000dd6a:	685a      	ldr	r2, [r3, #4]
2000dd6c:	3201      	adds	r2, #1
2000dd6e:	605a      	str	r2, [r3, #4]

	for (int i = 0; i < len; i++)
2000dd70:	2300      	movs	r3, #0
2000dd72:	60fb      	str	r3, [r7, #12]
2000dd74:	e012      	b.n	2000dd9c <SDK_TRACE_Print+0x8c>
	{
		*(__IO uint8_t *)(Print_Write_Address+TI->printlog_size) = data[i];
2000dd76:	68fb      	ldr	r3, [r7, #12]
2000dd78:	687a      	ldr	r2, [r7, #4]
2000dd7a:	4413      	add	r3, r2
2000dd7c:	4a0d      	ldr	r2, [pc, #52]	; (2000ddb4 <SDK_TRACE_Print+0xa4>)
2000dd7e:	6812      	ldr	r2, [r2, #0]
2000dd80:	6851      	ldr	r1, [r2, #4]
2000dd82:	4a0d      	ldr	r2, [pc, #52]	; (2000ddb8 <SDK_TRACE_Print+0xa8>)
2000dd84:	6812      	ldr	r2, [r2, #0]
2000dd86:	440a      	add	r2, r1
2000dd88:	781b      	ldrb	r3, [r3, #0]
2000dd8a:	7013      	strb	r3, [r2, #0]
		TI->printlog_size++;
2000dd8c:	4b09      	ldr	r3, [pc, #36]	; (2000ddb4 <SDK_TRACE_Print+0xa4>)
2000dd8e:	681b      	ldr	r3, [r3, #0]
2000dd90:	685a      	ldr	r2, [r3, #4]
2000dd92:	3201      	adds	r2, #1
2000dd94:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < len; i++)
2000dd96:	68fb      	ldr	r3, [r7, #12]
2000dd98:	3301      	adds	r3, #1
2000dd9a:	60fb      	str	r3, [r7, #12]
2000dd9c:	7afb      	ldrb	r3, [r7, #11]
2000dd9e:	68fa      	ldr	r2, [r7, #12]
2000dda0:	429a      	cmp	r2, r3
2000dda2:	dbe8      	blt.n	2000dd76 <SDK_TRACE_Print+0x66>
	}
}
2000dda4:	bf00      	nop
2000dda6:	3714      	adds	r7, #20
2000dda8:	46bd      	mov	sp, r7
2000ddaa:	bd90      	pop	{r4, r7, pc}
2000ddac:	e0001004 	.word	0xe0001004
2000ddb0:	431bde83 	.word	0x431bde83
2000ddb4:	2001025c 	.word	0x2001025c
2000ddb8:	20010268 	.word	0x20010268

2000ddbc <Reset_Handler>:
2000ddbc:	f8df d034 	ldr.w	sp, [pc, #52]	; 2000ddf4 <LoopFillZerobss+0x14>
2000ddc0:	2100      	movs	r1, #0
2000ddc2:	e003      	b.n	2000ddcc <LoopCopyDataInit>

2000ddc4 <CopyDataInit>:
2000ddc4:	4b0c      	ldr	r3, [pc, #48]	; (2000ddf8 <LoopFillZerobss+0x18>)
2000ddc6:	585b      	ldr	r3, [r3, r1]
2000ddc8:	5043      	str	r3, [r0, r1]
2000ddca:	3104      	adds	r1, #4

2000ddcc <LoopCopyDataInit>:
2000ddcc:	480b      	ldr	r0, [pc, #44]	; (2000ddfc <LoopFillZerobss+0x1c>)
2000ddce:	4b0c      	ldr	r3, [pc, #48]	; (2000de00 <LoopFillZerobss+0x20>)
2000ddd0:	1842      	adds	r2, r0, r1
2000ddd2:	429a      	cmp	r2, r3
2000ddd4:	d3f6      	bcc.n	2000ddc4 <CopyDataInit>
2000ddd6:	4a0b      	ldr	r2, [pc, #44]	; (2000de04 <LoopFillZerobss+0x24>)
2000ddd8:	e002      	b.n	2000dde0 <LoopFillZerobss>

2000ddda <FillZerobss>:
2000ddda:	2300      	movs	r3, #0
2000dddc:	f842 3b04 	str.w	r3, [r2], #4

2000dde0 <LoopFillZerobss>:
2000dde0:	4b09      	ldr	r3, [pc, #36]	; (2000de08 <LoopFillZerobss+0x28>)
2000dde2:	429a      	cmp	r2, r3
2000dde4:	d3f9      	bcc.n	2000ddda <FillZerobss>
2000dde6:	f7ff fed1 	bl	2000db8c <SystemInit>
2000ddea:	f001 fba5 	bl	2000f538 <__libc_init_array>
2000ddee:	f7ff fcab 	bl	2000d748 <main>
2000ddf2:	4770      	bx	lr
2000ddf4:	20020000 	.word	0x20020000
2000ddf8:	20010258 	.word	0x20010258
2000ddfc:	20010258 	.word	0x20010258
2000de00:	200102d8 	.word	0x200102d8
2000de04:	200102d8 	.word	0x200102d8
2000de08:	20010338 	.word	0x20010338

2000de0c <ADC_IRQHandler>:
2000de0c:	e7fe      	b.n	2000de0c <ADC_IRQHandler>
	...

2000de10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
2000de10:	b580      	push	{r7, lr}
2000de12:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
2000de14:	4b0e      	ldr	r3, [pc, #56]	; (2000de50 <HAL_Init+0x40>)
2000de16:	681b      	ldr	r3, [r3, #0]
2000de18:	4a0d      	ldr	r2, [pc, #52]	; (2000de50 <HAL_Init+0x40>)
2000de1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
2000de1e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
2000de20:	4b0b      	ldr	r3, [pc, #44]	; (2000de50 <HAL_Init+0x40>)
2000de22:	681b      	ldr	r3, [r3, #0]
2000de24:	4a0a      	ldr	r2, [pc, #40]	; (2000de50 <HAL_Init+0x40>)
2000de26:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
2000de2a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
2000de2c:	4b08      	ldr	r3, [pc, #32]	; (2000de50 <HAL_Init+0x40>)
2000de2e:	681b      	ldr	r3, [r3, #0]
2000de30:	4a07      	ldr	r2, [pc, #28]	; (2000de50 <HAL_Init+0x40>)
2000de32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
2000de36:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
2000de38:	2003      	movs	r0, #3
2000de3a:	f000 f92f 	bl	2000e09c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
2000de3e:	2000      	movs	r0, #0
2000de40:	f000 f808 	bl	2000de54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
2000de44:	f7ff fe16 	bl	2000da74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
2000de48:	2300      	movs	r3, #0
}
2000de4a:	4618      	mov	r0, r3
2000de4c:	bd80      	pop	{r7, pc}
2000de4e:	bf00      	nop
2000de50:	40023c00 	.word	0x40023c00

2000de54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
2000de54:	b580      	push	{r7, lr}
2000de56:	b082      	sub	sp, #8
2000de58:	af00      	add	r7, sp, #0
2000de5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
2000de5c:	4b12      	ldr	r3, [pc, #72]	; (2000dea8 <HAL_InitTick+0x54>)
2000de5e:	681a      	ldr	r2, [r3, #0]
2000de60:	4b12      	ldr	r3, [pc, #72]	; (2000deac <HAL_InitTick+0x58>)
2000de62:	781b      	ldrb	r3, [r3, #0]
2000de64:	4619      	mov	r1, r3
2000de66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
2000de6a:	fbb3 f3f1 	udiv	r3, r3, r1
2000de6e:	fbb2 f3f3 	udiv	r3, r2, r3
2000de72:	4618      	mov	r0, r3
2000de74:	f000 f939 	bl	2000e0ea <HAL_SYSTICK_Config>
2000de78:	4603      	mov	r3, r0
2000de7a:	2b00      	cmp	r3, #0
2000de7c:	d001      	beq.n	2000de82 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
2000de7e:	2301      	movs	r3, #1
2000de80:	e00e      	b.n	2000dea0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
2000de82:	687b      	ldr	r3, [r7, #4]
2000de84:	2b0f      	cmp	r3, #15
2000de86:	d80a      	bhi.n	2000de9e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
2000de88:	2200      	movs	r2, #0
2000de8a:	6879      	ldr	r1, [r7, #4]
2000de8c:	f04f 30ff 	mov.w	r0, #4294967295
2000de90:	f000 f90f 	bl	2000e0b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
2000de94:	4a06      	ldr	r2, [pc, #24]	; (2000deb0 <HAL_InitTick+0x5c>)
2000de96:	687b      	ldr	r3, [r7, #4]
2000de98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
2000de9a:	2300      	movs	r3, #0
2000de9c:	e000      	b.n	2000dea0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
2000de9e:	2301      	movs	r3, #1
}
2000dea0:	4618      	mov	r0, r3
2000dea2:	3708      	adds	r7, #8
2000dea4:	46bd      	mov	sp, r7
2000dea6:	bd80      	pop	{r7, pc}
2000dea8:	20010258 	.word	0x20010258
2000deac:	20010270 	.word	0x20010270
2000deb0:	2001026c 	.word	0x2001026c

2000deb4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
2000deb4:	b480      	push	{r7}
2000deb6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
2000deb8:	4b06      	ldr	r3, [pc, #24]	; (2000ded4 <HAL_IncTick+0x20>)
2000deba:	781b      	ldrb	r3, [r3, #0]
2000debc:	461a      	mov	r2, r3
2000debe:	4b06      	ldr	r3, [pc, #24]	; (2000ded8 <HAL_IncTick+0x24>)
2000dec0:	681b      	ldr	r3, [r3, #0]
2000dec2:	4413      	add	r3, r2
2000dec4:	4a04      	ldr	r2, [pc, #16]	; (2000ded8 <HAL_IncTick+0x24>)
2000dec6:	6013      	str	r3, [r2, #0]
}
2000dec8:	bf00      	nop
2000deca:	46bd      	mov	sp, r7
2000decc:	f85d 7b04 	ldr.w	r7, [sp], #4
2000ded0:	4770      	bx	lr
2000ded2:	bf00      	nop
2000ded4:	20010270 	.word	0x20010270
2000ded8:	20010330 	.word	0x20010330

2000dedc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
2000dedc:	b480      	push	{r7}
2000dede:	af00      	add	r7, sp, #0
  return uwTick;
2000dee0:	4b03      	ldr	r3, [pc, #12]	; (2000def0 <HAL_GetTick+0x14>)
2000dee2:	681b      	ldr	r3, [r3, #0]
}
2000dee4:	4618      	mov	r0, r3
2000dee6:	46bd      	mov	sp, r7
2000dee8:	f85d 7b04 	ldr.w	r7, [sp], #4
2000deec:	4770      	bx	lr
2000deee:	bf00      	nop
2000def0:	20010330 	.word	0x20010330

2000def4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
2000def4:	b580      	push	{r7, lr}
2000def6:	b084      	sub	sp, #16
2000def8:	af00      	add	r7, sp, #0
2000defa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
2000defc:	f7ff ffee 	bl	2000dedc <HAL_GetTick>
2000df00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
2000df02:	687b      	ldr	r3, [r7, #4]
2000df04:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
2000df06:	68fb      	ldr	r3, [r7, #12]
2000df08:	f1b3 3fff 	cmp.w	r3, #4294967295
2000df0c:	d005      	beq.n	2000df1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
2000df0e:	4b09      	ldr	r3, [pc, #36]	; (2000df34 <HAL_Delay+0x40>)
2000df10:	781b      	ldrb	r3, [r3, #0]
2000df12:	461a      	mov	r2, r3
2000df14:	68fb      	ldr	r3, [r7, #12]
2000df16:	4413      	add	r3, r2
2000df18:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
2000df1a:	bf00      	nop
2000df1c:	f7ff ffde 	bl	2000dedc <HAL_GetTick>
2000df20:	4602      	mov	r2, r0
2000df22:	68bb      	ldr	r3, [r7, #8]
2000df24:	1ad3      	subs	r3, r2, r3
2000df26:	68fa      	ldr	r2, [r7, #12]
2000df28:	429a      	cmp	r2, r3
2000df2a:	d8f7      	bhi.n	2000df1c <HAL_Delay+0x28>
  {
  }
}
2000df2c:	bf00      	nop
2000df2e:	3710      	adds	r7, #16
2000df30:	46bd      	mov	sp, r7
2000df32:	bd80      	pop	{r7, pc}
2000df34:	20010270 	.word	0x20010270

2000df38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
2000df38:	b480      	push	{r7}
2000df3a:	b085      	sub	sp, #20
2000df3c:	af00      	add	r7, sp, #0
2000df3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
2000df40:	687b      	ldr	r3, [r7, #4]
2000df42:	f003 0307 	and.w	r3, r3, #7
2000df46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
2000df48:	4b0c      	ldr	r3, [pc, #48]	; (2000df7c <__NVIC_SetPriorityGrouping+0x44>)
2000df4a:	68db      	ldr	r3, [r3, #12]
2000df4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
2000df4e:	68ba      	ldr	r2, [r7, #8]
2000df50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
2000df54:	4013      	ands	r3, r2
2000df56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
2000df58:	68fb      	ldr	r3, [r7, #12]
2000df5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
2000df5c:	68bb      	ldr	r3, [r7, #8]
2000df5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
2000df60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
2000df64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
2000df68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
2000df6a:	4a04      	ldr	r2, [pc, #16]	; (2000df7c <__NVIC_SetPriorityGrouping+0x44>)
2000df6c:	68bb      	ldr	r3, [r7, #8]
2000df6e:	60d3      	str	r3, [r2, #12]
}
2000df70:	bf00      	nop
2000df72:	3714      	adds	r7, #20
2000df74:	46bd      	mov	sp, r7
2000df76:	f85d 7b04 	ldr.w	r7, [sp], #4
2000df7a:	4770      	bx	lr
2000df7c:	e000ed00 	.word	0xe000ed00

2000df80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
2000df80:	b480      	push	{r7}
2000df82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
2000df84:	4b04      	ldr	r3, [pc, #16]	; (2000df98 <__NVIC_GetPriorityGrouping+0x18>)
2000df86:	68db      	ldr	r3, [r3, #12]
2000df88:	0a1b      	lsrs	r3, r3, #8
2000df8a:	f003 0307 	and.w	r3, r3, #7
}
2000df8e:	4618      	mov	r0, r3
2000df90:	46bd      	mov	sp, r7
2000df92:	f85d 7b04 	ldr.w	r7, [sp], #4
2000df96:	4770      	bx	lr
2000df98:	e000ed00 	.word	0xe000ed00

2000df9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
2000df9c:	b480      	push	{r7}
2000df9e:	b083      	sub	sp, #12
2000dfa0:	af00      	add	r7, sp, #0
2000dfa2:	4603      	mov	r3, r0
2000dfa4:	6039      	str	r1, [r7, #0]
2000dfa6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
2000dfa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
2000dfac:	2b00      	cmp	r3, #0
2000dfae:	db0a      	blt.n	2000dfc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
2000dfb0:	683b      	ldr	r3, [r7, #0]
2000dfb2:	b2da      	uxtb	r2, r3
2000dfb4:	490c      	ldr	r1, [pc, #48]	; (2000dfe8 <__NVIC_SetPriority+0x4c>)
2000dfb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
2000dfba:	0112      	lsls	r2, r2, #4
2000dfbc:	b2d2      	uxtb	r2, r2
2000dfbe:	440b      	add	r3, r1
2000dfc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
2000dfc4:	e00a      	b.n	2000dfdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
2000dfc6:	683b      	ldr	r3, [r7, #0]
2000dfc8:	b2da      	uxtb	r2, r3
2000dfca:	4908      	ldr	r1, [pc, #32]	; (2000dfec <__NVIC_SetPriority+0x50>)
2000dfcc:	79fb      	ldrb	r3, [r7, #7]
2000dfce:	f003 030f 	and.w	r3, r3, #15
2000dfd2:	3b04      	subs	r3, #4
2000dfd4:	0112      	lsls	r2, r2, #4
2000dfd6:	b2d2      	uxtb	r2, r2
2000dfd8:	440b      	add	r3, r1
2000dfda:	761a      	strb	r2, [r3, #24]
}
2000dfdc:	bf00      	nop
2000dfde:	370c      	adds	r7, #12
2000dfe0:	46bd      	mov	sp, r7
2000dfe2:	f85d 7b04 	ldr.w	r7, [sp], #4
2000dfe6:	4770      	bx	lr
2000dfe8:	e000e100 	.word	0xe000e100
2000dfec:	e000ed00 	.word	0xe000ed00

2000dff0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
2000dff0:	b480      	push	{r7}
2000dff2:	b089      	sub	sp, #36	; 0x24
2000dff4:	af00      	add	r7, sp, #0
2000dff6:	60f8      	str	r0, [r7, #12]
2000dff8:	60b9      	str	r1, [r7, #8]
2000dffa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
2000dffc:	68fb      	ldr	r3, [r7, #12]
2000dffe:	f003 0307 	and.w	r3, r3, #7
2000e002:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
2000e004:	69fb      	ldr	r3, [r7, #28]
2000e006:	f1c3 0307 	rsb	r3, r3, #7
2000e00a:	2b04      	cmp	r3, #4
2000e00c:	bf28      	it	cs
2000e00e:	2304      	movcs	r3, #4
2000e010:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
2000e012:	69fb      	ldr	r3, [r7, #28]
2000e014:	3304      	adds	r3, #4
2000e016:	2b06      	cmp	r3, #6
2000e018:	d902      	bls.n	2000e020 <NVIC_EncodePriority+0x30>
2000e01a:	69fb      	ldr	r3, [r7, #28]
2000e01c:	3b03      	subs	r3, #3
2000e01e:	e000      	b.n	2000e022 <NVIC_EncodePriority+0x32>
2000e020:	2300      	movs	r3, #0
2000e022:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
2000e024:	f04f 32ff 	mov.w	r2, #4294967295
2000e028:	69bb      	ldr	r3, [r7, #24]
2000e02a:	fa02 f303 	lsl.w	r3, r2, r3
2000e02e:	43da      	mvns	r2, r3
2000e030:	68bb      	ldr	r3, [r7, #8]
2000e032:	401a      	ands	r2, r3
2000e034:	697b      	ldr	r3, [r7, #20]
2000e036:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
2000e038:	f04f 31ff 	mov.w	r1, #4294967295
2000e03c:	697b      	ldr	r3, [r7, #20]
2000e03e:	fa01 f303 	lsl.w	r3, r1, r3
2000e042:	43d9      	mvns	r1, r3
2000e044:	687b      	ldr	r3, [r7, #4]
2000e046:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
2000e048:	4313      	orrs	r3, r2
         );
}
2000e04a:	4618      	mov	r0, r3
2000e04c:	3724      	adds	r7, #36	; 0x24
2000e04e:	46bd      	mov	sp, r7
2000e050:	f85d 7b04 	ldr.w	r7, [sp], #4
2000e054:	4770      	bx	lr
	...

2000e058 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
2000e058:	b580      	push	{r7, lr}
2000e05a:	b082      	sub	sp, #8
2000e05c:	af00      	add	r7, sp, #0
2000e05e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
2000e060:	687b      	ldr	r3, [r7, #4]
2000e062:	3b01      	subs	r3, #1
2000e064:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
2000e068:	d301      	bcc.n	2000e06e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
2000e06a:	2301      	movs	r3, #1
2000e06c:	e00f      	b.n	2000e08e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
2000e06e:	4a0a      	ldr	r2, [pc, #40]	; (2000e098 <SysTick_Config+0x40>)
2000e070:	687b      	ldr	r3, [r7, #4]
2000e072:	3b01      	subs	r3, #1
2000e074:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
2000e076:	210f      	movs	r1, #15
2000e078:	f04f 30ff 	mov.w	r0, #4294967295
2000e07c:	f7ff ff8e 	bl	2000df9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
2000e080:	4b05      	ldr	r3, [pc, #20]	; (2000e098 <SysTick_Config+0x40>)
2000e082:	2200      	movs	r2, #0
2000e084:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
2000e086:	4b04      	ldr	r3, [pc, #16]	; (2000e098 <SysTick_Config+0x40>)
2000e088:	2207      	movs	r2, #7
2000e08a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
2000e08c:	2300      	movs	r3, #0
}
2000e08e:	4618      	mov	r0, r3
2000e090:	3708      	adds	r7, #8
2000e092:	46bd      	mov	sp, r7
2000e094:	bd80      	pop	{r7, pc}
2000e096:	bf00      	nop
2000e098:	e000e010 	.word	0xe000e010

2000e09c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
2000e09c:	b580      	push	{r7, lr}
2000e09e:	b082      	sub	sp, #8
2000e0a0:	af00      	add	r7, sp, #0
2000e0a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
2000e0a4:	6878      	ldr	r0, [r7, #4]
2000e0a6:	f7ff ff47 	bl	2000df38 <__NVIC_SetPriorityGrouping>
}
2000e0aa:	bf00      	nop
2000e0ac:	3708      	adds	r7, #8
2000e0ae:	46bd      	mov	sp, r7
2000e0b0:	bd80      	pop	{r7, pc}

2000e0b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
2000e0b2:	b580      	push	{r7, lr}
2000e0b4:	b086      	sub	sp, #24
2000e0b6:	af00      	add	r7, sp, #0
2000e0b8:	4603      	mov	r3, r0
2000e0ba:	60b9      	str	r1, [r7, #8]
2000e0bc:	607a      	str	r2, [r7, #4]
2000e0be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
2000e0c0:	2300      	movs	r3, #0
2000e0c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
2000e0c4:	f7ff ff5c 	bl	2000df80 <__NVIC_GetPriorityGrouping>
2000e0c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
2000e0ca:	687a      	ldr	r2, [r7, #4]
2000e0cc:	68b9      	ldr	r1, [r7, #8]
2000e0ce:	6978      	ldr	r0, [r7, #20]
2000e0d0:	f7ff ff8e 	bl	2000dff0 <NVIC_EncodePriority>
2000e0d4:	4602      	mov	r2, r0
2000e0d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
2000e0da:	4611      	mov	r1, r2
2000e0dc:	4618      	mov	r0, r3
2000e0de:	f7ff ff5d 	bl	2000df9c <__NVIC_SetPriority>
}
2000e0e2:	bf00      	nop
2000e0e4:	3718      	adds	r7, #24
2000e0e6:	46bd      	mov	sp, r7
2000e0e8:	bd80      	pop	{r7, pc}

2000e0ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
2000e0ea:	b580      	push	{r7, lr}
2000e0ec:	b082      	sub	sp, #8
2000e0ee:	af00      	add	r7, sp, #0
2000e0f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
2000e0f2:	6878      	ldr	r0, [r7, #4]
2000e0f4:	f7ff ffb0 	bl	2000e058 <SysTick_Config>
2000e0f8:	4603      	mov	r3, r0
}
2000e0fa:	4618      	mov	r0, r3
2000e0fc:	3708      	adds	r7, #8
2000e0fe:	46bd      	mov	sp, r7
2000e100:	bd80      	pop	{r7, pc}
	...

2000e104 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
2000e104:	b480      	push	{r7}
2000e106:	b089      	sub	sp, #36	; 0x24
2000e108:	af00      	add	r7, sp, #0
2000e10a:	6078      	str	r0, [r7, #4]
2000e10c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
2000e10e:	2300      	movs	r3, #0
2000e110:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
2000e112:	2300      	movs	r3, #0
2000e114:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
2000e116:	2300      	movs	r3, #0
2000e118:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
2000e11a:	2300      	movs	r3, #0
2000e11c:	61fb      	str	r3, [r7, #28]
2000e11e:	e16b      	b.n	2000e3f8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
2000e120:	2201      	movs	r2, #1
2000e122:	69fb      	ldr	r3, [r7, #28]
2000e124:	fa02 f303 	lsl.w	r3, r2, r3
2000e128:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
2000e12a:	683b      	ldr	r3, [r7, #0]
2000e12c:	681b      	ldr	r3, [r3, #0]
2000e12e:	697a      	ldr	r2, [r7, #20]
2000e130:	4013      	ands	r3, r2
2000e132:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
2000e134:	693a      	ldr	r2, [r7, #16]
2000e136:	697b      	ldr	r3, [r7, #20]
2000e138:	429a      	cmp	r2, r3
2000e13a:	f040 815a 	bne.w	2000e3f2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
2000e13e:	683b      	ldr	r3, [r7, #0]
2000e140:	685b      	ldr	r3, [r3, #4]
2000e142:	2b01      	cmp	r3, #1
2000e144:	d00b      	beq.n	2000e15e <HAL_GPIO_Init+0x5a>
2000e146:	683b      	ldr	r3, [r7, #0]
2000e148:	685b      	ldr	r3, [r3, #4]
2000e14a:	2b02      	cmp	r3, #2
2000e14c:	d007      	beq.n	2000e15e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
2000e14e:	683b      	ldr	r3, [r7, #0]
2000e150:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
2000e152:	2b11      	cmp	r3, #17
2000e154:	d003      	beq.n	2000e15e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
2000e156:	683b      	ldr	r3, [r7, #0]
2000e158:	685b      	ldr	r3, [r3, #4]
2000e15a:	2b12      	cmp	r3, #18
2000e15c:	d130      	bne.n	2000e1c0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
2000e15e:	687b      	ldr	r3, [r7, #4]
2000e160:	689b      	ldr	r3, [r3, #8]
2000e162:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
2000e164:	69fb      	ldr	r3, [r7, #28]
2000e166:	005b      	lsls	r3, r3, #1
2000e168:	2203      	movs	r2, #3
2000e16a:	fa02 f303 	lsl.w	r3, r2, r3
2000e16e:	43db      	mvns	r3, r3
2000e170:	69ba      	ldr	r2, [r7, #24]
2000e172:	4013      	ands	r3, r2
2000e174:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
2000e176:	683b      	ldr	r3, [r7, #0]
2000e178:	68da      	ldr	r2, [r3, #12]
2000e17a:	69fb      	ldr	r3, [r7, #28]
2000e17c:	005b      	lsls	r3, r3, #1
2000e17e:	fa02 f303 	lsl.w	r3, r2, r3
2000e182:	69ba      	ldr	r2, [r7, #24]
2000e184:	4313      	orrs	r3, r2
2000e186:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
2000e188:	687b      	ldr	r3, [r7, #4]
2000e18a:	69ba      	ldr	r2, [r7, #24]
2000e18c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
2000e18e:	687b      	ldr	r3, [r7, #4]
2000e190:	685b      	ldr	r3, [r3, #4]
2000e192:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
2000e194:	2201      	movs	r2, #1
2000e196:	69fb      	ldr	r3, [r7, #28]
2000e198:	fa02 f303 	lsl.w	r3, r2, r3
2000e19c:	43db      	mvns	r3, r3
2000e19e:	69ba      	ldr	r2, [r7, #24]
2000e1a0:	4013      	ands	r3, r2
2000e1a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
2000e1a4:	683b      	ldr	r3, [r7, #0]
2000e1a6:	685b      	ldr	r3, [r3, #4]
2000e1a8:	091b      	lsrs	r3, r3, #4
2000e1aa:	f003 0201 	and.w	r2, r3, #1
2000e1ae:	69fb      	ldr	r3, [r7, #28]
2000e1b0:	fa02 f303 	lsl.w	r3, r2, r3
2000e1b4:	69ba      	ldr	r2, [r7, #24]
2000e1b6:	4313      	orrs	r3, r2
2000e1b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
2000e1ba:	687b      	ldr	r3, [r7, #4]
2000e1bc:	69ba      	ldr	r2, [r7, #24]
2000e1be:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
2000e1c0:	687b      	ldr	r3, [r7, #4]
2000e1c2:	68db      	ldr	r3, [r3, #12]
2000e1c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
2000e1c6:	69fb      	ldr	r3, [r7, #28]
2000e1c8:	005b      	lsls	r3, r3, #1
2000e1ca:	2203      	movs	r2, #3
2000e1cc:	fa02 f303 	lsl.w	r3, r2, r3
2000e1d0:	43db      	mvns	r3, r3
2000e1d2:	69ba      	ldr	r2, [r7, #24]
2000e1d4:	4013      	ands	r3, r2
2000e1d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
2000e1d8:	683b      	ldr	r3, [r7, #0]
2000e1da:	689a      	ldr	r2, [r3, #8]
2000e1dc:	69fb      	ldr	r3, [r7, #28]
2000e1de:	005b      	lsls	r3, r3, #1
2000e1e0:	fa02 f303 	lsl.w	r3, r2, r3
2000e1e4:	69ba      	ldr	r2, [r7, #24]
2000e1e6:	4313      	orrs	r3, r2
2000e1e8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
2000e1ea:	687b      	ldr	r3, [r7, #4]
2000e1ec:	69ba      	ldr	r2, [r7, #24]
2000e1ee:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
2000e1f0:	683b      	ldr	r3, [r7, #0]
2000e1f2:	685b      	ldr	r3, [r3, #4]
2000e1f4:	2b02      	cmp	r3, #2
2000e1f6:	d003      	beq.n	2000e200 <HAL_GPIO_Init+0xfc>
2000e1f8:	683b      	ldr	r3, [r7, #0]
2000e1fa:	685b      	ldr	r3, [r3, #4]
2000e1fc:	2b12      	cmp	r3, #18
2000e1fe:	d123      	bne.n	2000e248 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
2000e200:	69fb      	ldr	r3, [r7, #28]
2000e202:	08da      	lsrs	r2, r3, #3
2000e204:	687b      	ldr	r3, [r7, #4]
2000e206:	3208      	adds	r2, #8
2000e208:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
2000e20c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
2000e20e:	69fb      	ldr	r3, [r7, #28]
2000e210:	f003 0307 	and.w	r3, r3, #7
2000e214:	009b      	lsls	r3, r3, #2
2000e216:	220f      	movs	r2, #15
2000e218:	fa02 f303 	lsl.w	r3, r2, r3
2000e21c:	43db      	mvns	r3, r3
2000e21e:	69ba      	ldr	r2, [r7, #24]
2000e220:	4013      	ands	r3, r2
2000e222:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
2000e224:	683b      	ldr	r3, [r7, #0]
2000e226:	691a      	ldr	r2, [r3, #16]
2000e228:	69fb      	ldr	r3, [r7, #28]
2000e22a:	f003 0307 	and.w	r3, r3, #7
2000e22e:	009b      	lsls	r3, r3, #2
2000e230:	fa02 f303 	lsl.w	r3, r2, r3
2000e234:	69ba      	ldr	r2, [r7, #24]
2000e236:	4313      	orrs	r3, r2
2000e238:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
2000e23a:	69fb      	ldr	r3, [r7, #28]
2000e23c:	08da      	lsrs	r2, r3, #3
2000e23e:	687b      	ldr	r3, [r7, #4]
2000e240:	3208      	adds	r2, #8
2000e242:	69b9      	ldr	r1, [r7, #24]
2000e244:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
2000e248:	687b      	ldr	r3, [r7, #4]
2000e24a:	681b      	ldr	r3, [r3, #0]
2000e24c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
2000e24e:	69fb      	ldr	r3, [r7, #28]
2000e250:	005b      	lsls	r3, r3, #1
2000e252:	2203      	movs	r2, #3
2000e254:	fa02 f303 	lsl.w	r3, r2, r3
2000e258:	43db      	mvns	r3, r3
2000e25a:	69ba      	ldr	r2, [r7, #24]
2000e25c:	4013      	ands	r3, r2
2000e25e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
2000e260:	683b      	ldr	r3, [r7, #0]
2000e262:	685b      	ldr	r3, [r3, #4]
2000e264:	f003 0203 	and.w	r2, r3, #3
2000e268:	69fb      	ldr	r3, [r7, #28]
2000e26a:	005b      	lsls	r3, r3, #1
2000e26c:	fa02 f303 	lsl.w	r3, r2, r3
2000e270:	69ba      	ldr	r2, [r7, #24]
2000e272:	4313      	orrs	r3, r2
2000e274:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
2000e276:	687b      	ldr	r3, [r7, #4]
2000e278:	69ba      	ldr	r2, [r7, #24]
2000e27a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
2000e27c:	683b      	ldr	r3, [r7, #0]
2000e27e:	685b      	ldr	r3, [r3, #4]
2000e280:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
2000e284:	2b00      	cmp	r3, #0
2000e286:	f000 80b4 	beq.w	2000e3f2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
2000e28a:	2300      	movs	r3, #0
2000e28c:	60fb      	str	r3, [r7, #12]
2000e28e:	4b5f      	ldr	r3, [pc, #380]	; (2000e40c <HAL_GPIO_Init+0x308>)
2000e290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2000e292:	4a5e      	ldr	r2, [pc, #376]	; (2000e40c <HAL_GPIO_Init+0x308>)
2000e294:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
2000e298:	6453      	str	r3, [r2, #68]	; 0x44
2000e29a:	4b5c      	ldr	r3, [pc, #368]	; (2000e40c <HAL_GPIO_Init+0x308>)
2000e29c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2000e29e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
2000e2a2:	60fb      	str	r3, [r7, #12]
2000e2a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
2000e2a6:	4a5a      	ldr	r2, [pc, #360]	; (2000e410 <HAL_GPIO_Init+0x30c>)
2000e2a8:	69fb      	ldr	r3, [r7, #28]
2000e2aa:	089b      	lsrs	r3, r3, #2
2000e2ac:	3302      	adds	r3, #2
2000e2ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
2000e2b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
2000e2b4:	69fb      	ldr	r3, [r7, #28]
2000e2b6:	f003 0303 	and.w	r3, r3, #3
2000e2ba:	009b      	lsls	r3, r3, #2
2000e2bc:	220f      	movs	r2, #15
2000e2be:	fa02 f303 	lsl.w	r3, r2, r3
2000e2c2:	43db      	mvns	r3, r3
2000e2c4:	69ba      	ldr	r2, [r7, #24]
2000e2c6:	4013      	ands	r3, r2
2000e2c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
2000e2ca:	687b      	ldr	r3, [r7, #4]
2000e2cc:	4a51      	ldr	r2, [pc, #324]	; (2000e414 <HAL_GPIO_Init+0x310>)
2000e2ce:	4293      	cmp	r3, r2
2000e2d0:	d02b      	beq.n	2000e32a <HAL_GPIO_Init+0x226>
2000e2d2:	687b      	ldr	r3, [r7, #4]
2000e2d4:	4a50      	ldr	r2, [pc, #320]	; (2000e418 <HAL_GPIO_Init+0x314>)
2000e2d6:	4293      	cmp	r3, r2
2000e2d8:	d025      	beq.n	2000e326 <HAL_GPIO_Init+0x222>
2000e2da:	687b      	ldr	r3, [r7, #4]
2000e2dc:	4a4f      	ldr	r2, [pc, #316]	; (2000e41c <HAL_GPIO_Init+0x318>)
2000e2de:	4293      	cmp	r3, r2
2000e2e0:	d01f      	beq.n	2000e322 <HAL_GPIO_Init+0x21e>
2000e2e2:	687b      	ldr	r3, [r7, #4]
2000e2e4:	4a4e      	ldr	r2, [pc, #312]	; (2000e420 <HAL_GPIO_Init+0x31c>)
2000e2e6:	4293      	cmp	r3, r2
2000e2e8:	d019      	beq.n	2000e31e <HAL_GPIO_Init+0x21a>
2000e2ea:	687b      	ldr	r3, [r7, #4]
2000e2ec:	4a4d      	ldr	r2, [pc, #308]	; (2000e424 <HAL_GPIO_Init+0x320>)
2000e2ee:	4293      	cmp	r3, r2
2000e2f0:	d013      	beq.n	2000e31a <HAL_GPIO_Init+0x216>
2000e2f2:	687b      	ldr	r3, [r7, #4]
2000e2f4:	4a4c      	ldr	r2, [pc, #304]	; (2000e428 <HAL_GPIO_Init+0x324>)
2000e2f6:	4293      	cmp	r3, r2
2000e2f8:	d00d      	beq.n	2000e316 <HAL_GPIO_Init+0x212>
2000e2fa:	687b      	ldr	r3, [r7, #4]
2000e2fc:	4a4b      	ldr	r2, [pc, #300]	; (2000e42c <HAL_GPIO_Init+0x328>)
2000e2fe:	4293      	cmp	r3, r2
2000e300:	d007      	beq.n	2000e312 <HAL_GPIO_Init+0x20e>
2000e302:	687b      	ldr	r3, [r7, #4]
2000e304:	4a4a      	ldr	r2, [pc, #296]	; (2000e430 <HAL_GPIO_Init+0x32c>)
2000e306:	4293      	cmp	r3, r2
2000e308:	d101      	bne.n	2000e30e <HAL_GPIO_Init+0x20a>
2000e30a:	2307      	movs	r3, #7
2000e30c:	e00e      	b.n	2000e32c <HAL_GPIO_Init+0x228>
2000e30e:	2308      	movs	r3, #8
2000e310:	e00c      	b.n	2000e32c <HAL_GPIO_Init+0x228>
2000e312:	2306      	movs	r3, #6
2000e314:	e00a      	b.n	2000e32c <HAL_GPIO_Init+0x228>
2000e316:	2305      	movs	r3, #5
2000e318:	e008      	b.n	2000e32c <HAL_GPIO_Init+0x228>
2000e31a:	2304      	movs	r3, #4
2000e31c:	e006      	b.n	2000e32c <HAL_GPIO_Init+0x228>
2000e31e:	2303      	movs	r3, #3
2000e320:	e004      	b.n	2000e32c <HAL_GPIO_Init+0x228>
2000e322:	2302      	movs	r3, #2
2000e324:	e002      	b.n	2000e32c <HAL_GPIO_Init+0x228>
2000e326:	2301      	movs	r3, #1
2000e328:	e000      	b.n	2000e32c <HAL_GPIO_Init+0x228>
2000e32a:	2300      	movs	r3, #0
2000e32c:	69fa      	ldr	r2, [r7, #28]
2000e32e:	f002 0203 	and.w	r2, r2, #3
2000e332:	0092      	lsls	r2, r2, #2
2000e334:	4093      	lsls	r3, r2
2000e336:	69ba      	ldr	r2, [r7, #24]
2000e338:	4313      	orrs	r3, r2
2000e33a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
2000e33c:	4934      	ldr	r1, [pc, #208]	; (2000e410 <HAL_GPIO_Init+0x30c>)
2000e33e:	69fb      	ldr	r3, [r7, #28]
2000e340:	089b      	lsrs	r3, r3, #2
2000e342:	3302      	adds	r3, #2
2000e344:	69ba      	ldr	r2, [r7, #24]
2000e346:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
2000e34a:	4b3a      	ldr	r3, [pc, #232]	; (2000e434 <HAL_GPIO_Init+0x330>)
2000e34c:	681b      	ldr	r3, [r3, #0]
2000e34e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
2000e350:	693b      	ldr	r3, [r7, #16]
2000e352:	43db      	mvns	r3, r3
2000e354:	69ba      	ldr	r2, [r7, #24]
2000e356:	4013      	ands	r3, r2
2000e358:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
2000e35a:	683b      	ldr	r3, [r7, #0]
2000e35c:	685b      	ldr	r3, [r3, #4]
2000e35e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
2000e362:	2b00      	cmp	r3, #0
2000e364:	d003      	beq.n	2000e36e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
2000e366:	69ba      	ldr	r2, [r7, #24]
2000e368:	693b      	ldr	r3, [r7, #16]
2000e36a:	4313      	orrs	r3, r2
2000e36c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
2000e36e:	4a31      	ldr	r2, [pc, #196]	; (2000e434 <HAL_GPIO_Init+0x330>)
2000e370:	69bb      	ldr	r3, [r7, #24]
2000e372:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
2000e374:	4b2f      	ldr	r3, [pc, #188]	; (2000e434 <HAL_GPIO_Init+0x330>)
2000e376:	685b      	ldr	r3, [r3, #4]
2000e378:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
2000e37a:	693b      	ldr	r3, [r7, #16]
2000e37c:	43db      	mvns	r3, r3
2000e37e:	69ba      	ldr	r2, [r7, #24]
2000e380:	4013      	ands	r3, r2
2000e382:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
2000e384:	683b      	ldr	r3, [r7, #0]
2000e386:	685b      	ldr	r3, [r3, #4]
2000e388:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
2000e38c:	2b00      	cmp	r3, #0
2000e38e:	d003      	beq.n	2000e398 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
2000e390:	69ba      	ldr	r2, [r7, #24]
2000e392:	693b      	ldr	r3, [r7, #16]
2000e394:	4313      	orrs	r3, r2
2000e396:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
2000e398:	4a26      	ldr	r2, [pc, #152]	; (2000e434 <HAL_GPIO_Init+0x330>)
2000e39a:	69bb      	ldr	r3, [r7, #24]
2000e39c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
2000e39e:	4b25      	ldr	r3, [pc, #148]	; (2000e434 <HAL_GPIO_Init+0x330>)
2000e3a0:	689b      	ldr	r3, [r3, #8]
2000e3a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
2000e3a4:	693b      	ldr	r3, [r7, #16]
2000e3a6:	43db      	mvns	r3, r3
2000e3a8:	69ba      	ldr	r2, [r7, #24]
2000e3aa:	4013      	ands	r3, r2
2000e3ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
2000e3ae:	683b      	ldr	r3, [r7, #0]
2000e3b0:	685b      	ldr	r3, [r3, #4]
2000e3b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
2000e3b6:	2b00      	cmp	r3, #0
2000e3b8:	d003      	beq.n	2000e3c2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
2000e3ba:	69ba      	ldr	r2, [r7, #24]
2000e3bc:	693b      	ldr	r3, [r7, #16]
2000e3be:	4313      	orrs	r3, r2
2000e3c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
2000e3c2:	4a1c      	ldr	r2, [pc, #112]	; (2000e434 <HAL_GPIO_Init+0x330>)
2000e3c4:	69bb      	ldr	r3, [r7, #24]
2000e3c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
2000e3c8:	4b1a      	ldr	r3, [pc, #104]	; (2000e434 <HAL_GPIO_Init+0x330>)
2000e3ca:	68db      	ldr	r3, [r3, #12]
2000e3cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
2000e3ce:	693b      	ldr	r3, [r7, #16]
2000e3d0:	43db      	mvns	r3, r3
2000e3d2:	69ba      	ldr	r2, [r7, #24]
2000e3d4:	4013      	ands	r3, r2
2000e3d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
2000e3d8:	683b      	ldr	r3, [r7, #0]
2000e3da:	685b      	ldr	r3, [r3, #4]
2000e3dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
2000e3e0:	2b00      	cmp	r3, #0
2000e3e2:	d003      	beq.n	2000e3ec <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
2000e3e4:	69ba      	ldr	r2, [r7, #24]
2000e3e6:	693b      	ldr	r3, [r7, #16]
2000e3e8:	4313      	orrs	r3, r2
2000e3ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
2000e3ec:	4a11      	ldr	r2, [pc, #68]	; (2000e434 <HAL_GPIO_Init+0x330>)
2000e3ee:	69bb      	ldr	r3, [r7, #24]
2000e3f0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
2000e3f2:	69fb      	ldr	r3, [r7, #28]
2000e3f4:	3301      	adds	r3, #1
2000e3f6:	61fb      	str	r3, [r7, #28]
2000e3f8:	69fb      	ldr	r3, [r7, #28]
2000e3fa:	2b0f      	cmp	r3, #15
2000e3fc:	f67f ae90 	bls.w	2000e120 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
2000e400:	bf00      	nop
2000e402:	3724      	adds	r7, #36	; 0x24
2000e404:	46bd      	mov	sp, r7
2000e406:	f85d 7b04 	ldr.w	r7, [sp], #4
2000e40a:	4770      	bx	lr
2000e40c:	40023800 	.word	0x40023800
2000e410:	40013800 	.word	0x40013800
2000e414:	40020000 	.word	0x40020000
2000e418:	40020400 	.word	0x40020400
2000e41c:	40020800 	.word	0x40020800
2000e420:	40020c00 	.word	0x40020c00
2000e424:	40021000 	.word	0x40021000
2000e428:	40021400 	.word	0x40021400
2000e42c:	40021800 	.word	0x40021800
2000e430:	40021c00 	.word	0x40021c00
2000e434:	40013c00 	.word	0x40013c00

2000e438 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
2000e438:	b480      	push	{r7}
2000e43a:	b083      	sub	sp, #12
2000e43c:	af00      	add	r7, sp, #0
2000e43e:	6078      	str	r0, [r7, #4]
2000e440:	460b      	mov	r3, r1
2000e442:	807b      	strh	r3, [r7, #2]
2000e444:	4613      	mov	r3, r2
2000e446:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
2000e448:	787b      	ldrb	r3, [r7, #1]
2000e44a:	2b00      	cmp	r3, #0
2000e44c:	d003      	beq.n	2000e456 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
2000e44e:	887a      	ldrh	r2, [r7, #2]
2000e450:	687b      	ldr	r3, [r7, #4]
2000e452:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
2000e454:	e003      	b.n	2000e45e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
2000e456:	887b      	ldrh	r3, [r7, #2]
2000e458:	041a      	lsls	r2, r3, #16
2000e45a:	687b      	ldr	r3, [r7, #4]
2000e45c:	619a      	str	r2, [r3, #24]
}
2000e45e:	bf00      	nop
2000e460:	370c      	adds	r7, #12
2000e462:	46bd      	mov	sp, r7
2000e464:	f85d 7b04 	ldr.w	r7, [sp], #4
2000e468:	4770      	bx	lr

2000e46a <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
2000e46a:	b580      	push	{r7, lr}
2000e46c:	b084      	sub	sp, #16
2000e46e:	af00      	add	r7, sp, #0
2000e470:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
2000e472:	687b      	ldr	r3, [r7, #4]
2000e474:	2b00      	cmp	r3, #0
2000e476:	d101      	bne.n	2000e47c <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
2000e478:	2301      	movs	r3, #1
2000e47a:	e02b      	b.n	2000e4d4 <HAL_IWDG_Init+0x6a>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
2000e47c:	687b      	ldr	r3, [r7, #4]
2000e47e:	681b      	ldr	r3, [r3, #0]
2000e480:	f64c 42cc 	movw	r2, #52428	; 0xcccc
2000e484:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
2000e486:	687b      	ldr	r3, [r7, #4]
2000e488:	681b      	ldr	r3, [r3, #0]
2000e48a:	f245 5255 	movw	r2, #21845	; 0x5555
2000e48e:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
2000e490:	687b      	ldr	r3, [r7, #4]
2000e492:	681b      	ldr	r3, [r3, #0]
2000e494:	687a      	ldr	r2, [r7, #4]
2000e496:	6852      	ldr	r2, [r2, #4]
2000e498:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
2000e49a:	687b      	ldr	r3, [r7, #4]
2000e49c:	681b      	ldr	r3, [r3, #0]
2000e49e:	687a      	ldr	r2, [r7, #4]
2000e4a0:	6892      	ldr	r2, [r2, #8]
2000e4a2:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
2000e4a4:	f7ff fd1a 	bl	2000dedc <HAL_GetTick>
2000e4a8:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while (hiwdg->Instance->SR != 0x00u)
2000e4aa:	e008      	b.n	2000e4be <HAL_IWDG_Init+0x54>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
2000e4ac:	f7ff fd16 	bl	2000dedc <HAL_GetTick>
2000e4b0:	4602      	mov	r2, r0
2000e4b2:	68fb      	ldr	r3, [r7, #12]
2000e4b4:	1ad3      	subs	r3, r2, r3
2000e4b6:	2b30      	cmp	r3, #48	; 0x30
2000e4b8:	d901      	bls.n	2000e4be <HAL_IWDG_Init+0x54>
    {
      return HAL_TIMEOUT;
2000e4ba:	2303      	movs	r3, #3
2000e4bc:	e00a      	b.n	2000e4d4 <HAL_IWDG_Init+0x6a>
  while (hiwdg->Instance->SR != 0x00u)
2000e4be:	687b      	ldr	r3, [r7, #4]
2000e4c0:	681b      	ldr	r3, [r3, #0]
2000e4c2:	68db      	ldr	r3, [r3, #12]
2000e4c4:	2b00      	cmp	r3, #0
2000e4c6:	d1f1      	bne.n	2000e4ac <HAL_IWDG_Init+0x42>
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
2000e4c8:	687b      	ldr	r3, [r7, #4]
2000e4ca:	681b      	ldr	r3, [r3, #0]
2000e4cc:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
2000e4d0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
2000e4d2:	2300      	movs	r3, #0
}
2000e4d4:	4618      	mov	r0, r3
2000e4d6:	3710      	adds	r7, #16
2000e4d8:	46bd      	mov	sp, r7
2000e4da:	bd80      	pop	{r7, pc}

2000e4dc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
2000e4dc:	b580      	push	{r7, lr}
2000e4de:	b086      	sub	sp, #24
2000e4e0:	af00      	add	r7, sp, #0
2000e4e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
2000e4e4:	687b      	ldr	r3, [r7, #4]
2000e4e6:	2b00      	cmp	r3, #0
2000e4e8:	d101      	bne.n	2000e4ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
2000e4ea:	2301      	movs	r3, #1
2000e4ec:	e25b      	b.n	2000e9a6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
2000e4ee:	687b      	ldr	r3, [r7, #4]
2000e4f0:	681b      	ldr	r3, [r3, #0]
2000e4f2:	f003 0301 	and.w	r3, r3, #1
2000e4f6:	2b00      	cmp	r3, #0
2000e4f8:	d075      	beq.n	2000e5e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
2000e4fa:	4ba3      	ldr	r3, [pc, #652]	; (2000e788 <HAL_RCC_OscConfig+0x2ac>)
2000e4fc:	689b      	ldr	r3, [r3, #8]
2000e4fe:	f003 030c 	and.w	r3, r3, #12
2000e502:	2b04      	cmp	r3, #4
2000e504:	d00c      	beq.n	2000e520 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
2000e506:	4ba0      	ldr	r3, [pc, #640]	; (2000e788 <HAL_RCC_OscConfig+0x2ac>)
2000e508:	689b      	ldr	r3, [r3, #8]
2000e50a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
2000e50e:	2b08      	cmp	r3, #8
2000e510:	d112      	bne.n	2000e538 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
2000e512:	4b9d      	ldr	r3, [pc, #628]	; (2000e788 <HAL_RCC_OscConfig+0x2ac>)
2000e514:	685b      	ldr	r3, [r3, #4]
2000e516:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
2000e51a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
2000e51e:	d10b      	bne.n	2000e538 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
2000e520:	4b99      	ldr	r3, [pc, #612]	; (2000e788 <HAL_RCC_OscConfig+0x2ac>)
2000e522:	681b      	ldr	r3, [r3, #0]
2000e524:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
2000e528:	2b00      	cmp	r3, #0
2000e52a:	d05b      	beq.n	2000e5e4 <HAL_RCC_OscConfig+0x108>
2000e52c:	687b      	ldr	r3, [r7, #4]
2000e52e:	685b      	ldr	r3, [r3, #4]
2000e530:	2b00      	cmp	r3, #0
2000e532:	d157      	bne.n	2000e5e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
2000e534:	2301      	movs	r3, #1
2000e536:	e236      	b.n	2000e9a6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
2000e538:	687b      	ldr	r3, [r7, #4]
2000e53a:	685b      	ldr	r3, [r3, #4]
2000e53c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
2000e540:	d106      	bne.n	2000e550 <HAL_RCC_OscConfig+0x74>
2000e542:	4b91      	ldr	r3, [pc, #580]	; (2000e788 <HAL_RCC_OscConfig+0x2ac>)
2000e544:	681b      	ldr	r3, [r3, #0]
2000e546:	4a90      	ldr	r2, [pc, #576]	; (2000e788 <HAL_RCC_OscConfig+0x2ac>)
2000e548:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
2000e54c:	6013      	str	r3, [r2, #0]
2000e54e:	e01d      	b.n	2000e58c <HAL_RCC_OscConfig+0xb0>
2000e550:	687b      	ldr	r3, [r7, #4]
2000e552:	685b      	ldr	r3, [r3, #4]
2000e554:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
2000e558:	d10c      	bne.n	2000e574 <HAL_RCC_OscConfig+0x98>
2000e55a:	4b8b      	ldr	r3, [pc, #556]	; (2000e788 <HAL_RCC_OscConfig+0x2ac>)
2000e55c:	681b      	ldr	r3, [r3, #0]
2000e55e:	4a8a      	ldr	r2, [pc, #552]	; (2000e788 <HAL_RCC_OscConfig+0x2ac>)
2000e560:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
2000e564:	6013      	str	r3, [r2, #0]
2000e566:	4b88      	ldr	r3, [pc, #544]	; (2000e788 <HAL_RCC_OscConfig+0x2ac>)
2000e568:	681b      	ldr	r3, [r3, #0]
2000e56a:	4a87      	ldr	r2, [pc, #540]	; (2000e788 <HAL_RCC_OscConfig+0x2ac>)
2000e56c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
2000e570:	6013      	str	r3, [r2, #0]
2000e572:	e00b      	b.n	2000e58c <HAL_RCC_OscConfig+0xb0>
2000e574:	4b84      	ldr	r3, [pc, #528]	; (2000e788 <HAL_RCC_OscConfig+0x2ac>)
2000e576:	681b      	ldr	r3, [r3, #0]
2000e578:	4a83      	ldr	r2, [pc, #524]	; (2000e788 <HAL_RCC_OscConfig+0x2ac>)
2000e57a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
2000e57e:	6013      	str	r3, [r2, #0]
2000e580:	4b81      	ldr	r3, [pc, #516]	; (2000e788 <HAL_RCC_OscConfig+0x2ac>)
2000e582:	681b      	ldr	r3, [r3, #0]
2000e584:	4a80      	ldr	r2, [pc, #512]	; (2000e788 <HAL_RCC_OscConfig+0x2ac>)
2000e586:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
2000e58a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
2000e58c:	687b      	ldr	r3, [r7, #4]
2000e58e:	685b      	ldr	r3, [r3, #4]
2000e590:	2b00      	cmp	r3, #0
2000e592:	d013      	beq.n	2000e5bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
2000e594:	f7ff fca2 	bl	2000dedc <HAL_GetTick>
2000e598:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
2000e59a:	e008      	b.n	2000e5ae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
2000e59c:	f7ff fc9e 	bl	2000dedc <HAL_GetTick>
2000e5a0:	4602      	mov	r2, r0
2000e5a2:	693b      	ldr	r3, [r7, #16]
2000e5a4:	1ad3      	subs	r3, r2, r3
2000e5a6:	2b64      	cmp	r3, #100	; 0x64
2000e5a8:	d901      	bls.n	2000e5ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
2000e5aa:	2303      	movs	r3, #3
2000e5ac:	e1fb      	b.n	2000e9a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
2000e5ae:	4b76      	ldr	r3, [pc, #472]	; (2000e788 <HAL_RCC_OscConfig+0x2ac>)
2000e5b0:	681b      	ldr	r3, [r3, #0]
2000e5b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
2000e5b6:	2b00      	cmp	r3, #0
2000e5b8:	d0f0      	beq.n	2000e59c <HAL_RCC_OscConfig+0xc0>
2000e5ba:	e014      	b.n	2000e5e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
2000e5bc:	f7ff fc8e 	bl	2000dedc <HAL_GetTick>
2000e5c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
2000e5c2:	e008      	b.n	2000e5d6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
2000e5c4:	f7ff fc8a 	bl	2000dedc <HAL_GetTick>
2000e5c8:	4602      	mov	r2, r0
2000e5ca:	693b      	ldr	r3, [r7, #16]
2000e5cc:	1ad3      	subs	r3, r2, r3
2000e5ce:	2b64      	cmp	r3, #100	; 0x64
2000e5d0:	d901      	bls.n	2000e5d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
2000e5d2:	2303      	movs	r3, #3
2000e5d4:	e1e7      	b.n	2000e9a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
2000e5d6:	4b6c      	ldr	r3, [pc, #432]	; (2000e788 <HAL_RCC_OscConfig+0x2ac>)
2000e5d8:	681b      	ldr	r3, [r3, #0]
2000e5da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
2000e5de:	2b00      	cmp	r3, #0
2000e5e0:	d1f0      	bne.n	2000e5c4 <HAL_RCC_OscConfig+0xe8>
2000e5e2:	e000      	b.n	2000e5e6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
2000e5e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
2000e5e6:	687b      	ldr	r3, [r7, #4]
2000e5e8:	681b      	ldr	r3, [r3, #0]
2000e5ea:	f003 0302 	and.w	r3, r3, #2
2000e5ee:	2b00      	cmp	r3, #0
2000e5f0:	d063      	beq.n	2000e6ba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
2000e5f2:	4b65      	ldr	r3, [pc, #404]	; (2000e788 <HAL_RCC_OscConfig+0x2ac>)
2000e5f4:	689b      	ldr	r3, [r3, #8]
2000e5f6:	f003 030c 	and.w	r3, r3, #12
2000e5fa:	2b00      	cmp	r3, #0
2000e5fc:	d00b      	beq.n	2000e616 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
2000e5fe:	4b62      	ldr	r3, [pc, #392]	; (2000e788 <HAL_RCC_OscConfig+0x2ac>)
2000e600:	689b      	ldr	r3, [r3, #8]
2000e602:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
2000e606:	2b08      	cmp	r3, #8
2000e608:	d11c      	bne.n	2000e644 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
2000e60a:	4b5f      	ldr	r3, [pc, #380]	; (2000e788 <HAL_RCC_OscConfig+0x2ac>)
2000e60c:	685b      	ldr	r3, [r3, #4]
2000e60e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
2000e612:	2b00      	cmp	r3, #0
2000e614:	d116      	bne.n	2000e644 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
2000e616:	4b5c      	ldr	r3, [pc, #368]	; (2000e788 <HAL_RCC_OscConfig+0x2ac>)
2000e618:	681b      	ldr	r3, [r3, #0]
2000e61a:	f003 0302 	and.w	r3, r3, #2
2000e61e:	2b00      	cmp	r3, #0
2000e620:	d005      	beq.n	2000e62e <HAL_RCC_OscConfig+0x152>
2000e622:	687b      	ldr	r3, [r7, #4]
2000e624:	68db      	ldr	r3, [r3, #12]
2000e626:	2b01      	cmp	r3, #1
2000e628:	d001      	beq.n	2000e62e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
2000e62a:	2301      	movs	r3, #1
2000e62c:	e1bb      	b.n	2000e9a6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
2000e62e:	4b56      	ldr	r3, [pc, #344]	; (2000e788 <HAL_RCC_OscConfig+0x2ac>)
2000e630:	681b      	ldr	r3, [r3, #0]
2000e632:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
2000e636:	687b      	ldr	r3, [r7, #4]
2000e638:	691b      	ldr	r3, [r3, #16]
2000e63a:	00db      	lsls	r3, r3, #3
2000e63c:	4952      	ldr	r1, [pc, #328]	; (2000e788 <HAL_RCC_OscConfig+0x2ac>)
2000e63e:	4313      	orrs	r3, r2
2000e640:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
2000e642:	e03a      	b.n	2000e6ba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
2000e644:	687b      	ldr	r3, [r7, #4]
2000e646:	68db      	ldr	r3, [r3, #12]
2000e648:	2b00      	cmp	r3, #0
2000e64a:	d020      	beq.n	2000e68e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
2000e64c:	4b4f      	ldr	r3, [pc, #316]	; (2000e78c <HAL_RCC_OscConfig+0x2b0>)
2000e64e:	2201      	movs	r2, #1
2000e650:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
2000e652:	f7ff fc43 	bl	2000dedc <HAL_GetTick>
2000e656:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
2000e658:	e008      	b.n	2000e66c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
2000e65a:	f7ff fc3f 	bl	2000dedc <HAL_GetTick>
2000e65e:	4602      	mov	r2, r0
2000e660:	693b      	ldr	r3, [r7, #16]
2000e662:	1ad3      	subs	r3, r2, r3
2000e664:	2b02      	cmp	r3, #2
2000e666:	d901      	bls.n	2000e66c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
2000e668:	2303      	movs	r3, #3
2000e66a:	e19c      	b.n	2000e9a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
2000e66c:	4b46      	ldr	r3, [pc, #280]	; (2000e788 <HAL_RCC_OscConfig+0x2ac>)
2000e66e:	681b      	ldr	r3, [r3, #0]
2000e670:	f003 0302 	and.w	r3, r3, #2
2000e674:	2b00      	cmp	r3, #0
2000e676:	d0f0      	beq.n	2000e65a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
2000e678:	4b43      	ldr	r3, [pc, #268]	; (2000e788 <HAL_RCC_OscConfig+0x2ac>)
2000e67a:	681b      	ldr	r3, [r3, #0]
2000e67c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
2000e680:	687b      	ldr	r3, [r7, #4]
2000e682:	691b      	ldr	r3, [r3, #16]
2000e684:	00db      	lsls	r3, r3, #3
2000e686:	4940      	ldr	r1, [pc, #256]	; (2000e788 <HAL_RCC_OscConfig+0x2ac>)
2000e688:	4313      	orrs	r3, r2
2000e68a:	600b      	str	r3, [r1, #0]
2000e68c:	e015      	b.n	2000e6ba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
2000e68e:	4b3f      	ldr	r3, [pc, #252]	; (2000e78c <HAL_RCC_OscConfig+0x2b0>)
2000e690:	2200      	movs	r2, #0
2000e692:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
2000e694:	f7ff fc22 	bl	2000dedc <HAL_GetTick>
2000e698:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
2000e69a:	e008      	b.n	2000e6ae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
2000e69c:	f7ff fc1e 	bl	2000dedc <HAL_GetTick>
2000e6a0:	4602      	mov	r2, r0
2000e6a2:	693b      	ldr	r3, [r7, #16]
2000e6a4:	1ad3      	subs	r3, r2, r3
2000e6a6:	2b02      	cmp	r3, #2
2000e6a8:	d901      	bls.n	2000e6ae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
2000e6aa:	2303      	movs	r3, #3
2000e6ac:	e17b      	b.n	2000e9a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
2000e6ae:	4b36      	ldr	r3, [pc, #216]	; (2000e788 <HAL_RCC_OscConfig+0x2ac>)
2000e6b0:	681b      	ldr	r3, [r3, #0]
2000e6b2:	f003 0302 	and.w	r3, r3, #2
2000e6b6:	2b00      	cmp	r3, #0
2000e6b8:	d1f0      	bne.n	2000e69c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
2000e6ba:	687b      	ldr	r3, [r7, #4]
2000e6bc:	681b      	ldr	r3, [r3, #0]
2000e6be:	f003 0308 	and.w	r3, r3, #8
2000e6c2:	2b00      	cmp	r3, #0
2000e6c4:	d030      	beq.n	2000e728 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
2000e6c6:	687b      	ldr	r3, [r7, #4]
2000e6c8:	695b      	ldr	r3, [r3, #20]
2000e6ca:	2b00      	cmp	r3, #0
2000e6cc:	d016      	beq.n	2000e6fc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
2000e6ce:	4b30      	ldr	r3, [pc, #192]	; (2000e790 <HAL_RCC_OscConfig+0x2b4>)
2000e6d0:	2201      	movs	r2, #1
2000e6d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
2000e6d4:	f7ff fc02 	bl	2000dedc <HAL_GetTick>
2000e6d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
2000e6da:	e008      	b.n	2000e6ee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
2000e6dc:	f7ff fbfe 	bl	2000dedc <HAL_GetTick>
2000e6e0:	4602      	mov	r2, r0
2000e6e2:	693b      	ldr	r3, [r7, #16]
2000e6e4:	1ad3      	subs	r3, r2, r3
2000e6e6:	2b02      	cmp	r3, #2
2000e6e8:	d901      	bls.n	2000e6ee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
2000e6ea:	2303      	movs	r3, #3
2000e6ec:	e15b      	b.n	2000e9a6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
2000e6ee:	4b26      	ldr	r3, [pc, #152]	; (2000e788 <HAL_RCC_OscConfig+0x2ac>)
2000e6f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
2000e6f2:	f003 0302 	and.w	r3, r3, #2
2000e6f6:	2b00      	cmp	r3, #0
2000e6f8:	d0f0      	beq.n	2000e6dc <HAL_RCC_OscConfig+0x200>
2000e6fa:	e015      	b.n	2000e728 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
2000e6fc:	4b24      	ldr	r3, [pc, #144]	; (2000e790 <HAL_RCC_OscConfig+0x2b4>)
2000e6fe:	2200      	movs	r2, #0
2000e700:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
2000e702:	f7ff fbeb 	bl	2000dedc <HAL_GetTick>
2000e706:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
2000e708:	e008      	b.n	2000e71c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
2000e70a:	f7ff fbe7 	bl	2000dedc <HAL_GetTick>
2000e70e:	4602      	mov	r2, r0
2000e710:	693b      	ldr	r3, [r7, #16]
2000e712:	1ad3      	subs	r3, r2, r3
2000e714:	2b02      	cmp	r3, #2
2000e716:	d901      	bls.n	2000e71c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
2000e718:	2303      	movs	r3, #3
2000e71a:	e144      	b.n	2000e9a6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
2000e71c:	4b1a      	ldr	r3, [pc, #104]	; (2000e788 <HAL_RCC_OscConfig+0x2ac>)
2000e71e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
2000e720:	f003 0302 	and.w	r3, r3, #2
2000e724:	2b00      	cmp	r3, #0
2000e726:	d1f0      	bne.n	2000e70a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
2000e728:	687b      	ldr	r3, [r7, #4]
2000e72a:	681b      	ldr	r3, [r3, #0]
2000e72c:	f003 0304 	and.w	r3, r3, #4
2000e730:	2b00      	cmp	r3, #0
2000e732:	f000 80a0 	beq.w	2000e876 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
2000e736:	2300      	movs	r3, #0
2000e738:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
2000e73a:	4b13      	ldr	r3, [pc, #76]	; (2000e788 <HAL_RCC_OscConfig+0x2ac>)
2000e73c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2000e73e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
2000e742:	2b00      	cmp	r3, #0
2000e744:	d10f      	bne.n	2000e766 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
2000e746:	2300      	movs	r3, #0
2000e748:	60bb      	str	r3, [r7, #8]
2000e74a:	4b0f      	ldr	r3, [pc, #60]	; (2000e788 <HAL_RCC_OscConfig+0x2ac>)
2000e74c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2000e74e:	4a0e      	ldr	r2, [pc, #56]	; (2000e788 <HAL_RCC_OscConfig+0x2ac>)
2000e750:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
2000e754:	6413      	str	r3, [r2, #64]	; 0x40
2000e756:	4b0c      	ldr	r3, [pc, #48]	; (2000e788 <HAL_RCC_OscConfig+0x2ac>)
2000e758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2000e75a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
2000e75e:	60bb      	str	r3, [r7, #8]
2000e760:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
2000e762:	2301      	movs	r3, #1
2000e764:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
2000e766:	4b0b      	ldr	r3, [pc, #44]	; (2000e794 <HAL_RCC_OscConfig+0x2b8>)
2000e768:	681b      	ldr	r3, [r3, #0]
2000e76a:	f403 7380 	and.w	r3, r3, #256	; 0x100
2000e76e:	2b00      	cmp	r3, #0
2000e770:	d121      	bne.n	2000e7b6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
2000e772:	4b08      	ldr	r3, [pc, #32]	; (2000e794 <HAL_RCC_OscConfig+0x2b8>)
2000e774:	681b      	ldr	r3, [r3, #0]
2000e776:	4a07      	ldr	r2, [pc, #28]	; (2000e794 <HAL_RCC_OscConfig+0x2b8>)
2000e778:	f443 7380 	orr.w	r3, r3, #256	; 0x100
2000e77c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
2000e77e:	f7ff fbad 	bl	2000dedc <HAL_GetTick>
2000e782:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
2000e784:	e011      	b.n	2000e7aa <HAL_RCC_OscConfig+0x2ce>
2000e786:	bf00      	nop
2000e788:	40023800 	.word	0x40023800
2000e78c:	42470000 	.word	0x42470000
2000e790:	42470e80 	.word	0x42470e80
2000e794:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
2000e798:	f7ff fba0 	bl	2000dedc <HAL_GetTick>
2000e79c:	4602      	mov	r2, r0
2000e79e:	693b      	ldr	r3, [r7, #16]
2000e7a0:	1ad3      	subs	r3, r2, r3
2000e7a2:	2b02      	cmp	r3, #2
2000e7a4:	d901      	bls.n	2000e7aa <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
2000e7a6:	2303      	movs	r3, #3
2000e7a8:	e0fd      	b.n	2000e9a6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
2000e7aa:	4b81      	ldr	r3, [pc, #516]	; (2000e9b0 <HAL_RCC_OscConfig+0x4d4>)
2000e7ac:	681b      	ldr	r3, [r3, #0]
2000e7ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
2000e7b2:	2b00      	cmp	r3, #0
2000e7b4:	d0f0      	beq.n	2000e798 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
2000e7b6:	687b      	ldr	r3, [r7, #4]
2000e7b8:	689b      	ldr	r3, [r3, #8]
2000e7ba:	2b01      	cmp	r3, #1
2000e7bc:	d106      	bne.n	2000e7cc <HAL_RCC_OscConfig+0x2f0>
2000e7be:	4b7d      	ldr	r3, [pc, #500]	; (2000e9b4 <HAL_RCC_OscConfig+0x4d8>)
2000e7c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2000e7c2:	4a7c      	ldr	r2, [pc, #496]	; (2000e9b4 <HAL_RCC_OscConfig+0x4d8>)
2000e7c4:	f043 0301 	orr.w	r3, r3, #1
2000e7c8:	6713      	str	r3, [r2, #112]	; 0x70
2000e7ca:	e01c      	b.n	2000e806 <HAL_RCC_OscConfig+0x32a>
2000e7cc:	687b      	ldr	r3, [r7, #4]
2000e7ce:	689b      	ldr	r3, [r3, #8]
2000e7d0:	2b05      	cmp	r3, #5
2000e7d2:	d10c      	bne.n	2000e7ee <HAL_RCC_OscConfig+0x312>
2000e7d4:	4b77      	ldr	r3, [pc, #476]	; (2000e9b4 <HAL_RCC_OscConfig+0x4d8>)
2000e7d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2000e7d8:	4a76      	ldr	r2, [pc, #472]	; (2000e9b4 <HAL_RCC_OscConfig+0x4d8>)
2000e7da:	f043 0304 	orr.w	r3, r3, #4
2000e7de:	6713      	str	r3, [r2, #112]	; 0x70
2000e7e0:	4b74      	ldr	r3, [pc, #464]	; (2000e9b4 <HAL_RCC_OscConfig+0x4d8>)
2000e7e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2000e7e4:	4a73      	ldr	r2, [pc, #460]	; (2000e9b4 <HAL_RCC_OscConfig+0x4d8>)
2000e7e6:	f043 0301 	orr.w	r3, r3, #1
2000e7ea:	6713      	str	r3, [r2, #112]	; 0x70
2000e7ec:	e00b      	b.n	2000e806 <HAL_RCC_OscConfig+0x32a>
2000e7ee:	4b71      	ldr	r3, [pc, #452]	; (2000e9b4 <HAL_RCC_OscConfig+0x4d8>)
2000e7f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2000e7f2:	4a70      	ldr	r2, [pc, #448]	; (2000e9b4 <HAL_RCC_OscConfig+0x4d8>)
2000e7f4:	f023 0301 	bic.w	r3, r3, #1
2000e7f8:	6713      	str	r3, [r2, #112]	; 0x70
2000e7fa:	4b6e      	ldr	r3, [pc, #440]	; (2000e9b4 <HAL_RCC_OscConfig+0x4d8>)
2000e7fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2000e7fe:	4a6d      	ldr	r2, [pc, #436]	; (2000e9b4 <HAL_RCC_OscConfig+0x4d8>)
2000e800:	f023 0304 	bic.w	r3, r3, #4
2000e804:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
2000e806:	687b      	ldr	r3, [r7, #4]
2000e808:	689b      	ldr	r3, [r3, #8]
2000e80a:	2b00      	cmp	r3, #0
2000e80c:	d015      	beq.n	2000e83a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
2000e80e:	f7ff fb65 	bl	2000dedc <HAL_GetTick>
2000e812:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
2000e814:	e00a      	b.n	2000e82c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
2000e816:	f7ff fb61 	bl	2000dedc <HAL_GetTick>
2000e81a:	4602      	mov	r2, r0
2000e81c:	693b      	ldr	r3, [r7, #16]
2000e81e:	1ad3      	subs	r3, r2, r3
2000e820:	f241 3288 	movw	r2, #5000	; 0x1388
2000e824:	4293      	cmp	r3, r2
2000e826:	d901      	bls.n	2000e82c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
2000e828:	2303      	movs	r3, #3
2000e82a:	e0bc      	b.n	2000e9a6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
2000e82c:	4b61      	ldr	r3, [pc, #388]	; (2000e9b4 <HAL_RCC_OscConfig+0x4d8>)
2000e82e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2000e830:	f003 0302 	and.w	r3, r3, #2
2000e834:	2b00      	cmp	r3, #0
2000e836:	d0ee      	beq.n	2000e816 <HAL_RCC_OscConfig+0x33a>
2000e838:	e014      	b.n	2000e864 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
2000e83a:	f7ff fb4f 	bl	2000dedc <HAL_GetTick>
2000e83e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
2000e840:	e00a      	b.n	2000e858 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
2000e842:	f7ff fb4b 	bl	2000dedc <HAL_GetTick>
2000e846:	4602      	mov	r2, r0
2000e848:	693b      	ldr	r3, [r7, #16]
2000e84a:	1ad3      	subs	r3, r2, r3
2000e84c:	f241 3288 	movw	r2, #5000	; 0x1388
2000e850:	4293      	cmp	r3, r2
2000e852:	d901      	bls.n	2000e858 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
2000e854:	2303      	movs	r3, #3
2000e856:	e0a6      	b.n	2000e9a6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
2000e858:	4b56      	ldr	r3, [pc, #344]	; (2000e9b4 <HAL_RCC_OscConfig+0x4d8>)
2000e85a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2000e85c:	f003 0302 	and.w	r3, r3, #2
2000e860:	2b00      	cmp	r3, #0
2000e862:	d1ee      	bne.n	2000e842 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
2000e864:	7dfb      	ldrb	r3, [r7, #23]
2000e866:	2b01      	cmp	r3, #1
2000e868:	d105      	bne.n	2000e876 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
2000e86a:	4b52      	ldr	r3, [pc, #328]	; (2000e9b4 <HAL_RCC_OscConfig+0x4d8>)
2000e86c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2000e86e:	4a51      	ldr	r2, [pc, #324]	; (2000e9b4 <HAL_RCC_OscConfig+0x4d8>)
2000e870:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
2000e874:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
2000e876:	687b      	ldr	r3, [r7, #4]
2000e878:	699b      	ldr	r3, [r3, #24]
2000e87a:	2b00      	cmp	r3, #0
2000e87c:	f000 8092 	beq.w	2000e9a4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
2000e880:	4b4c      	ldr	r3, [pc, #304]	; (2000e9b4 <HAL_RCC_OscConfig+0x4d8>)
2000e882:	689b      	ldr	r3, [r3, #8]
2000e884:	f003 030c 	and.w	r3, r3, #12
2000e888:	2b08      	cmp	r3, #8
2000e88a:	d05c      	beq.n	2000e946 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
2000e88c:	687b      	ldr	r3, [r7, #4]
2000e88e:	699b      	ldr	r3, [r3, #24]
2000e890:	2b02      	cmp	r3, #2
2000e892:	d141      	bne.n	2000e918 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
2000e894:	4b48      	ldr	r3, [pc, #288]	; (2000e9b8 <HAL_RCC_OscConfig+0x4dc>)
2000e896:	2200      	movs	r2, #0
2000e898:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
2000e89a:	f7ff fb1f 	bl	2000dedc <HAL_GetTick>
2000e89e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
2000e8a0:	e008      	b.n	2000e8b4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
2000e8a2:	f7ff fb1b 	bl	2000dedc <HAL_GetTick>
2000e8a6:	4602      	mov	r2, r0
2000e8a8:	693b      	ldr	r3, [r7, #16]
2000e8aa:	1ad3      	subs	r3, r2, r3
2000e8ac:	2b02      	cmp	r3, #2
2000e8ae:	d901      	bls.n	2000e8b4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
2000e8b0:	2303      	movs	r3, #3
2000e8b2:	e078      	b.n	2000e9a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
2000e8b4:	4b3f      	ldr	r3, [pc, #252]	; (2000e9b4 <HAL_RCC_OscConfig+0x4d8>)
2000e8b6:	681b      	ldr	r3, [r3, #0]
2000e8b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
2000e8bc:	2b00      	cmp	r3, #0
2000e8be:	d1f0      	bne.n	2000e8a2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
2000e8c0:	687b      	ldr	r3, [r7, #4]
2000e8c2:	69da      	ldr	r2, [r3, #28]
2000e8c4:	687b      	ldr	r3, [r7, #4]
2000e8c6:	6a1b      	ldr	r3, [r3, #32]
2000e8c8:	431a      	orrs	r2, r3
2000e8ca:	687b      	ldr	r3, [r7, #4]
2000e8cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2000e8ce:	019b      	lsls	r3, r3, #6
2000e8d0:	431a      	orrs	r2, r3
2000e8d2:	687b      	ldr	r3, [r7, #4]
2000e8d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
2000e8d6:	085b      	lsrs	r3, r3, #1
2000e8d8:	3b01      	subs	r3, #1
2000e8da:	041b      	lsls	r3, r3, #16
2000e8dc:	431a      	orrs	r2, r3
2000e8de:	687b      	ldr	r3, [r7, #4]
2000e8e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2000e8e2:	061b      	lsls	r3, r3, #24
2000e8e4:	4933      	ldr	r1, [pc, #204]	; (2000e9b4 <HAL_RCC_OscConfig+0x4d8>)
2000e8e6:	4313      	orrs	r3, r2
2000e8e8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
2000e8ea:	4b33      	ldr	r3, [pc, #204]	; (2000e9b8 <HAL_RCC_OscConfig+0x4dc>)
2000e8ec:	2201      	movs	r2, #1
2000e8ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
2000e8f0:	f7ff faf4 	bl	2000dedc <HAL_GetTick>
2000e8f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
2000e8f6:	e008      	b.n	2000e90a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
2000e8f8:	f7ff faf0 	bl	2000dedc <HAL_GetTick>
2000e8fc:	4602      	mov	r2, r0
2000e8fe:	693b      	ldr	r3, [r7, #16]
2000e900:	1ad3      	subs	r3, r2, r3
2000e902:	2b02      	cmp	r3, #2
2000e904:	d901      	bls.n	2000e90a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
2000e906:	2303      	movs	r3, #3
2000e908:	e04d      	b.n	2000e9a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
2000e90a:	4b2a      	ldr	r3, [pc, #168]	; (2000e9b4 <HAL_RCC_OscConfig+0x4d8>)
2000e90c:	681b      	ldr	r3, [r3, #0]
2000e90e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
2000e912:	2b00      	cmp	r3, #0
2000e914:	d0f0      	beq.n	2000e8f8 <HAL_RCC_OscConfig+0x41c>
2000e916:	e045      	b.n	2000e9a4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
2000e918:	4b27      	ldr	r3, [pc, #156]	; (2000e9b8 <HAL_RCC_OscConfig+0x4dc>)
2000e91a:	2200      	movs	r2, #0
2000e91c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
2000e91e:	f7ff fadd 	bl	2000dedc <HAL_GetTick>
2000e922:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
2000e924:	e008      	b.n	2000e938 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
2000e926:	f7ff fad9 	bl	2000dedc <HAL_GetTick>
2000e92a:	4602      	mov	r2, r0
2000e92c:	693b      	ldr	r3, [r7, #16]
2000e92e:	1ad3      	subs	r3, r2, r3
2000e930:	2b02      	cmp	r3, #2
2000e932:	d901      	bls.n	2000e938 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
2000e934:	2303      	movs	r3, #3
2000e936:	e036      	b.n	2000e9a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
2000e938:	4b1e      	ldr	r3, [pc, #120]	; (2000e9b4 <HAL_RCC_OscConfig+0x4d8>)
2000e93a:	681b      	ldr	r3, [r3, #0]
2000e93c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
2000e940:	2b00      	cmp	r3, #0
2000e942:	d1f0      	bne.n	2000e926 <HAL_RCC_OscConfig+0x44a>
2000e944:	e02e      	b.n	2000e9a4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
2000e946:	687b      	ldr	r3, [r7, #4]
2000e948:	699b      	ldr	r3, [r3, #24]
2000e94a:	2b01      	cmp	r3, #1
2000e94c:	d101      	bne.n	2000e952 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
2000e94e:	2301      	movs	r3, #1
2000e950:	e029      	b.n	2000e9a6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
2000e952:	4b18      	ldr	r3, [pc, #96]	; (2000e9b4 <HAL_RCC_OscConfig+0x4d8>)
2000e954:	685b      	ldr	r3, [r3, #4]
2000e956:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
2000e958:	68fb      	ldr	r3, [r7, #12]
2000e95a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
2000e95e:	687b      	ldr	r3, [r7, #4]
2000e960:	69db      	ldr	r3, [r3, #28]
2000e962:	429a      	cmp	r2, r3
2000e964:	d11c      	bne.n	2000e9a0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
2000e966:	68fb      	ldr	r3, [r7, #12]
2000e968:	f003 023f 	and.w	r2, r3, #63	; 0x3f
2000e96c:	687b      	ldr	r3, [r7, #4]
2000e96e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
2000e970:	429a      	cmp	r2, r3
2000e972:	d115      	bne.n	2000e9a0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
2000e974:	68fa      	ldr	r2, [r7, #12]
2000e976:	f647 73c0 	movw	r3, #32704	; 0x7fc0
2000e97a:	4013      	ands	r3, r2
2000e97c:	687a      	ldr	r2, [r7, #4]
2000e97e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
2000e980:	4293      	cmp	r3, r2
2000e982:	d10d      	bne.n	2000e9a0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
2000e984:	68fb      	ldr	r3, [r7, #12]
2000e986:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
2000e98a:	687b      	ldr	r3, [r7, #4]
2000e98c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
2000e98e:	429a      	cmp	r2, r3
2000e990:	d106      	bne.n	2000e9a0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
2000e992:	68fb      	ldr	r3, [r7, #12]
2000e994:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
2000e998:	687b      	ldr	r3, [r7, #4]
2000e99a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
2000e99c:	429a      	cmp	r2, r3
2000e99e:	d001      	beq.n	2000e9a4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
2000e9a0:	2301      	movs	r3, #1
2000e9a2:	e000      	b.n	2000e9a6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
2000e9a4:	2300      	movs	r3, #0
}
2000e9a6:	4618      	mov	r0, r3
2000e9a8:	3718      	adds	r7, #24
2000e9aa:	46bd      	mov	sp, r7
2000e9ac:	bd80      	pop	{r7, pc}
2000e9ae:	bf00      	nop
2000e9b0:	40007000 	.word	0x40007000
2000e9b4:	40023800 	.word	0x40023800
2000e9b8:	42470060 	.word	0x42470060

2000e9bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
2000e9bc:	b580      	push	{r7, lr}
2000e9be:	b084      	sub	sp, #16
2000e9c0:	af00      	add	r7, sp, #0
2000e9c2:	6078      	str	r0, [r7, #4]
2000e9c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
2000e9c6:	687b      	ldr	r3, [r7, #4]
2000e9c8:	2b00      	cmp	r3, #0
2000e9ca:	d101      	bne.n	2000e9d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
2000e9cc:	2301      	movs	r3, #1
2000e9ce:	e0cc      	b.n	2000eb6a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
2000e9d0:	4b68      	ldr	r3, [pc, #416]	; (2000eb74 <HAL_RCC_ClockConfig+0x1b8>)
2000e9d2:	681b      	ldr	r3, [r3, #0]
2000e9d4:	f003 030f 	and.w	r3, r3, #15
2000e9d8:	683a      	ldr	r2, [r7, #0]
2000e9da:	429a      	cmp	r2, r3
2000e9dc:	d90c      	bls.n	2000e9f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
2000e9de:	4b65      	ldr	r3, [pc, #404]	; (2000eb74 <HAL_RCC_ClockConfig+0x1b8>)
2000e9e0:	683a      	ldr	r2, [r7, #0]
2000e9e2:	b2d2      	uxtb	r2, r2
2000e9e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
2000e9e6:	4b63      	ldr	r3, [pc, #396]	; (2000eb74 <HAL_RCC_ClockConfig+0x1b8>)
2000e9e8:	681b      	ldr	r3, [r3, #0]
2000e9ea:	f003 030f 	and.w	r3, r3, #15
2000e9ee:	683a      	ldr	r2, [r7, #0]
2000e9f0:	429a      	cmp	r2, r3
2000e9f2:	d001      	beq.n	2000e9f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
2000e9f4:	2301      	movs	r3, #1
2000e9f6:	e0b8      	b.n	2000eb6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
2000e9f8:	687b      	ldr	r3, [r7, #4]
2000e9fa:	681b      	ldr	r3, [r3, #0]
2000e9fc:	f003 0302 	and.w	r3, r3, #2
2000ea00:	2b00      	cmp	r3, #0
2000ea02:	d020      	beq.n	2000ea46 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
2000ea04:	687b      	ldr	r3, [r7, #4]
2000ea06:	681b      	ldr	r3, [r3, #0]
2000ea08:	f003 0304 	and.w	r3, r3, #4
2000ea0c:	2b00      	cmp	r3, #0
2000ea0e:	d005      	beq.n	2000ea1c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
2000ea10:	4b59      	ldr	r3, [pc, #356]	; (2000eb78 <HAL_RCC_ClockConfig+0x1bc>)
2000ea12:	689b      	ldr	r3, [r3, #8]
2000ea14:	4a58      	ldr	r2, [pc, #352]	; (2000eb78 <HAL_RCC_ClockConfig+0x1bc>)
2000ea16:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
2000ea1a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
2000ea1c:	687b      	ldr	r3, [r7, #4]
2000ea1e:	681b      	ldr	r3, [r3, #0]
2000ea20:	f003 0308 	and.w	r3, r3, #8
2000ea24:	2b00      	cmp	r3, #0
2000ea26:	d005      	beq.n	2000ea34 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
2000ea28:	4b53      	ldr	r3, [pc, #332]	; (2000eb78 <HAL_RCC_ClockConfig+0x1bc>)
2000ea2a:	689b      	ldr	r3, [r3, #8]
2000ea2c:	4a52      	ldr	r2, [pc, #328]	; (2000eb78 <HAL_RCC_ClockConfig+0x1bc>)
2000ea2e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
2000ea32:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
2000ea34:	4b50      	ldr	r3, [pc, #320]	; (2000eb78 <HAL_RCC_ClockConfig+0x1bc>)
2000ea36:	689b      	ldr	r3, [r3, #8]
2000ea38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
2000ea3c:	687b      	ldr	r3, [r7, #4]
2000ea3e:	689b      	ldr	r3, [r3, #8]
2000ea40:	494d      	ldr	r1, [pc, #308]	; (2000eb78 <HAL_RCC_ClockConfig+0x1bc>)
2000ea42:	4313      	orrs	r3, r2
2000ea44:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
2000ea46:	687b      	ldr	r3, [r7, #4]
2000ea48:	681b      	ldr	r3, [r3, #0]
2000ea4a:	f003 0301 	and.w	r3, r3, #1
2000ea4e:	2b00      	cmp	r3, #0
2000ea50:	d044      	beq.n	2000eadc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
2000ea52:	687b      	ldr	r3, [r7, #4]
2000ea54:	685b      	ldr	r3, [r3, #4]
2000ea56:	2b01      	cmp	r3, #1
2000ea58:	d107      	bne.n	2000ea6a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
2000ea5a:	4b47      	ldr	r3, [pc, #284]	; (2000eb78 <HAL_RCC_ClockConfig+0x1bc>)
2000ea5c:	681b      	ldr	r3, [r3, #0]
2000ea5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
2000ea62:	2b00      	cmp	r3, #0
2000ea64:	d119      	bne.n	2000ea9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
2000ea66:	2301      	movs	r3, #1
2000ea68:	e07f      	b.n	2000eb6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
2000ea6a:	687b      	ldr	r3, [r7, #4]
2000ea6c:	685b      	ldr	r3, [r3, #4]
2000ea6e:	2b02      	cmp	r3, #2
2000ea70:	d003      	beq.n	2000ea7a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
2000ea72:	687b      	ldr	r3, [r7, #4]
2000ea74:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
2000ea76:	2b03      	cmp	r3, #3
2000ea78:	d107      	bne.n	2000ea8a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
2000ea7a:	4b3f      	ldr	r3, [pc, #252]	; (2000eb78 <HAL_RCC_ClockConfig+0x1bc>)
2000ea7c:	681b      	ldr	r3, [r3, #0]
2000ea7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
2000ea82:	2b00      	cmp	r3, #0
2000ea84:	d109      	bne.n	2000ea9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
2000ea86:	2301      	movs	r3, #1
2000ea88:	e06f      	b.n	2000eb6a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
2000ea8a:	4b3b      	ldr	r3, [pc, #236]	; (2000eb78 <HAL_RCC_ClockConfig+0x1bc>)
2000ea8c:	681b      	ldr	r3, [r3, #0]
2000ea8e:	f003 0302 	and.w	r3, r3, #2
2000ea92:	2b00      	cmp	r3, #0
2000ea94:	d101      	bne.n	2000ea9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
2000ea96:	2301      	movs	r3, #1
2000ea98:	e067      	b.n	2000eb6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
2000ea9a:	4b37      	ldr	r3, [pc, #220]	; (2000eb78 <HAL_RCC_ClockConfig+0x1bc>)
2000ea9c:	689b      	ldr	r3, [r3, #8]
2000ea9e:	f023 0203 	bic.w	r2, r3, #3
2000eaa2:	687b      	ldr	r3, [r7, #4]
2000eaa4:	685b      	ldr	r3, [r3, #4]
2000eaa6:	4934      	ldr	r1, [pc, #208]	; (2000eb78 <HAL_RCC_ClockConfig+0x1bc>)
2000eaa8:	4313      	orrs	r3, r2
2000eaaa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
2000eaac:	f7ff fa16 	bl	2000dedc <HAL_GetTick>
2000eab0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
2000eab2:	e00a      	b.n	2000eaca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
2000eab4:	f7ff fa12 	bl	2000dedc <HAL_GetTick>
2000eab8:	4602      	mov	r2, r0
2000eaba:	68fb      	ldr	r3, [r7, #12]
2000eabc:	1ad3      	subs	r3, r2, r3
2000eabe:	f241 3288 	movw	r2, #5000	; 0x1388
2000eac2:	4293      	cmp	r3, r2
2000eac4:	d901      	bls.n	2000eaca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
2000eac6:	2303      	movs	r3, #3
2000eac8:	e04f      	b.n	2000eb6a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
2000eaca:	4b2b      	ldr	r3, [pc, #172]	; (2000eb78 <HAL_RCC_ClockConfig+0x1bc>)
2000eacc:	689b      	ldr	r3, [r3, #8]
2000eace:	f003 020c 	and.w	r2, r3, #12
2000ead2:	687b      	ldr	r3, [r7, #4]
2000ead4:	685b      	ldr	r3, [r3, #4]
2000ead6:	009b      	lsls	r3, r3, #2
2000ead8:	429a      	cmp	r2, r3
2000eada:	d1eb      	bne.n	2000eab4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
2000eadc:	4b25      	ldr	r3, [pc, #148]	; (2000eb74 <HAL_RCC_ClockConfig+0x1b8>)
2000eade:	681b      	ldr	r3, [r3, #0]
2000eae0:	f003 030f 	and.w	r3, r3, #15
2000eae4:	683a      	ldr	r2, [r7, #0]
2000eae6:	429a      	cmp	r2, r3
2000eae8:	d20c      	bcs.n	2000eb04 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
2000eaea:	4b22      	ldr	r3, [pc, #136]	; (2000eb74 <HAL_RCC_ClockConfig+0x1b8>)
2000eaec:	683a      	ldr	r2, [r7, #0]
2000eaee:	b2d2      	uxtb	r2, r2
2000eaf0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
2000eaf2:	4b20      	ldr	r3, [pc, #128]	; (2000eb74 <HAL_RCC_ClockConfig+0x1b8>)
2000eaf4:	681b      	ldr	r3, [r3, #0]
2000eaf6:	f003 030f 	and.w	r3, r3, #15
2000eafa:	683a      	ldr	r2, [r7, #0]
2000eafc:	429a      	cmp	r2, r3
2000eafe:	d001      	beq.n	2000eb04 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
2000eb00:	2301      	movs	r3, #1
2000eb02:	e032      	b.n	2000eb6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
2000eb04:	687b      	ldr	r3, [r7, #4]
2000eb06:	681b      	ldr	r3, [r3, #0]
2000eb08:	f003 0304 	and.w	r3, r3, #4
2000eb0c:	2b00      	cmp	r3, #0
2000eb0e:	d008      	beq.n	2000eb22 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
2000eb10:	4b19      	ldr	r3, [pc, #100]	; (2000eb78 <HAL_RCC_ClockConfig+0x1bc>)
2000eb12:	689b      	ldr	r3, [r3, #8]
2000eb14:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
2000eb18:	687b      	ldr	r3, [r7, #4]
2000eb1a:	68db      	ldr	r3, [r3, #12]
2000eb1c:	4916      	ldr	r1, [pc, #88]	; (2000eb78 <HAL_RCC_ClockConfig+0x1bc>)
2000eb1e:	4313      	orrs	r3, r2
2000eb20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
2000eb22:	687b      	ldr	r3, [r7, #4]
2000eb24:	681b      	ldr	r3, [r3, #0]
2000eb26:	f003 0308 	and.w	r3, r3, #8
2000eb2a:	2b00      	cmp	r3, #0
2000eb2c:	d009      	beq.n	2000eb42 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
2000eb2e:	4b12      	ldr	r3, [pc, #72]	; (2000eb78 <HAL_RCC_ClockConfig+0x1bc>)
2000eb30:	689b      	ldr	r3, [r3, #8]
2000eb32:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
2000eb36:	687b      	ldr	r3, [r7, #4]
2000eb38:	691b      	ldr	r3, [r3, #16]
2000eb3a:	00db      	lsls	r3, r3, #3
2000eb3c:	490e      	ldr	r1, [pc, #56]	; (2000eb78 <HAL_RCC_ClockConfig+0x1bc>)
2000eb3e:	4313      	orrs	r3, r2
2000eb40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
2000eb42:	f000 f821 	bl	2000eb88 <HAL_RCC_GetSysClockFreq>
2000eb46:	4601      	mov	r1, r0
2000eb48:	4b0b      	ldr	r3, [pc, #44]	; (2000eb78 <HAL_RCC_ClockConfig+0x1bc>)
2000eb4a:	689b      	ldr	r3, [r3, #8]
2000eb4c:	091b      	lsrs	r3, r3, #4
2000eb4e:	f003 030f 	and.w	r3, r3, #15
2000eb52:	4a0a      	ldr	r2, [pc, #40]	; (2000eb7c <HAL_RCC_ClockConfig+0x1c0>)
2000eb54:	5cd3      	ldrb	r3, [r2, r3]
2000eb56:	fa21 f303 	lsr.w	r3, r1, r3
2000eb5a:	4a09      	ldr	r2, [pc, #36]	; (2000eb80 <HAL_RCC_ClockConfig+0x1c4>)
2000eb5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
2000eb5e:	4b09      	ldr	r3, [pc, #36]	; (2000eb84 <HAL_RCC_ClockConfig+0x1c8>)
2000eb60:	681b      	ldr	r3, [r3, #0]
2000eb62:	4618      	mov	r0, r3
2000eb64:	f7ff f976 	bl	2000de54 <HAL_InitTick>

  return HAL_OK;
2000eb68:	2300      	movs	r3, #0
}
2000eb6a:	4618      	mov	r0, r3
2000eb6c:	3710      	adds	r7, #16
2000eb6e:	46bd      	mov	sp, r7
2000eb70:	bd80      	pop	{r7, pc}
2000eb72:	bf00      	nop
2000eb74:	40023c00 	.word	0x40023c00
2000eb78:	40023800 	.word	0x40023800
2000eb7c:	20010204 	.word	0x20010204
2000eb80:	20010258 	.word	0x20010258
2000eb84:	2001026c 	.word	0x2001026c

2000eb88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
2000eb88:	b5f0      	push	{r4, r5, r6, r7, lr}
2000eb8a:	b085      	sub	sp, #20
2000eb8c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
2000eb8e:	2300      	movs	r3, #0
2000eb90:	607b      	str	r3, [r7, #4]
2000eb92:	2300      	movs	r3, #0
2000eb94:	60fb      	str	r3, [r7, #12]
2000eb96:	2300      	movs	r3, #0
2000eb98:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
2000eb9a:	2300      	movs	r3, #0
2000eb9c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
2000eb9e:	4b50      	ldr	r3, [pc, #320]	; (2000ece0 <HAL_RCC_GetSysClockFreq+0x158>)
2000eba0:	689b      	ldr	r3, [r3, #8]
2000eba2:	f003 030c 	and.w	r3, r3, #12
2000eba6:	2b04      	cmp	r3, #4
2000eba8:	d007      	beq.n	2000ebba <HAL_RCC_GetSysClockFreq+0x32>
2000ebaa:	2b08      	cmp	r3, #8
2000ebac:	d008      	beq.n	2000ebc0 <HAL_RCC_GetSysClockFreq+0x38>
2000ebae:	2b00      	cmp	r3, #0
2000ebb0:	f040 808d 	bne.w	2000ecce <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
2000ebb4:	4b4b      	ldr	r3, [pc, #300]	; (2000ece4 <HAL_RCC_GetSysClockFreq+0x15c>)
2000ebb6:	60bb      	str	r3, [r7, #8]
       break;
2000ebb8:	e08c      	b.n	2000ecd4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
2000ebba:	4b4b      	ldr	r3, [pc, #300]	; (2000ece8 <HAL_RCC_GetSysClockFreq+0x160>)
2000ebbc:	60bb      	str	r3, [r7, #8]
      break;
2000ebbe:	e089      	b.n	2000ecd4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
2000ebc0:	4b47      	ldr	r3, [pc, #284]	; (2000ece0 <HAL_RCC_GetSysClockFreq+0x158>)
2000ebc2:	685b      	ldr	r3, [r3, #4]
2000ebc4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
2000ebc8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
2000ebca:	4b45      	ldr	r3, [pc, #276]	; (2000ece0 <HAL_RCC_GetSysClockFreq+0x158>)
2000ebcc:	685b      	ldr	r3, [r3, #4]
2000ebce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
2000ebd2:	2b00      	cmp	r3, #0
2000ebd4:	d023      	beq.n	2000ec1e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
2000ebd6:	4b42      	ldr	r3, [pc, #264]	; (2000ece0 <HAL_RCC_GetSysClockFreq+0x158>)
2000ebd8:	685b      	ldr	r3, [r3, #4]
2000ebda:	099b      	lsrs	r3, r3, #6
2000ebdc:	f04f 0400 	mov.w	r4, #0
2000ebe0:	f240 11ff 	movw	r1, #511	; 0x1ff
2000ebe4:	f04f 0200 	mov.w	r2, #0
2000ebe8:	ea03 0501 	and.w	r5, r3, r1
2000ebec:	ea04 0602 	and.w	r6, r4, r2
2000ebf0:	4a3d      	ldr	r2, [pc, #244]	; (2000ece8 <HAL_RCC_GetSysClockFreq+0x160>)
2000ebf2:	fb02 f106 	mul.w	r1, r2, r6
2000ebf6:	2200      	movs	r2, #0
2000ebf8:	fb02 f205 	mul.w	r2, r2, r5
2000ebfc:	440a      	add	r2, r1
2000ebfe:	493a      	ldr	r1, [pc, #232]	; (2000ece8 <HAL_RCC_GetSysClockFreq+0x160>)
2000ec00:	fba5 0101 	umull	r0, r1, r5, r1
2000ec04:	1853      	adds	r3, r2, r1
2000ec06:	4619      	mov	r1, r3
2000ec08:	687b      	ldr	r3, [r7, #4]
2000ec0a:	f04f 0400 	mov.w	r4, #0
2000ec0e:	461a      	mov	r2, r3
2000ec10:	4623      	mov	r3, r4
2000ec12:	f7fe fb35 	bl	2000d280 <__aeabi_uldivmod>
2000ec16:	4603      	mov	r3, r0
2000ec18:	460c      	mov	r4, r1
2000ec1a:	60fb      	str	r3, [r7, #12]
2000ec1c:	e049      	b.n	2000ecb2 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
2000ec1e:	4b30      	ldr	r3, [pc, #192]	; (2000ece0 <HAL_RCC_GetSysClockFreq+0x158>)
2000ec20:	685b      	ldr	r3, [r3, #4]
2000ec22:	099b      	lsrs	r3, r3, #6
2000ec24:	f04f 0400 	mov.w	r4, #0
2000ec28:	f240 11ff 	movw	r1, #511	; 0x1ff
2000ec2c:	f04f 0200 	mov.w	r2, #0
2000ec30:	ea03 0501 	and.w	r5, r3, r1
2000ec34:	ea04 0602 	and.w	r6, r4, r2
2000ec38:	4629      	mov	r1, r5
2000ec3a:	4632      	mov	r2, r6
2000ec3c:	f04f 0300 	mov.w	r3, #0
2000ec40:	f04f 0400 	mov.w	r4, #0
2000ec44:	0154      	lsls	r4, r2, #5
2000ec46:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
2000ec4a:	014b      	lsls	r3, r1, #5
2000ec4c:	4619      	mov	r1, r3
2000ec4e:	4622      	mov	r2, r4
2000ec50:	1b49      	subs	r1, r1, r5
2000ec52:	eb62 0206 	sbc.w	r2, r2, r6
2000ec56:	f04f 0300 	mov.w	r3, #0
2000ec5a:	f04f 0400 	mov.w	r4, #0
2000ec5e:	0194      	lsls	r4, r2, #6
2000ec60:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
2000ec64:	018b      	lsls	r3, r1, #6
2000ec66:	1a5b      	subs	r3, r3, r1
2000ec68:	eb64 0402 	sbc.w	r4, r4, r2
2000ec6c:	f04f 0100 	mov.w	r1, #0
2000ec70:	f04f 0200 	mov.w	r2, #0
2000ec74:	00e2      	lsls	r2, r4, #3
2000ec76:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
2000ec7a:	00d9      	lsls	r1, r3, #3
2000ec7c:	460b      	mov	r3, r1
2000ec7e:	4614      	mov	r4, r2
2000ec80:	195b      	adds	r3, r3, r5
2000ec82:	eb44 0406 	adc.w	r4, r4, r6
2000ec86:	f04f 0100 	mov.w	r1, #0
2000ec8a:	f04f 0200 	mov.w	r2, #0
2000ec8e:	02a2      	lsls	r2, r4, #10
2000ec90:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
2000ec94:	0299      	lsls	r1, r3, #10
2000ec96:	460b      	mov	r3, r1
2000ec98:	4614      	mov	r4, r2
2000ec9a:	4618      	mov	r0, r3
2000ec9c:	4621      	mov	r1, r4
2000ec9e:	687b      	ldr	r3, [r7, #4]
2000eca0:	f04f 0400 	mov.w	r4, #0
2000eca4:	461a      	mov	r2, r3
2000eca6:	4623      	mov	r3, r4
2000eca8:	f7fe faea 	bl	2000d280 <__aeabi_uldivmod>
2000ecac:	4603      	mov	r3, r0
2000ecae:	460c      	mov	r4, r1
2000ecb0:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
2000ecb2:	4b0b      	ldr	r3, [pc, #44]	; (2000ece0 <HAL_RCC_GetSysClockFreq+0x158>)
2000ecb4:	685b      	ldr	r3, [r3, #4]
2000ecb6:	0c1b      	lsrs	r3, r3, #16
2000ecb8:	f003 0303 	and.w	r3, r3, #3
2000ecbc:	3301      	adds	r3, #1
2000ecbe:	005b      	lsls	r3, r3, #1
2000ecc0:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
2000ecc2:	68fa      	ldr	r2, [r7, #12]
2000ecc4:	683b      	ldr	r3, [r7, #0]
2000ecc6:	fbb2 f3f3 	udiv	r3, r2, r3
2000ecca:	60bb      	str	r3, [r7, #8]
      break;
2000eccc:	e002      	b.n	2000ecd4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
2000ecce:	4b05      	ldr	r3, [pc, #20]	; (2000ece4 <HAL_RCC_GetSysClockFreq+0x15c>)
2000ecd0:	60bb      	str	r3, [r7, #8]
      break;
2000ecd2:	bf00      	nop
    }
  }
  return sysclockfreq;
2000ecd4:	68bb      	ldr	r3, [r7, #8]
}
2000ecd6:	4618      	mov	r0, r3
2000ecd8:	3714      	adds	r7, #20
2000ecda:	46bd      	mov	sp, r7
2000ecdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
2000ecde:	bf00      	nop
2000ece0:	40023800 	.word	0x40023800
2000ece4:	00f42400 	.word	0x00f42400
2000ece8:	017d7840 	.word	0x017d7840

2000ecec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
2000ecec:	b480      	push	{r7}
2000ecee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
2000ecf0:	4b03      	ldr	r3, [pc, #12]	; (2000ed00 <HAL_RCC_GetHCLKFreq+0x14>)
2000ecf2:	681b      	ldr	r3, [r3, #0]
}
2000ecf4:	4618      	mov	r0, r3
2000ecf6:	46bd      	mov	sp, r7
2000ecf8:	f85d 7b04 	ldr.w	r7, [sp], #4
2000ecfc:	4770      	bx	lr
2000ecfe:	bf00      	nop
2000ed00:	20010258 	.word	0x20010258

2000ed04 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
2000ed04:	b580      	push	{r7, lr}
2000ed06:	b086      	sub	sp, #24
2000ed08:	af00      	add	r7, sp, #0
2000ed0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
2000ed0c:	2300      	movs	r3, #0
2000ed0e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
2000ed10:	2300      	movs	r3, #0
2000ed12:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
2000ed14:	687b      	ldr	r3, [r7, #4]
2000ed16:	681b      	ldr	r3, [r3, #0]
2000ed18:	f003 0301 	and.w	r3, r3, #1
2000ed1c:	2b00      	cmp	r3, #0
2000ed1e:	d105      	bne.n	2000ed2c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
2000ed20:	687b      	ldr	r3, [r7, #4]
2000ed22:	681b      	ldr	r3, [r3, #0]
2000ed24:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
2000ed28:	2b00      	cmp	r3, #0
2000ed2a:	d035      	beq.n	2000ed98 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
2000ed2c:	4b62      	ldr	r3, [pc, #392]	; (2000eeb8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
2000ed2e:	2200      	movs	r2, #0
2000ed30:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
2000ed32:	f7ff f8d3 	bl	2000dedc <HAL_GetTick>
2000ed36:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
2000ed38:	e008      	b.n	2000ed4c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
2000ed3a:	f7ff f8cf 	bl	2000dedc <HAL_GetTick>
2000ed3e:	4602      	mov	r2, r0
2000ed40:	697b      	ldr	r3, [r7, #20]
2000ed42:	1ad3      	subs	r3, r2, r3
2000ed44:	2b02      	cmp	r3, #2
2000ed46:	d901      	bls.n	2000ed4c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
2000ed48:	2303      	movs	r3, #3
2000ed4a:	e0b0      	b.n	2000eeae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
2000ed4c:	4b5b      	ldr	r3, [pc, #364]	; (2000eebc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
2000ed4e:	681b      	ldr	r3, [r3, #0]
2000ed50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
2000ed54:	2b00      	cmp	r3, #0
2000ed56:	d1f0      	bne.n	2000ed3a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
2000ed58:	687b      	ldr	r3, [r7, #4]
2000ed5a:	685b      	ldr	r3, [r3, #4]
2000ed5c:	019a      	lsls	r2, r3, #6
2000ed5e:	687b      	ldr	r3, [r7, #4]
2000ed60:	689b      	ldr	r3, [r3, #8]
2000ed62:	071b      	lsls	r3, r3, #28
2000ed64:	4955      	ldr	r1, [pc, #340]	; (2000eebc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
2000ed66:	4313      	orrs	r3, r2
2000ed68:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
2000ed6c:	4b52      	ldr	r3, [pc, #328]	; (2000eeb8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
2000ed6e:	2201      	movs	r2, #1
2000ed70:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
2000ed72:	f7ff f8b3 	bl	2000dedc <HAL_GetTick>
2000ed76:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
2000ed78:	e008      	b.n	2000ed8c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
2000ed7a:	f7ff f8af 	bl	2000dedc <HAL_GetTick>
2000ed7e:	4602      	mov	r2, r0
2000ed80:	697b      	ldr	r3, [r7, #20]
2000ed82:	1ad3      	subs	r3, r2, r3
2000ed84:	2b02      	cmp	r3, #2
2000ed86:	d901      	bls.n	2000ed8c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
2000ed88:	2303      	movs	r3, #3
2000ed8a:	e090      	b.n	2000eeae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
2000ed8c:	4b4b      	ldr	r3, [pc, #300]	; (2000eebc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
2000ed8e:	681b      	ldr	r3, [r3, #0]
2000ed90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
2000ed94:	2b00      	cmp	r3, #0
2000ed96:	d0f0      	beq.n	2000ed7a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
2000ed98:	687b      	ldr	r3, [r7, #4]
2000ed9a:	681b      	ldr	r3, [r3, #0]
2000ed9c:	f003 0302 	and.w	r3, r3, #2
2000eda0:	2b00      	cmp	r3, #0
2000eda2:	f000 8083 	beq.w	2000eeac <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
2000eda6:	2300      	movs	r3, #0
2000eda8:	60fb      	str	r3, [r7, #12]
2000edaa:	4b44      	ldr	r3, [pc, #272]	; (2000eebc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
2000edac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2000edae:	4a43      	ldr	r2, [pc, #268]	; (2000eebc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
2000edb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
2000edb4:	6413      	str	r3, [r2, #64]	; 0x40
2000edb6:	4b41      	ldr	r3, [pc, #260]	; (2000eebc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
2000edb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2000edba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
2000edbe:	60fb      	str	r3, [r7, #12]
2000edc0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
2000edc2:	4b3f      	ldr	r3, [pc, #252]	; (2000eec0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
2000edc4:	681b      	ldr	r3, [r3, #0]
2000edc6:	4a3e      	ldr	r2, [pc, #248]	; (2000eec0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
2000edc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
2000edcc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
2000edce:	f7ff f885 	bl	2000dedc <HAL_GetTick>
2000edd2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
2000edd4:	e008      	b.n	2000ede8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
2000edd6:	f7ff f881 	bl	2000dedc <HAL_GetTick>
2000edda:	4602      	mov	r2, r0
2000eddc:	697b      	ldr	r3, [r7, #20]
2000edde:	1ad3      	subs	r3, r2, r3
2000ede0:	2b02      	cmp	r3, #2
2000ede2:	d901      	bls.n	2000ede8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
2000ede4:	2303      	movs	r3, #3
2000ede6:	e062      	b.n	2000eeae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
2000ede8:	4b35      	ldr	r3, [pc, #212]	; (2000eec0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
2000edea:	681b      	ldr	r3, [r3, #0]
2000edec:	f403 7380 	and.w	r3, r3, #256	; 0x100
2000edf0:	2b00      	cmp	r3, #0
2000edf2:	d0f0      	beq.n	2000edd6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
2000edf4:	4b31      	ldr	r3, [pc, #196]	; (2000eebc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
2000edf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2000edf8:	f403 7340 	and.w	r3, r3, #768	; 0x300
2000edfc:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
2000edfe:	693b      	ldr	r3, [r7, #16]
2000ee00:	2b00      	cmp	r3, #0
2000ee02:	d02f      	beq.n	2000ee64 <HAL_RCCEx_PeriphCLKConfig+0x160>
2000ee04:	687b      	ldr	r3, [r7, #4]
2000ee06:	68db      	ldr	r3, [r3, #12]
2000ee08:	f403 7340 	and.w	r3, r3, #768	; 0x300
2000ee0c:	693a      	ldr	r2, [r7, #16]
2000ee0e:	429a      	cmp	r2, r3
2000ee10:	d028      	beq.n	2000ee64 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
2000ee12:	4b2a      	ldr	r3, [pc, #168]	; (2000eebc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
2000ee14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2000ee16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
2000ee1a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
2000ee1c:	4b29      	ldr	r3, [pc, #164]	; (2000eec4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
2000ee1e:	2201      	movs	r2, #1
2000ee20:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
2000ee22:	4b28      	ldr	r3, [pc, #160]	; (2000eec4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
2000ee24:	2200      	movs	r2, #0
2000ee26:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
2000ee28:	4a24      	ldr	r2, [pc, #144]	; (2000eebc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
2000ee2a:	693b      	ldr	r3, [r7, #16]
2000ee2c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
2000ee2e:	4b23      	ldr	r3, [pc, #140]	; (2000eebc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
2000ee30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2000ee32:	f003 0301 	and.w	r3, r3, #1
2000ee36:	2b01      	cmp	r3, #1
2000ee38:	d114      	bne.n	2000ee64 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
2000ee3a:	f7ff f84f 	bl	2000dedc <HAL_GetTick>
2000ee3e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
2000ee40:	e00a      	b.n	2000ee58 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
2000ee42:	f7ff f84b 	bl	2000dedc <HAL_GetTick>
2000ee46:	4602      	mov	r2, r0
2000ee48:	697b      	ldr	r3, [r7, #20]
2000ee4a:	1ad3      	subs	r3, r2, r3
2000ee4c:	f241 3288 	movw	r2, #5000	; 0x1388
2000ee50:	4293      	cmp	r3, r2
2000ee52:	d901      	bls.n	2000ee58 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
2000ee54:	2303      	movs	r3, #3
2000ee56:	e02a      	b.n	2000eeae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
2000ee58:	4b18      	ldr	r3, [pc, #96]	; (2000eebc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
2000ee5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2000ee5c:	f003 0302 	and.w	r3, r3, #2
2000ee60:	2b00      	cmp	r3, #0
2000ee62:	d0ee      	beq.n	2000ee42 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
2000ee64:	687b      	ldr	r3, [r7, #4]
2000ee66:	68db      	ldr	r3, [r3, #12]
2000ee68:	f403 7340 	and.w	r3, r3, #768	; 0x300
2000ee6c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
2000ee70:	d10d      	bne.n	2000ee8e <HAL_RCCEx_PeriphCLKConfig+0x18a>
2000ee72:	4b12      	ldr	r3, [pc, #72]	; (2000eebc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
2000ee74:	689b      	ldr	r3, [r3, #8]
2000ee76:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
2000ee7a:	687b      	ldr	r3, [r7, #4]
2000ee7c:	68db      	ldr	r3, [r3, #12]
2000ee7e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
2000ee82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
2000ee86:	490d      	ldr	r1, [pc, #52]	; (2000eebc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
2000ee88:	4313      	orrs	r3, r2
2000ee8a:	608b      	str	r3, [r1, #8]
2000ee8c:	e005      	b.n	2000ee9a <HAL_RCCEx_PeriphCLKConfig+0x196>
2000ee8e:	4b0b      	ldr	r3, [pc, #44]	; (2000eebc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
2000ee90:	689b      	ldr	r3, [r3, #8]
2000ee92:	4a0a      	ldr	r2, [pc, #40]	; (2000eebc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
2000ee94:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
2000ee98:	6093      	str	r3, [r2, #8]
2000ee9a:	4b08      	ldr	r3, [pc, #32]	; (2000eebc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
2000ee9c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
2000ee9e:	687b      	ldr	r3, [r7, #4]
2000eea0:	68db      	ldr	r3, [r3, #12]
2000eea2:	f3c3 030b 	ubfx	r3, r3, #0, #12
2000eea6:	4905      	ldr	r1, [pc, #20]	; (2000eebc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
2000eea8:	4313      	orrs	r3, r2
2000eeaa:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
2000eeac:	2300      	movs	r3, #0
}
2000eeae:	4618      	mov	r0, r3
2000eeb0:	3718      	adds	r7, #24
2000eeb2:	46bd      	mov	sp, r7
2000eeb4:	bd80      	pop	{r7, pc}
2000eeb6:	bf00      	nop
2000eeb8:	42470068 	.word	0x42470068
2000eebc:	40023800 	.word	0x40023800
2000eec0:	40007000 	.word	0x40007000
2000eec4:	42470e40 	.word	0x42470e40

2000eec8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
2000eec8:	b580      	push	{r7, lr}
2000eeca:	b082      	sub	sp, #8
2000eecc:	af00      	add	r7, sp, #0
2000eece:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
2000eed0:	687b      	ldr	r3, [r7, #4]
2000eed2:	2b00      	cmp	r3, #0
2000eed4:	d101      	bne.n	2000eeda <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
2000eed6:	2301      	movs	r3, #1
2000eed8:	e083      	b.n	2000efe2 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
2000eeda:	687b      	ldr	r3, [r7, #4]
2000eedc:	7f5b      	ldrb	r3, [r3, #29]
2000eede:	b2db      	uxtb	r3, r3
2000eee0:	2b00      	cmp	r3, #0
2000eee2:	d105      	bne.n	2000eef0 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
2000eee4:	687b      	ldr	r3, [r7, #4]
2000eee6:	2200      	movs	r2, #0
2000eee8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
2000eeea:	6878      	ldr	r0, [r7, #4]
2000eeec:	f7fe fdac 	bl	2000da48 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
2000eef0:	687b      	ldr	r3, [r7, #4]
2000eef2:	2202      	movs	r2, #2
2000eef4:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
2000eef6:	687b      	ldr	r3, [r7, #4]
2000eef8:	681b      	ldr	r3, [r3, #0]
2000eefa:	22ca      	movs	r2, #202	; 0xca
2000eefc:	625a      	str	r2, [r3, #36]	; 0x24
2000eefe:	687b      	ldr	r3, [r7, #4]
2000ef00:	681b      	ldr	r3, [r3, #0]
2000ef02:	2253      	movs	r2, #83	; 0x53
2000ef04:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
2000ef06:	6878      	ldr	r0, [r7, #4]
2000ef08:	f000 faa8 	bl	2000f45c <RTC_EnterInitMode>
2000ef0c:	4603      	mov	r3, r0
2000ef0e:	2b00      	cmp	r3, #0
2000ef10:	d008      	beq.n	2000ef24 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
2000ef12:	687b      	ldr	r3, [r7, #4]
2000ef14:	681b      	ldr	r3, [r3, #0]
2000ef16:	22ff      	movs	r2, #255	; 0xff
2000ef18:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
2000ef1a:	687b      	ldr	r3, [r7, #4]
2000ef1c:	2204      	movs	r2, #4
2000ef1e:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
2000ef20:	2301      	movs	r3, #1
2000ef22:	e05e      	b.n	2000efe2 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
2000ef24:	687b      	ldr	r3, [r7, #4]
2000ef26:	681b      	ldr	r3, [r3, #0]
2000ef28:	689b      	ldr	r3, [r3, #8]
2000ef2a:	687a      	ldr	r2, [r7, #4]
2000ef2c:	6812      	ldr	r2, [r2, #0]
2000ef2e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
2000ef32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
2000ef36:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
2000ef38:	687b      	ldr	r3, [r7, #4]
2000ef3a:	681b      	ldr	r3, [r3, #0]
2000ef3c:	6899      	ldr	r1, [r3, #8]
2000ef3e:	687b      	ldr	r3, [r7, #4]
2000ef40:	685a      	ldr	r2, [r3, #4]
2000ef42:	687b      	ldr	r3, [r7, #4]
2000ef44:	691b      	ldr	r3, [r3, #16]
2000ef46:	431a      	orrs	r2, r3
2000ef48:	687b      	ldr	r3, [r7, #4]
2000ef4a:	695b      	ldr	r3, [r3, #20]
2000ef4c:	431a      	orrs	r2, r3
2000ef4e:	687b      	ldr	r3, [r7, #4]
2000ef50:	681b      	ldr	r3, [r3, #0]
2000ef52:	430a      	orrs	r2, r1
2000ef54:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
2000ef56:	687b      	ldr	r3, [r7, #4]
2000ef58:	681b      	ldr	r3, [r3, #0]
2000ef5a:	687a      	ldr	r2, [r7, #4]
2000ef5c:	68d2      	ldr	r2, [r2, #12]
2000ef5e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
2000ef60:	687b      	ldr	r3, [r7, #4]
2000ef62:	681b      	ldr	r3, [r3, #0]
2000ef64:	6919      	ldr	r1, [r3, #16]
2000ef66:	687b      	ldr	r3, [r7, #4]
2000ef68:	689b      	ldr	r3, [r3, #8]
2000ef6a:	041a      	lsls	r2, r3, #16
2000ef6c:	687b      	ldr	r3, [r7, #4]
2000ef6e:	681b      	ldr	r3, [r3, #0]
2000ef70:	430a      	orrs	r2, r1
2000ef72:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
2000ef74:	687b      	ldr	r3, [r7, #4]
2000ef76:	681b      	ldr	r3, [r3, #0]
2000ef78:	68da      	ldr	r2, [r3, #12]
2000ef7a:	687b      	ldr	r3, [r7, #4]
2000ef7c:	681b      	ldr	r3, [r3, #0]
2000ef7e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
2000ef82:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
2000ef84:	687b      	ldr	r3, [r7, #4]
2000ef86:	681b      	ldr	r3, [r3, #0]
2000ef88:	689b      	ldr	r3, [r3, #8]
2000ef8a:	f003 0320 	and.w	r3, r3, #32
2000ef8e:	2b00      	cmp	r3, #0
2000ef90:	d10e      	bne.n	2000efb0 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
2000ef92:	6878      	ldr	r0, [r7, #4]
2000ef94:	f000 fa3a 	bl	2000f40c <HAL_RTC_WaitForSynchro>
2000ef98:	4603      	mov	r3, r0
2000ef9a:	2b00      	cmp	r3, #0
2000ef9c:	d008      	beq.n	2000efb0 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
2000ef9e:	687b      	ldr	r3, [r7, #4]
2000efa0:	681b      	ldr	r3, [r3, #0]
2000efa2:	22ff      	movs	r2, #255	; 0xff
2000efa4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
2000efa6:	687b      	ldr	r3, [r7, #4]
2000efa8:	2204      	movs	r2, #4
2000efaa:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
2000efac:	2301      	movs	r3, #1
2000efae:	e018      	b.n	2000efe2 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
2000efb0:	687b      	ldr	r3, [r7, #4]
2000efb2:	681b      	ldr	r3, [r3, #0]
2000efb4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
2000efb6:	687b      	ldr	r3, [r7, #4]
2000efb8:	681b      	ldr	r3, [r3, #0]
2000efba:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
2000efbe:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
2000efc0:	687b      	ldr	r3, [r7, #4]
2000efc2:	681b      	ldr	r3, [r3, #0]
2000efc4:	6c19      	ldr	r1, [r3, #64]	; 0x40
2000efc6:	687b      	ldr	r3, [r7, #4]
2000efc8:	699a      	ldr	r2, [r3, #24]
2000efca:	687b      	ldr	r3, [r7, #4]
2000efcc:	681b      	ldr	r3, [r3, #0]
2000efce:	430a      	orrs	r2, r1
2000efd0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
2000efd2:	687b      	ldr	r3, [r7, #4]
2000efd4:	681b      	ldr	r3, [r3, #0]
2000efd6:	22ff      	movs	r2, #255	; 0xff
2000efd8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
2000efda:	687b      	ldr	r3, [r7, #4]
2000efdc:	2201      	movs	r2, #1
2000efde:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
2000efe0:	2300      	movs	r3, #0
  }
}
2000efe2:	4618      	mov	r0, r3
2000efe4:	3708      	adds	r7, #8
2000efe6:	46bd      	mov	sp, r7
2000efe8:	bd80      	pop	{r7, pc}

2000efea <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
2000efea:	b590      	push	{r4, r7, lr}
2000efec:	b087      	sub	sp, #28
2000efee:	af00      	add	r7, sp, #0
2000eff0:	60f8      	str	r0, [r7, #12]
2000eff2:	60b9      	str	r1, [r7, #8]
2000eff4:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
2000eff6:	2300      	movs	r3, #0
2000eff8:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
2000effa:	68fb      	ldr	r3, [r7, #12]
2000effc:	7f1b      	ldrb	r3, [r3, #28]
2000effe:	2b01      	cmp	r3, #1
2000f000:	d101      	bne.n	2000f006 <HAL_RTC_SetTime+0x1c>
2000f002:	2302      	movs	r3, #2
2000f004:	e0aa      	b.n	2000f15c <HAL_RTC_SetTime+0x172>
2000f006:	68fb      	ldr	r3, [r7, #12]
2000f008:	2201      	movs	r2, #1
2000f00a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
2000f00c:	68fb      	ldr	r3, [r7, #12]
2000f00e:	2202      	movs	r2, #2
2000f010:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
2000f012:	687b      	ldr	r3, [r7, #4]
2000f014:	2b00      	cmp	r3, #0
2000f016:	d126      	bne.n	2000f066 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
2000f018:	68fb      	ldr	r3, [r7, #12]
2000f01a:	681b      	ldr	r3, [r3, #0]
2000f01c:	689b      	ldr	r3, [r3, #8]
2000f01e:	f003 0340 	and.w	r3, r3, #64	; 0x40
2000f022:	2b00      	cmp	r3, #0
2000f024:	d102      	bne.n	2000f02c <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
2000f026:	68bb      	ldr	r3, [r7, #8]
2000f028:	2200      	movs	r2, #0
2000f02a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
2000f02c:	68bb      	ldr	r3, [r7, #8]
2000f02e:	781b      	ldrb	r3, [r3, #0]
2000f030:	4618      	mov	r0, r3
2000f032:	f000 fa3f 	bl	2000f4b4 <RTC_ByteToBcd2>
2000f036:	4603      	mov	r3, r0
2000f038:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
2000f03a:	68bb      	ldr	r3, [r7, #8]
2000f03c:	785b      	ldrb	r3, [r3, #1]
2000f03e:	4618      	mov	r0, r3
2000f040:	f000 fa38 	bl	2000f4b4 <RTC_ByteToBcd2>
2000f044:	4603      	mov	r3, r0
2000f046:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
2000f048:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
2000f04a:	68bb      	ldr	r3, [r7, #8]
2000f04c:	789b      	ldrb	r3, [r3, #2]
2000f04e:	4618      	mov	r0, r3
2000f050:	f000 fa30 	bl	2000f4b4 <RTC_ByteToBcd2>
2000f054:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
2000f056:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
2000f05a:	68bb      	ldr	r3, [r7, #8]
2000f05c:	78db      	ldrb	r3, [r3, #3]
2000f05e:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
2000f060:	4313      	orrs	r3, r2
2000f062:	617b      	str	r3, [r7, #20]
2000f064:	e018      	b.n	2000f098 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
2000f066:	68fb      	ldr	r3, [r7, #12]
2000f068:	681b      	ldr	r3, [r3, #0]
2000f06a:	689b      	ldr	r3, [r3, #8]
2000f06c:	f003 0340 	and.w	r3, r3, #64	; 0x40
2000f070:	2b00      	cmp	r3, #0
2000f072:	d102      	bne.n	2000f07a <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
2000f074:	68bb      	ldr	r3, [r7, #8]
2000f076:	2200      	movs	r2, #0
2000f078:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
2000f07a:	68bb      	ldr	r3, [r7, #8]
2000f07c:	781b      	ldrb	r3, [r3, #0]
2000f07e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
2000f080:	68bb      	ldr	r3, [r7, #8]
2000f082:	785b      	ldrb	r3, [r3, #1]
2000f084:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
2000f086:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
2000f088:	68ba      	ldr	r2, [r7, #8]
2000f08a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
2000f08c:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
2000f08e:	68bb      	ldr	r3, [r7, #8]
2000f090:	78db      	ldrb	r3, [r3, #3]
2000f092:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
2000f094:	4313      	orrs	r3, r2
2000f096:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
2000f098:	68fb      	ldr	r3, [r7, #12]
2000f09a:	681b      	ldr	r3, [r3, #0]
2000f09c:	22ca      	movs	r2, #202	; 0xca
2000f09e:	625a      	str	r2, [r3, #36]	; 0x24
2000f0a0:	68fb      	ldr	r3, [r7, #12]
2000f0a2:	681b      	ldr	r3, [r3, #0]
2000f0a4:	2253      	movs	r2, #83	; 0x53
2000f0a6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
2000f0a8:	68f8      	ldr	r0, [r7, #12]
2000f0aa:	f000 f9d7 	bl	2000f45c <RTC_EnterInitMode>
2000f0ae:	4603      	mov	r3, r0
2000f0b0:	2b00      	cmp	r3, #0
2000f0b2:	d00b      	beq.n	2000f0cc <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
2000f0b4:	68fb      	ldr	r3, [r7, #12]
2000f0b6:	681b      	ldr	r3, [r3, #0]
2000f0b8:	22ff      	movs	r2, #255	; 0xff
2000f0ba:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
2000f0bc:	68fb      	ldr	r3, [r7, #12]
2000f0be:	2204      	movs	r2, #4
2000f0c0:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
2000f0c2:	68fb      	ldr	r3, [r7, #12]
2000f0c4:	2200      	movs	r2, #0
2000f0c6:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
2000f0c8:	2301      	movs	r3, #1
2000f0ca:	e047      	b.n	2000f15c <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
2000f0cc:	68fb      	ldr	r3, [r7, #12]
2000f0ce:	681a      	ldr	r2, [r3, #0]
2000f0d0:	697b      	ldr	r3, [r7, #20]
2000f0d2:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
2000f0d6:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
2000f0da:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
2000f0dc:	68fb      	ldr	r3, [r7, #12]
2000f0de:	681b      	ldr	r3, [r3, #0]
2000f0e0:	689a      	ldr	r2, [r3, #8]
2000f0e2:	68fb      	ldr	r3, [r7, #12]
2000f0e4:	681b      	ldr	r3, [r3, #0]
2000f0e6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
2000f0ea:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
2000f0ec:	68fb      	ldr	r3, [r7, #12]
2000f0ee:	681b      	ldr	r3, [r3, #0]
2000f0f0:	6899      	ldr	r1, [r3, #8]
2000f0f2:	68bb      	ldr	r3, [r7, #8]
2000f0f4:	68da      	ldr	r2, [r3, #12]
2000f0f6:	68bb      	ldr	r3, [r7, #8]
2000f0f8:	691b      	ldr	r3, [r3, #16]
2000f0fa:	431a      	orrs	r2, r3
2000f0fc:	68fb      	ldr	r3, [r7, #12]
2000f0fe:	681b      	ldr	r3, [r3, #0]
2000f100:	430a      	orrs	r2, r1
2000f102:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
2000f104:	68fb      	ldr	r3, [r7, #12]
2000f106:	681b      	ldr	r3, [r3, #0]
2000f108:	68da      	ldr	r2, [r3, #12]
2000f10a:	68fb      	ldr	r3, [r7, #12]
2000f10c:	681b      	ldr	r3, [r3, #0]
2000f10e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
2000f112:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
2000f114:	68fb      	ldr	r3, [r7, #12]
2000f116:	681b      	ldr	r3, [r3, #0]
2000f118:	689b      	ldr	r3, [r3, #8]
2000f11a:	f003 0320 	and.w	r3, r3, #32
2000f11e:	2b00      	cmp	r3, #0
2000f120:	d111      	bne.n	2000f146 <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
2000f122:	68f8      	ldr	r0, [r7, #12]
2000f124:	f000 f972 	bl	2000f40c <HAL_RTC_WaitForSynchro>
2000f128:	4603      	mov	r3, r0
2000f12a:	2b00      	cmp	r3, #0
2000f12c:	d00b      	beq.n	2000f146 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
2000f12e:	68fb      	ldr	r3, [r7, #12]
2000f130:	681b      	ldr	r3, [r3, #0]
2000f132:	22ff      	movs	r2, #255	; 0xff
2000f134:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
2000f136:	68fb      	ldr	r3, [r7, #12]
2000f138:	2204      	movs	r2, #4
2000f13a:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
2000f13c:	68fb      	ldr	r3, [r7, #12]
2000f13e:	2200      	movs	r2, #0
2000f140:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
2000f142:	2301      	movs	r3, #1
2000f144:	e00a      	b.n	2000f15c <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
2000f146:	68fb      	ldr	r3, [r7, #12]
2000f148:	681b      	ldr	r3, [r3, #0]
2000f14a:	22ff      	movs	r2, #255	; 0xff
2000f14c:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
2000f14e:	68fb      	ldr	r3, [r7, #12]
2000f150:	2201      	movs	r2, #1
2000f152:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
2000f154:	68fb      	ldr	r3, [r7, #12]
2000f156:	2200      	movs	r2, #0
2000f158:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
2000f15a:	2300      	movs	r3, #0
  }
}
2000f15c:	4618      	mov	r0, r3
2000f15e:	371c      	adds	r7, #28
2000f160:	46bd      	mov	sp, r7
2000f162:	bd90      	pop	{r4, r7, pc}

2000f164 <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
2000f164:	b580      	push	{r7, lr}
2000f166:	b086      	sub	sp, #24
2000f168:	af00      	add	r7, sp, #0
2000f16a:	60f8      	str	r0, [r7, #12]
2000f16c:	60b9      	str	r1, [r7, #8]
2000f16e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
2000f170:	2300      	movs	r3, #0
2000f172:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
2000f174:	68fb      	ldr	r3, [r7, #12]
2000f176:	681b      	ldr	r3, [r3, #0]
2000f178:	6a9a      	ldr	r2, [r3, #40]	; 0x28
2000f17a:	68bb      	ldr	r3, [r7, #8]
2000f17c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
2000f17e:	68fb      	ldr	r3, [r7, #12]
2000f180:	681b      	ldr	r3, [r3, #0]
2000f182:	691b      	ldr	r3, [r3, #16]
2000f184:	f3c3 020e 	ubfx	r2, r3, #0, #15
2000f188:	68bb      	ldr	r3, [r7, #8]
2000f18a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
2000f18c:	68fb      	ldr	r3, [r7, #12]
2000f18e:	681b      	ldr	r3, [r3, #0]
2000f190:	681b      	ldr	r3, [r3, #0]
2000f192:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
2000f196:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
2000f19a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
2000f19c:	697b      	ldr	r3, [r7, #20]
2000f19e:	0c1b      	lsrs	r3, r3, #16
2000f1a0:	b2db      	uxtb	r3, r3
2000f1a2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
2000f1a6:	b2da      	uxtb	r2, r3
2000f1a8:	68bb      	ldr	r3, [r7, #8]
2000f1aa:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
2000f1ac:	697b      	ldr	r3, [r7, #20]
2000f1ae:	0a1b      	lsrs	r3, r3, #8
2000f1b0:	b2db      	uxtb	r3, r3
2000f1b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
2000f1b6:	b2da      	uxtb	r2, r3
2000f1b8:	68bb      	ldr	r3, [r7, #8]
2000f1ba:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
2000f1bc:	697b      	ldr	r3, [r7, #20]
2000f1be:	b2db      	uxtb	r3, r3
2000f1c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
2000f1c4:	b2da      	uxtb	r2, r3
2000f1c6:	68bb      	ldr	r3, [r7, #8]
2000f1c8:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
2000f1ca:	697b      	ldr	r3, [r7, #20]
2000f1cc:	0c1b      	lsrs	r3, r3, #16
2000f1ce:	b2db      	uxtb	r3, r3
2000f1d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
2000f1d4:	b2da      	uxtb	r2, r3
2000f1d6:	68bb      	ldr	r3, [r7, #8]
2000f1d8:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
2000f1da:	687b      	ldr	r3, [r7, #4]
2000f1dc:	2b00      	cmp	r3, #0
2000f1de:	d11a      	bne.n	2000f216 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
2000f1e0:	68bb      	ldr	r3, [r7, #8]
2000f1e2:	781b      	ldrb	r3, [r3, #0]
2000f1e4:	4618      	mov	r0, r3
2000f1e6:	f000 f983 	bl	2000f4f0 <RTC_Bcd2ToByte>
2000f1ea:	4603      	mov	r3, r0
2000f1ec:	461a      	mov	r2, r3
2000f1ee:	68bb      	ldr	r3, [r7, #8]
2000f1f0:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
2000f1f2:	68bb      	ldr	r3, [r7, #8]
2000f1f4:	785b      	ldrb	r3, [r3, #1]
2000f1f6:	4618      	mov	r0, r3
2000f1f8:	f000 f97a 	bl	2000f4f0 <RTC_Bcd2ToByte>
2000f1fc:	4603      	mov	r3, r0
2000f1fe:	461a      	mov	r2, r3
2000f200:	68bb      	ldr	r3, [r7, #8]
2000f202:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
2000f204:	68bb      	ldr	r3, [r7, #8]
2000f206:	789b      	ldrb	r3, [r3, #2]
2000f208:	4618      	mov	r0, r3
2000f20a:	f000 f971 	bl	2000f4f0 <RTC_Bcd2ToByte>
2000f20e:	4603      	mov	r3, r0
2000f210:	461a      	mov	r2, r3
2000f212:	68bb      	ldr	r3, [r7, #8]
2000f214:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
2000f216:	2300      	movs	r3, #0
}
2000f218:	4618      	mov	r0, r3
2000f21a:	3718      	adds	r7, #24
2000f21c:	46bd      	mov	sp, r7
2000f21e:	bd80      	pop	{r7, pc}

2000f220 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
2000f220:	b590      	push	{r4, r7, lr}
2000f222:	b087      	sub	sp, #28
2000f224:	af00      	add	r7, sp, #0
2000f226:	60f8      	str	r0, [r7, #12]
2000f228:	60b9      	str	r1, [r7, #8]
2000f22a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
2000f22c:	2300      	movs	r3, #0
2000f22e:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
2000f230:	68fb      	ldr	r3, [r7, #12]
2000f232:	7f1b      	ldrb	r3, [r3, #28]
2000f234:	2b01      	cmp	r3, #1
2000f236:	d101      	bne.n	2000f23c <HAL_RTC_SetDate+0x1c>
2000f238:	2302      	movs	r3, #2
2000f23a:	e094      	b.n	2000f366 <HAL_RTC_SetDate+0x146>
2000f23c:	68fb      	ldr	r3, [r7, #12]
2000f23e:	2201      	movs	r2, #1
2000f240:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
2000f242:	68fb      	ldr	r3, [r7, #12]
2000f244:	2202      	movs	r2, #2
2000f246:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
2000f248:	687b      	ldr	r3, [r7, #4]
2000f24a:	2b00      	cmp	r3, #0
2000f24c:	d10e      	bne.n	2000f26c <HAL_RTC_SetDate+0x4c>
2000f24e:	68bb      	ldr	r3, [r7, #8]
2000f250:	785b      	ldrb	r3, [r3, #1]
2000f252:	f003 0310 	and.w	r3, r3, #16
2000f256:	2b00      	cmp	r3, #0
2000f258:	d008      	beq.n	2000f26c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
2000f25a:	68bb      	ldr	r3, [r7, #8]
2000f25c:	785b      	ldrb	r3, [r3, #1]
2000f25e:	f023 0310 	bic.w	r3, r3, #16
2000f262:	b2db      	uxtb	r3, r3
2000f264:	330a      	adds	r3, #10
2000f266:	b2da      	uxtb	r2, r3
2000f268:	68bb      	ldr	r3, [r7, #8]
2000f26a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
2000f26c:	687b      	ldr	r3, [r7, #4]
2000f26e:	2b00      	cmp	r3, #0
2000f270:	d11c      	bne.n	2000f2ac <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
2000f272:	68bb      	ldr	r3, [r7, #8]
2000f274:	78db      	ldrb	r3, [r3, #3]
2000f276:	4618      	mov	r0, r3
2000f278:	f000 f91c 	bl	2000f4b4 <RTC_ByteToBcd2>
2000f27c:	4603      	mov	r3, r0
2000f27e:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
2000f280:	68bb      	ldr	r3, [r7, #8]
2000f282:	785b      	ldrb	r3, [r3, #1]
2000f284:	4618      	mov	r0, r3
2000f286:	f000 f915 	bl	2000f4b4 <RTC_ByteToBcd2>
2000f28a:	4603      	mov	r3, r0
2000f28c:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
2000f28e:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
2000f290:	68bb      	ldr	r3, [r7, #8]
2000f292:	789b      	ldrb	r3, [r3, #2]
2000f294:	4618      	mov	r0, r3
2000f296:	f000 f90d 	bl	2000f4b4 <RTC_ByteToBcd2>
2000f29a:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
2000f29c:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
2000f2a0:	68bb      	ldr	r3, [r7, #8]
2000f2a2:	781b      	ldrb	r3, [r3, #0]
2000f2a4:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
2000f2a6:	4313      	orrs	r3, r2
2000f2a8:	617b      	str	r3, [r7, #20]
2000f2aa:	e00e      	b.n	2000f2ca <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
2000f2ac:	68bb      	ldr	r3, [r7, #8]
2000f2ae:	78db      	ldrb	r3, [r3, #3]
2000f2b0:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
2000f2b2:	68bb      	ldr	r3, [r7, #8]
2000f2b4:	785b      	ldrb	r3, [r3, #1]
2000f2b6:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
2000f2b8:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
2000f2ba:	68ba      	ldr	r2, [r7, #8]
2000f2bc:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
2000f2be:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
2000f2c0:	68bb      	ldr	r3, [r7, #8]
2000f2c2:	781b      	ldrb	r3, [r3, #0]
2000f2c4:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
2000f2c6:	4313      	orrs	r3, r2
2000f2c8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
2000f2ca:	68fb      	ldr	r3, [r7, #12]
2000f2cc:	681b      	ldr	r3, [r3, #0]
2000f2ce:	22ca      	movs	r2, #202	; 0xca
2000f2d0:	625a      	str	r2, [r3, #36]	; 0x24
2000f2d2:	68fb      	ldr	r3, [r7, #12]
2000f2d4:	681b      	ldr	r3, [r3, #0]
2000f2d6:	2253      	movs	r2, #83	; 0x53
2000f2d8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
2000f2da:	68f8      	ldr	r0, [r7, #12]
2000f2dc:	f000 f8be 	bl	2000f45c <RTC_EnterInitMode>
2000f2e0:	4603      	mov	r3, r0
2000f2e2:	2b00      	cmp	r3, #0
2000f2e4:	d00b      	beq.n	2000f2fe <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
2000f2e6:	68fb      	ldr	r3, [r7, #12]
2000f2e8:	681b      	ldr	r3, [r3, #0]
2000f2ea:	22ff      	movs	r2, #255	; 0xff
2000f2ec:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
2000f2ee:	68fb      	ldr	r3, [r7, #12]
2000f2f0:	2204      	movs	r2, #4
2000f2f2:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
2000f2f4:	68fb      	ldr	r3, [r7, #12]
2000f2f6:	2200      	movs	r2, #0
2000f2f8:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
2000f2fa:	2301      	movs	r3, #1
2000f2fc:	e033      	b.n	2000f366 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
2000f2fe:	68fb      	ldr	r3, [r7, #12]
2000f300:	681a      	ldr	r2, [r3, #0]
2000f302:	697b      	ldr	r3, [r7, #20]
2000f304:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
2000f308:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
2000f30c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
2000f30e:	68fb      	ldr	r3, [r7, #12]
2000f310:	681b      	ldr	r3, [r3, #0]
2000f312:	68da      	ldr	r2, [r3, #12]
2000f314:	68fb      	ldr	r3, [r7, #12]
2000f316:	681b      	ldr	r3, [r3, #0]
2000f318:	f022 0280 	bic.w	r2, r2, #128	; 0x80
2000f31c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
2000f31e:	68fb      	ldr	r3, [r7, #12]
2000f320:	681b      	ldr	r3, [r3, #0]
2000f322:	689b      	ldr	r3, [r3, #8]
2000f324:	f003 0320 	and.w	r3, r3, #32
2000f328:	2b00      	cmp	r3, #0
2000f32a:	d111      	bne.n	2000f350 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
2000f32c:	68f8      	ldr	r0, [r7, #12]
2000f32e:	f000 f86d 	bl	2000f40c <HAL_RTC_WaitForSynchro>
2000f332:	4603      	mov	r3, r0
2000f334:	2b00      	cmp	r3, #0
2000f336:	d00b      	beq.n	2000f350 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
2000f338:	68fb      	ldr	r3, [r7, #12]
2000f33a:	681b      	ldr	r3, [r3, #0]
2000f33c:	22ff      	movs	r2, #255	; 0xff
2000f33e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
2000f340:	68fb      	ldr	r3, [r7, #12]
2000f342:	2204      	movs	r2, #4
2000f344:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
2000f346:	68fb      	ldr	r3, [r7, #12]
2000f348:	2200      	movs	r2, #0
2000f34a:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
2000f34c:	2301      	movs	r3, #1
2000f34e:	e00a      	b.n	2000f366 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
2000f350:	68fb      	ldr	r3, [r7, #12]
2000f352:	681b      	ldr	r3, [r3, #0]
2000f354:	22ff      	movs	r2, #255	; 0xff
2000f356:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
2000f358:	68fb      	ldr	r3, [r7, #12]
2000f35a:	2201      	movs	r2, #1
2000f35c:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
2000f35e:	68fb      	ldr	r3, [r7, #12]
2000f360:	2200      	movs	r2, #0
2000f362:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
2000f364:	2300      	movs	r3, #0
  }
}
2000f366:	4618      	mov	r0, r3
2000f368:	371c      	adds	r7, #28
2000f36a:	46bd      	mov	sp, r7
2000f36c:	bd90      	pop	{r4, r7, pc}

2000f36e <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
2000f36e:	b580      	push	{r7, lr}
2000f370:	b086      	sub	sp, #24
2000f372:	af00      	add	r7, sp, #0
2000f374:	60f8      	str	r0, [r7, #12]
2000f376:	60b9      	str	r1, [r7, #8]
2000f378:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
2000f37a:	2300      	movs	r3, #0
2000f37c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
2000f37e:	68fb      	ldr	r3, [r7, #12]
2000f380:	681b      	ldr	r3, [r3, #0]
2000f382:	685b      	ldr	r3, [r3, #4]
2000f384:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
2000f388:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
2000f38c:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
2000f38e:	697b      	ldr	r3, [r7, #20]
2000f390:	0c1b      	lsrs	r3, r3, #16
2000f392:	b2da      	uxtb	r2, r3
2000f394:	68bb      	ldr	r3, [r7, #8]
2000f396:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
2000f398:	697b      	ldr	r3, [r7, #20]
2000f39a:	0a1b      	lsrs	r3, r3, #8
2000f39c:	b2db      	uxtb	r3, r3
2000f39e:	f003 031f 	and.w	r3, r3, #31
2000f3a2:	b2da      	uxtb	r2, r3
2000f3a4:	68bb      	ldr	r3, [r7, #8]
2000f3a6:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
2000f3a8:	697b      	ldr	r3, [r7, #20]
2000f3aa:	b2db      	uxtb	r3, r3
2000f3ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
2000f3b0:	b2da      	uxtb	r2, r3
2000f3b2:	68bb      	ldr	r3, [r7, #8]
2000f3b4:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
2000f3b6:	697b      	ldr	r3, [r7, #20]
2000f3b8:	0b5b      	lsrs	r3, r3, #13
2000f3ba:	b2db      	uxtb	r3, r3
2000f3bc:	f003 0307 	and.w	r3, r3, #7
2000f3c0:	b2da      	uxtb	r2, r3
2000f3c2:	68bb      	ldr	r3, [r7, #8]
2000f3c4:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
2000f3c6:	687b      	ldr	r3, [r7, #4]
2000f3c8:	2b00      	cmp	r3, #0
2000f3ca:	d11a      	bne.n	2000f402 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
2000f3cc:	68bb      	ldr	r3, [r7, #8]
2000f3ce:	78db      	ldrb	r3, [r3, #3]
2000f3d0:	4618      	mov	r0, r3
2000f3d2:	f000 f88d 	bl	2000f4f0 <RTC_Bcd2ToByte>
2000f3d6:	4603      	mov	r3, r0
2000f3d8:	461a      	mov	r2, r3
2000f3da:	68bb      	ldr	r3, [r7, #8]
2000f3dc:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
2000f3de:	68bb      	ldr	r3, [r7, #8]
2000f3e0:	785b      	ldrb	r3, [r3, #1]
2000f3e2:	4618      	mov	r0, r3
2000f3e4:	f000 f884 	bl	2000f4f0 <RTC_Bcd2ToByte>
2000f3e8:	4603      	mov	r3, r0
2000f3ea:	461a      	mov	r2, r3
2000f3ec:	68bb      	ldr	r3, [r7, #8]
2000f3ee:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
2000f3f0:	68bb      	ldr	r3, [r7, #8]
2000f3f2:	789b      	ldrb	r3, [r3, #2]
2000f3f4:	4618      	mov	r0, r3
2000f3f6:	f000 f87b 	bl	2000f4f0 <RTC_Bcd2ToByte>
2000f3fa:	4603      	mov	r3, r0
2000f3fc:	461a      	mov	r2, r3
2000f3fe:	68bb      	ldr	r3, [r7, #8]
2000f400:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
2000f402:	2300      	movs	r3, #0
}
2000f404:	4618      	mov	r0, r3
2000f406:	3718      	adds	r7, #24
2000f408:	46bd      	mov	sp, r7
2000f40a:	bd80      	pop	{r7, pc}

2000f40c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
2000f40c:	b580      	push	{r7, lr}
2000f40e:	b084      	sub	sp, #16
2000f410:	af00      	add	r7, sp, #0
2000f412:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
2000f414:	2300      	movs	r3, #0
2000f416:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
2000f418:	687b      	ldr	r3, [r7, #4]
2000f41a:	681b      	ldr	r3, [r3, #0]
2000f41c:	68da      	ldr	r2, [r3, #12]
2000f41e:	687b      	ldr	r3, [r7, #4]
2000f420:	681b      	ldr	r3, [r3, #0]
2000f422:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
2000f426:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
2000f428:	f7fe fd58 	bl	2000dedc <HAL_GetTick>
2000f42c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
2000f42e:	e009      	b.n	2000f444 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
2000f430:	f7fe fd54 	bl	2000dedc <HAL_GetTick>
2000f434:	4602      	mov	r2, r0
2000f436:	68fb      	ldr	r3, [r7, #12]
2000f438:	1ad3      	subs	r3, r2, r3
2000f43a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
2000f43e:	d901      	bls.n	2000f444 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
2000f440:	2303      	movs	r3, #3
2000f442:	e007      	b.n	2000f454 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
2000f444:	687b      	ldr	r3, [r7, #4]
2000f446:	681b      	ldr	r3, [r3, #0]
2000f448:	68db      	ldr	r3, [r3, #12]
2000f44a:	f003 0320 	and.w	r3, r3, #32
2000f44e:	2b00      	cmp	r3, #0
2000f450:	d0ee      	beq.n	2000f430 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
2000f452:	2300      	movs	r3, #0
}
2000f454:	4618      	mov	r0, r3
2000f456:	3710      	adds	r7, #16
2000f458:	46bd      	mov	sp, r7
2000f45a:	bd80      	pop	{r7, pc}

2000f45c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
2000f45c:	b580      	push	{r7, lr}
2000f45e:	b084      	sub	sp, #16
2000f460:	af00      	add	r7, sp, #0
2000f462:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
2000f464:	2300      	movs	r3, #0
2000f466:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
2000f468:	687b      	ldr	r3, [r7, #4]
2000f46a:	681b      	ldr	r3, [r3, #0]
2000f46c:	68db      	ldr	r3, [r3, #12]
2000f46e:	f003 0340 	and.w	r3, r3, #64	; 0x40
2000f472:	2b00      	cmp	r3, #0
2000f474:	d119      	bne.n	2000f4aa <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
2000f476:	687b      	ldr	r3, [r7, #4]
2000f478:	681b      	ldr	r3, [r3, #0]
2000f47a:	f04f 32ff 	mov.w	r2, #4294967295
2000f47e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
2000f480:	f7fe fd2c 	bl	2000dedc <HAL_GetTick>
2000f484:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
2000f486:	e009      	b.n	2000f49c <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
2000f488:	f7fe fd28 	bl	2000dedc <HAL_GetTick>
2000f48c:	4602      	mov	r2, r0
2000f48e:	68fb      	ldr	r3, [r7, #12]
2000f490:	1ad3      	subs	r3, r2, r3
2000f492:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
2000f496:	d901      	bls.n	2000f49c <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
2000f498:	2303      	movs	r3, #3
2000f49a:	e007      	b.n	2000f4ac <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
2000f49c:	687b      	ldr	r3, [r7, #4]
2000f49e:	681b      	ldr	r3, [r3, #0]
2000f4a0:	68db      	ldr	r3, [r3, #12]
2000f4a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
2000f4a6:	2b00      	cmp	r3, #0
2000f4a8:	d0ee      	beq.n	2000f488 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
2000f4aa:	2300      	movs	r3, #0
}
2000f4ac:	4618      	mov	r0, r3
2000f4ae:	3710      	adds	r7, #16
2000f4b0:	46bd      	mov	sp, r7
2000f4b2:	bd80      	pop	{r7, pc}

2000f4b4 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
2000f4b4:	b480      	push	{r7}
2000f4b6:	b085      	sub	sp, #20
2000f4b8:	af00      	add	r7, sp, #0
2000f4ba:	4603      	mov	r3, r0
2000f4bc:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
2000f4be:	2300      	movs	r3, #0
2000f4c0:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
2000f4c2:	e005      	b.n	2000f4d0 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
2000f4c4:	68fb      	ldr	r3, [r7, #12]
2000f4c6:	3301      	adds	r3, #1
2000f4c8:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
2000f4ca:	79fb      	ldrb	r3, [r7, #7]
2000f4cc:	3b0a      	subs	r3, #10
2000f4ce:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
2000f4d0:	79fb      	ldrb	r3, [r7, #7]
2000f4d2:	2b09      	cmp	r3, #9
2000f4d4:	d8f6      	bhi.n	2000f4c4 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
2000f4d6:	68fb      	ldr	r3, [r7, #12]
2000f4d8:	b2db      	uxtb	r3, r3
2000f4da:	011b      	lsls	r3, r3, #4
2000f4dc:	b2da      	uxtb	r2, r3
2000f4de:	79fb      	ldrb	r3, [r7, #7]
2000f4e0:	4313      	orrs	r3, r2
2000f4e2:	b2db      	uxtb	r3, r3
}
2000f4e4:	4618      	mov	r0, r3
2000f4e6:	3714      	adds	r7, #20
2000f4e8:	46bd      	mov	sp, r7
2000f4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
2000f4ee:	4770      	bx	lr

2000f4f0 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
2000f4f0:	b480      	push	{r7}
2000f4f2:	b085      	sub	sp, #20
2000f4f4:	af00      	add	r7, sp, #0
2000f4f6:	4603      	mov	r3, r0
2000f4f8:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
2000f4fa:	2300      	movs	r3, #0
2000f4fc:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
2000f4fe:	79fb      	ldrb	r3, [r7, #7]
2000f500:	091b      	lsrs	r3, r3, #4
2000f502:	b2db      	uxtb	r3, r3
2000f504:	461a      	mov	r2, r3
2000f506:	4613      	mov	r3, r2
2000f508:	009b      	lsls	r3, r3, #2
2000f50a:	4413      	add	r3, r2
2000f50c:	005b      	lsls	r3, r3, #1
2000f50e:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
2000f510:	79fb      	ldrb	r3, [r7, #7]
2000f512:	f003 030f 	and.w	r3, r3, #15
2000f516:	b2da      	uxtb	r2, r3
2000f518:	68fb      	ldr	r3, [r7, #12]
2000f51a:	b2db      	uxtb	r3, r3
2000f51c:	4413      	add	r3, r2
2000f51e:	b2db      	uxtb	r3, r3
}
2000f520:	4618      	mov	r0, r3
2000f522:	3714      	adds	r7, #20
2000f524:	46bd      	mov	sp, r7
2000f526:	f85d 7b04 	ldr.w	r7, [sp], #4
2000f52a:	4770      	bx	lr

2000f52c <__errno>:
2000f52c:	4b01      	ldr	r3, [pc, #4]	; (2000f534 <__errno+0x8>)
2000f52e:	6818      	ldr	r0, [r3, #0]
2000f530:	4770      	bx	lr
2000f532:	bf00      	nop
2000f534:	20010274 	.word	0x20010274

2000f538 <__libc_init_array>:
2000f538:	b570      	push	{r4, r5, r6, lr}
2000f53a:	4e0d      	ldr	r6, [pc, #52]	; (2000f570 <__libc_init_array+0x38>)
2000f53c:	4c0d      	ldr	r4, [pc, #52]	; (2000f574 <__libc_init_array+0x3c>)
2000f53e:	1ba4      	subs	r4, r4, r6
2000f540:	10a4      	asrs	r4, r4, #2
2000f542:	2500      	movs	r5, #0
2000f544:	42a5      	cmp	r5, r4
2000f546:	d109      	bne.n	2000f55c <__libc_init_array+0x24>
2000f548:	4e0b      	ldr	r6, [pc, #44]	; (2000f578 <__libc_init_array+0x40>)
2000f54a:	4c0c      	ldr	r4, [pc, #48]	; (2000f57c <__libc_init_array+0x44>)
2000f54c:	f000 fc26 	bl	2000fd9c <_init>
2000f550:	1ba4      	subs	r4, r4, r6
2000f552:	10a4      	asrs	r4, r4, #2
2000f554:	2500      	movs	r5, #0
2000f556:	42a5      	cmp	r5, r4
2000f558:	d105      	bne.n	2000f566 <__libc_init_array+0x2e>
2000f55a:	bd70      	pop	{r4, r5, r6, pc}
2000f55c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
2000f560:	4798      	blx	r3
2000f562:	3501      	adds	r5, #1
2000f564:	e7ee      	b.n	2000f544 <__libc_init_array+0xc>
2000f566:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
2000f56a:	4798      	blx	r3
2000f56c:	3501      	adds	r5, #1
2000f56e:	e7f2      	b.n	2000f556 <__libc_init_array+0x1e>
2000f570:	20010250 	.word	0x20010250
2000f574:	20010250 	.word	0x20010250
2000f578:	20010250 	.word	0x20010250
2000f57c:	20010254 	.word	0x20010254

2000f580 <memset>:
2000f580:	4402      	add	r2, r0
2000f582:	4603      	mov	r3, r0
2000f584:	4293      	cmp	r3, r2
2000f586:	d100      	bne.n	2000f58a <memset+0xa>
2000f588:	4770      	bx	lr
2000f58a:	f803 1b01 	strb.w	r1, [r3], #1
2000f58e:	e7f9      	b.n	2000f584 <memset+0x4>

2000f590 <siprintf>:
2000f590:	b40e      	push	{r1, r2, r3}
2000f592:	b500      	push	{lr}
2000f594:	b09c      	sub	sp, #112	; 0x70
2000f596:	ab1d      	add	r3, sp, #116	; 0x74
2000f598:	9002      	str	r0, [sp, #8]
2000f59a:	9006      	str	r0, [sp, #24]
2000f59c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
2000f5a0:	4809      	ldr	r0, [pc, #36]	; (2000f5c8 <siprintf+0x38>)
2000f5a2:	9107      	str	r1, [sp, #28]
2000f5a4:	9104      	str	r1, [sp, #16]
2000f5a6:	4909      	ldr	r1, [pc, #36]	; (2000f5cc <siprintf+0x3c>)
2000f5a8:	f853 2b04 	ldr.w	r2, [r3], #4
2000f5ac:	9105      	str	r1, [sp, #20]
2000f5ae:	6800      	ldr	r0, [r0, #0]
2000f5b0:	9301      	str	r3, [sp, #4]
2000f5b2:	a902      	add	r1, sp, #8
2000f5b4:	f000 f866 	bl	2000f684 <_svfiprintf_r>
2000f5b8:	9b02      	ldr	r3, [sp, #8]
2000f5ba:	2200      	movs	r2, #0
2000f5bc:	701a      	strb	r2, [r3, #0]
2000f5be:	b01c      	add	sp, #112	; 0x70
2000f5c0:	f85d eb04 	ldr.w	lr, [sp], #4
2000f5c4:	b003      	add	sp, #12
2000f5c6:	4770      	bx	lr
2000f5c8:	20010274 	.word	0x20010274
2000f5cc:	ffff0208 	.word	0xffff0208

2000f5d0 <__ssputs_r>:
2000f5d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
2000f5d4:	688e      	ldr	r6, [r1, #8]
2000f5d6:	429e      	cmp	r6, r3
2000f5d8:	4682      	mov	sl, r0
2000f5da:	460c      	mov	r4, r1
2000f5dc:	4690      	mov	r8, r2
2000f5de:	4699      	mov	r9, r3
2000f5e0:	d837      	bhi.n	2000f652 <__ssputs_r+0x82>
2000f5e2:	898a      	ldrh	r2, [r1, #12]
2000f5e4:	f412 6f90 	tst.w	r2, #1152	; 0x480
2000f5e8:	d031      	beq.n	2000f64e <__ssputs_r+0x7e>
2000f5ea:	6825      	ldr	r5, [r4, #0]
2000f5ec:	6909      	ldr	r1, [r1, #16]
2000f5ee:	1a6f      	subs	r7, r5, r1
2000f5f0:	6965      	ldr	r5, [r4, #20]
2000f5f2:	2302      	movs	r3, #2
2000f5f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
2000f5f8:	fb95 f5f3 	sdiv	r5, r5, r3
2000f5fc:	f109 0301 	add.w	r3, r9, #1
2000f600:	443b      	add	r3, r7
2000f602:	429d      	cmp	r5, r3
2000f604:	bf38      	it	cc
2000f606:	461d      	movcc	r5, r3
2000f608:	0553      	lsls	r3, r2, #21
2000f60a:	d530      	bpl.n	2000f66e <__ssputs_r+0x9e>
2000f60c:	4629      	mov	r1, r5
2000f60e:	f000 fb2b 	bl	2000fc68 <_malloc_r>
2000f612:	4606      	mov	r6, r0
2000f614:	b950      	cbnz	r0, 2000f62c <__ssputs_r+0x5c>
2000f616:	230c      	movs	r3, #12
2000f618:	f8ca 3000 	str.w	r3, [sl]
2000f61c:	89a3      	ldrh	r3, [r4, #12]
2000f61e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
2000f622:	81a3      	strh	r3, [r4, #12]
2000f624:	f04f 30ff 	mov.w	r0, #4294967295
2000f628:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
2000f62c:	463a      	mov	r2, r7
2000f62e:	6921      	ldr	r1, [r4, #16]
2000f630:	f000 faa8 	bl	2000fb84 <memcpy>
2000f634:	89a3      	ldrh	r3, [r4, #12]
2000f636:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
2000f63a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
2000f63e:	81a3      	strh	r3, [r4, #12]
2000f640:	6126      	str	r6, [r4, #16]
2000f642:	6165      	str	r5, [r4, #20]
2000f644:	443e      	add	r6, r7
2000f646:	1bed      	subs	r5, r5, r7
2000f648:	6026      	str	r6, [r4, #0]
2000f64a:	60a5      	str	r5, [r4, #8]
2000f64c:	464e      	mov	r6, r9
2000f64e:	454e      	cmp	r6, r9
2000f650:	d900      	bls.n	2000f654 <__ssputs_r+0x84>
2000f652:	464e      	mov	r6, r9
2000f654:	4632      	mov	r2, r6
2000f656:	4641      	mov	r1, r8
2000f658:	6820      	ldr	r0, [r4, #0]
2000f65a:	f000 fa9e 	bl	2000fb9a <memmove>
2000f65e:	68a3      	ldr	r3, [r4, #8]
2000f660:	1b9b      	subs	r3, r3, r6
2000f662:	60a3      	str	r3, [r4, #8]
2000f664:	6823      	ldr	r3, [r4, #0]
2000f666:	441e      	add	r6, r3
2000f668:	6026      	str	r6, [r4, #0]
2000f66a:	2000      	movs	r0, #0
2000f66c:	e7dc      	b.n	2000f628 <__ssputs_r+0x58>
2000f66e:	462a      	mov	r2, r5
2000f670:	f000 fb54 	bl	2000fd1c <_realloc_r>
2000f674:	4606      	mov	r6, r0
2000f676:	2800      	cmp	r0, #0
2000f678:	d1e2      	bne.n	2000f640 <__ssputs_r+0x70>
2000f67a:	6921      	ldr	r1, [r4, #16]
2000f67c:	4650      	mov	r0, sl
2000f67e:	f000 faa5 	bl	2000fbcc <_free_r>
2000f682:	e7c8      	b.n	2000f616 <__ssputs_r+0x46>

2000f684 <_svfiprintf_r>:
2000f684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
2000f688:	461d      	mov	r5, r3
2000f68a:	898b      	ldrh	r3, [r1, #12]
2000f68c:	061f      	lsls	r7, r3, #24
2000f68e:	b09d      	sub	sp, #116	; 0x74
2000f690:	4680      	mov	r8, r0
2000f692:	460c      	mov	r4, r1
2000f694:	4616      	mov	r6, r2
2000f696:	d50f      	bpl.n	2000f6b8 <_svfiprintf_r+0x34>
2000f698:	690b      	ldr	r3, [r1, #16]
2000f69a:	b96b      	cbnz	r3, 2000f6b8 <_svfiprintf_r+0x34>
2000f69c:	2140      	movs	r1, #64	; 0x40
2000f69e:	f000 fae3 	bl	2000fc68 <_malloc_r>
2000f6a2:	6020      	str	r0, [r4, #0]
2000f6a4:	6120      	str	r0, [r4, #16]
2000f6a6:	b928      	cbnz	r0, 2000f6b4 <_svfiprintf_r+0x30>
2000f6a8:	230c      	movs	r3, #12
2000f6aa:	f8c8 3000 	str.w	r3, [r8]
2000f6ae:	f04f 30ff 	mov.w	r0, #4294967295
2000f6b2:	e0c8      	b.n	2000f846 <_svfiprintf_r+0x1c2>
2000f6b4:	2340      	movs	r3, #64	; 0x40
2000f6b6:	6163      	str	r3, [r4, #20]
2000f6b8:	2300      	movs	r3, #0
2000f6ba:	9309      	str	r3, [sp, #36]	; 0x24
2000f6bc:	2320      	movs	r3, #32
2000f6be:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
2000f6c2:	2330      	movs	r3, #48	; 0x30
2000f6c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
2000f6c8:	9503      	str	r5, [sp, #12]
2000f6ca:	f04f 0b01 	mov.w	fp, #1
2000f6ce:	4637      	mov	r7, r6
2000f6d0:	463d      	mov	r5, r7
2000f6d2:	f815 3b01 	ldrb.w	r3, [r5], #1
2000f6d6:	b10b      	cbz	r3, 2000f6dc <_svfiprintf_r+0x58>
2000f6d8:	2b25      	cmp	r3, #37	; 0x25
2000f6da:	d13e      	bne.n	2000f75a <_svfiprintf_r+0xd6>
2000f6dc:	ebb7 0a06 	subs.w	sl, r7, r6
2000f6e0:	d00b      	beq.n	2000f6fa <_svfiprintf_r+0x76>
2000f6e2:	4653      	mov	r3, sl
2000f6e4:	4632      	mov	r2, r6
2000f6e6:	4621      	mov	r1, r4
2000f6e8:	4640      	mov	r0, r8
2000f6ea:	f7ff ff71 	bl	2000f5d0 <__ssputs_r>
2000f6ee:	3001      	adds	r0, #1
2000f6f0:	f000 80a4 	beq.w	2000f83c <_svfiprintf_r+0x1b8>
2000f6f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
2000f6f6:	4453      	add	r3, sl
2000f6f8:	9309      	str	r3, [sp, #36]	; 0x24
2000f6fa:	783b      	ldrb	r3, [r7, #0]
2000f6fc:	2b00      	cmp	r3, #0
2000f6fe:	f000 809d 	beq.w	2000f83c <_svfiprintf_r+0x1b8>
2000f702:	2300      	movs	r3, #0
2000f704:	f04f 32ff 	mov.w	r2, #4294967295
2000f708:	e9cd 2305 	strd	r2, r3, [sp, #20]
2000f70c:	9304      	str	r3, [sp, #16]
2000f70e:	9307      	str	r3, [sp, #28]
2000f710:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
2000f714:	931a      	str	r3, [sp, #104]	; 0x68
2000f716:	462f      	mov	r7, r5
2000f718:	2205      	movs	r2, #5
2000f71a:	f817 1b01 	ldrb.w	r1, [r7], #1
2000f71e:	4850      	ldr	r0, [pc, #320]	; (2000f860 <_svfiprintf_r+0x1dc>)
2000f720:	f7fd fd5e 	bl	2000d1e0 <memchr>
2000f724:	9b04      	ldr	r3, [sp, #16]
2000f726:	b9d0      	cbnz	r0, 2000f75e <_svfiprintf_r+0xda>
2000f728:	06d9      	lsls	r1, r3, #27
2000f72a:	bf44      	itt	mi
2000f72c:	2220      	movmi	r2, #32
2000f72e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
2000f732:	071a      	lsls	r2, r3, #28
2000f734:	bf44      	itt	mi
2000f736:	222b      	movmi	r2, #43	; 0x2b
2000f738:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
2000f73c:	782a      	ldrb	r2, [r5, #0]
2000f73e:	2a2a      	cmp	r2, #42	; 0x2a
2000f740:	d015      	beq.n	2000f76e <_svfiprintf_r+0xea>
2000f742:	9a07      	ldr	r2, [sp, #28]
2000f744:	462f      	mov	r7, r5
2000f746:	2000      	movs	r0, #0
2000f748:	250a      	movs	r5, #10
2000f74a:	4639      	mov	r1, r7
2000f74c:	f811 3b01 	ldrb.w	r3, [r1], #1
2000f750:	3b30      	subs	r3, #48	; 0x30
2000f752:	2b09      	cmp	r3, #9
2000f754:	d94d      	bls.n	2000f7f2 <_svfiprintf_r+0x16e>
2000f756:	b1b8      	cbz	r0, 2000f788 <_svfiprintf_r+0x104>
2000f758:	e00f      	b.n	2000f77a <_svfiprintf_r+0xf6>
2000f75a:	462f      	mov	r7, r5
2000f75c:	e7b8      	b.n	2000f6d0 <_svfiprintf_r+0x4c>
2000f75e:	4a40      	ldr	r2, [pc, #256]	; (2000f860 <_svfiprintf_r+0x1dc>)
2000f760:	1a80      	subs	r0, r0, r2
2000f762:	fa0b f000 	lsl.w	r0, fp, r0
2000f766:	4318      	orrs	r0, r3
2000f768:	9004      	str	r0, [sp, #16]
2000f76a:	463d      	mov	r5, r7
2000f76c:	e7d3      	b.n	2000f716 <_svfiprintf_r+0x92>
2000f76e:	9a03      	ldr	r2, [sp, #12]
2000f770:	1d11      	adds	r1, r2, #4
2000f772:	6812      	ldr	r2, [r2, #0]
2000f774:	9103      	str	r1, [sp, #12]
2000f776:	2a00      	cmp	r2, #0
2000f778:	db01      	blt.n	2000f77e <_svfiprintf_r+0xfa>
2000f77a:	9207      	str	r2, [sp, #28]
2000f77c:	e004      	b.n	2000f788 <_svfiprintf_r+0x104>
2000f77e:	4252      	negs	r2, r2
2000f780:	f043 0302 	orr.w	r3, r3, #2
2000f784:	9207      	str	r2, [sp, #28]
2000f786:	9304      	str	r3, [sp, #16]
2000f788:	783b      	ldrb	r3, [r7, #0]
2000f78a:	2b2e      	cmp	r3, #46	; 0x2e
2000f78c:	d10c      	bne.n	2000f7a8 <_svfiprintf_r+0x124>
2000f78e:	787b      	ldrb	r3, [r7, #1]
2000f790:	2b2a      	cmp	r3, #42	; 0x2a
2000f792:	d133      	bne.n	2000f7fc <_svfiprintf_r+0x178>
2000f794:	9b03      	ldr	r3, [sp, #12]
2000f796:	1d1a      	adds	r2, r3, #4
2000f798:	681b      	ldr	r3, [r3, #0]
2000f79a:	9203      	str	r2, [sp, #12]
2000f79c:	2b00      	cmp	r3, #0
2000f79e:	bfb8      	it	lt
2000f7a0:	f04f 33ff 	movlt.w	r3, #4294967295
2000f7a4:	3702      	adds	r7, #2
2000f7a6:	9305      	str	r3, [sp, #20]
2000f7a8:	4d2e      	ldr	r5, [pc, #184]	; (2000f864 <_svfiprintf_r+0x1e0>)
2000f7aa:	7839      	ldrb	r1, [r7, #0]
2000f7ac:	2203      	movs	r2, #3
2000f7ae:	4628      	mov	r0, r5
2000f7b0:	f7fd fd16 	bl	2000d1e0 <memchr>
2000f7b4:	b138      	cbz	r0, 2000f7c6 <_svfiprintf_r+0x142>
2000f7b6:	2340      	movs	r3, #64	; 0x40
2000f7b8:	1b40      	subs	r0, r0, r5
2000f7ba:	fa03 f000 	lsl.w	r0, r3, r0
2000f7be:	9b04      	ldr	r3, [sp, #16]
2000f7c0:	4303      	orrs	r3, r0
2000f7c2:	3701      	adds	r7, #1
2000f7c4:	9304      	str	r3, [sp, #16]
2000f7c6:	7839      	ldrb	r1, [r7, #0]
2000f7c8:	4827      	ldr	r0, [pc, #156]	; (2000f868 <_svfiprintf_r+0x1e4>)
2000f7ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
2000f7ce:	2206      	movs	r2, #6
2000f7d0:	1c7e      	adds	r6, r7, #1
2000f7d2:	f7fd fd05 	bl	2000d1e0 <memchr>
2000f7d6:	2800      	cmp	r0, #0
2000f7d8:	d038      	beq.n	2000f84c <_svfiprintf_r+0x1c8>
2000f7da:	4b24      	ldr	r3, [pc, #144]	; (2000f86c <_svfiprintf_r+0x1e8>)
2000f7dc:	bb13      	cbnz	r3, 2000f824 <_svfiprintf_r+0x1a0>
2000f7de:	9b03      	ldr	r3, [sp, #12]
2000f7e0:	3307      	adds	r3, #7
2000f7e2:	f023 0307 	bic.w	r3, r3, #7
2000f7e6:	3308      	adds	r3, #8
2000f7e8:	9303      	str	r3, [sp, #12]
2000f7ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
2000f7ec:	444b      	add	r3, r9
2000f7ee:	9309      	str	r3, [sp, #36]	; 0x24
2000f7f0:	e76d      	b.n	2000f6ce <_svfiprintf_r+0x4a>
2000f7f2:	fb05 3202 	mla	r2, r5, r2, r3
2000f7f6:	2001      	movs	r0, #1
2000f7f8:	460f      	mov	r7, r1
2000f7fa:	e7a6      	b.n	2000f74a <_svfiprintf_r+0xc6>
2000f7fc:	2300      	movs	r3, #0
2000f7fe:	3701      	adds	r7, #1
2000f800:	9305      	str	r3, [sp, #20]
2000f802:	4619      	mov	r1, r3
2000f804:	250a      	movs	r5, #10
2000f806:	4638      	mov	r0, r7
2000f808:	f810 2b01 	ldrb.w	r2, [r0], #1
2000f80c:	3a30      	subs	r2, #48	; 0x30
2000f80e:	2a09      	cmp	r2, #9
2000f810:	d903      	bls.n	2000f81a <_svfiprintf_r+0x196>
2000f812:	2b00      	cmp	r3, #0
2000f814:	d0c8      	beq.n	2000f7a8 <_svfiprintf_r+0x124>
2000f816:	9105      	str	r1, [sp, #20]
2000f818:	e7c6      	b.n	2000f7a8 <_svfiprintf_r+0x124>
2000f81a:	fb05 2101 	mla	r1, r5, r1, r2
2000f81e:	2301      	movs	r3, #1
2000f820:	4607      	mov	r7, r0
2000f822:	e7f0      	b.n	2000f806 <_svfiprintf_r+0x182>
2000f824:	ab03      	add	r3, sp, #12
2000f826:	9300      	str	r3, [sp, #0]
2000f828:	4622      	mov	r2, r4
2000f82a:	4b11      	ldr	r3, [pc, #68]	; (2000f870 <_svfiprintf_r+0x1ec>)
2000f82c:	a904      	add	r1, sp, #16
2000f82e:	4640      	mov	r0, r8
2000f830:	f3af 8000 	nop.w
2000f834:	f1b0 3fff 	cmp.w	r0, #4294967295
2000f838:	4681      	mov	r9, r0
2000f83a:	d1d6      	bne.n	2000f7ea <_svfiprintf_r+0x166>
2000f83c:	89a3      	ldrh	r3, [r4, #12]
2000f83e:	065b      	lsls	r3, r3, #25
2000f840:	f53f af35 	bmi.w	2000f6ae <_svfiprintf_r+0x2a>
2000f844:	9809      	ldr	r0, [sp, #36]	; 0x24
2000f846:	b01d      	add	sp, #116	; 0x74
2000f848:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
2000f84c:	ab03      	add	r3, sp, #12
2000f84e:	9300      	str	r3, [sp, #0]
2000f850:	4622      	mov	r2, r4
2000f852:	4b07      	ldr	r3, [pc, #28]	; (2000f870 <_svfiprintf_r+0x1ec>)
2000f854:	a904      	add	r1, sp, #16
2000f856:	4640      	mov	r0, r8
2000f858:	f000 f882 	bl	2000f960 <_printf_i>
2000f85c:	e7ea      	b.n	2000f834 <_svfiprintf_r+0x1b0>
2000f85e:	bf00      	nop
2000f860:	20010214 	.word	0x20010214
2000f864:	2001021a 	.word	0x2001021a
2000f868:	2001021e 	.word	0x2001021e
2000f86c:	00000000 	.word	0x00000000
2000f870:	2000f5d1 	.word	0x2000f5d1

2000f874 <_printf_common>:
2000f874:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
2000f878:	4691      	mov	r9, r2
2000f87a:	461f      	mov	r7, r3
2000f87c:	688a      	ldr	r2, [r1, #8]
2000f87e:	690b      	ldr	r3, [r1, #16]
2000f880:	f8dd 8020 	ldr.w	r8, [sp, #32]
2000f884:	4293      	cmp	r3, r2
2000f886:	bfb8      	it	lt
2000f888:	4613      	movlt	r3, r2
2000f88a:	f8c9 3000 	str.w	r3, [r9]
2000f88e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
2000f892:	4606      	mov	r6, r0
2000f894:	460c      	mov	r4, r1
2000f896:	b112      	cbz	r2, 2000f89e <_printf_common+0x2a>
2000f898:	3301      	adds	r3, #1
2000f89a:	f8c9 3000 	str.w	r3, [r9]
2000f89e:	6823      	ldr	r3, [r4, #0]
2000f8a0:	0699      	lsls	r1, r3, #26
2000f8a2:	bf42      	ittt	mi
2000f8a4:	f8d9 3000 	ldrmi.w	r3, [r9]
2000f8a8:	3302      	addmi	r3, #2
2000f8aa:	f8c9 3000 	strmi.w	r3, [r9]
2000f8ae:	6825      	ldr	r5, [r4, #0]
2000f8b0:	f015 0506 	ands.w	r5, r5, #6
2000f8b4:	d107      	bne.n	2000f8c6 <_printf_common+0x52>
2000f8b6:	f104 0a19 	add.w	sl, r4, #25
2000f8ba:	68e3      	ldr	r3, [r4, #12]
2000f8bc:	f8d9 2000 	ldr.w	r2, [r9]
2000f8c0:	1a9b      	subs	r3, r3, r2
2000f8c2:	42ab      	cmp	r3, r5
2000f8c4:	dc28      	bgt.n	2000f918 <_printf_common+0xa4>
2000f8c6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
2000f8ca:	6822      	ldr	r2, [r4, #0]
2000f8cc:	3300      	adds	r3, #0
2000f8ce:	bf18      	it	ne
2000f8d0:	2301      	movne	r3, #1
2000f8d2:	0692      	lsls	r2, r2, #26
2000f8d4:	d42d      	bmi.n	2000f932 <_printf_common+0xbe>
2000f8d6:	f104 0243 	add.w	r2, r4, #67	; 0x43
2000f8da:	4639      	mov	r1, r7
2000f8dc:	4630      	mov	r0, r6
2000f8de:	47c0      	blx	r8
2000f8e0:	3001      	adds	r0, #1
2000f8e2:	d020      	beq.n	2000f926 <_printf_common+0xb2>
2000f8e4:	6823      	ldr	r3, [r4, #0]
2000f8e6:	68e5      	ldr	r5, [r4, #12]
2000f8e8:	f8d9 2000 	ldr.w	r2, [r9]
2000f8ec:	f003 0306 	and.w	r3, r3, #6
2000f8f0:	2b04      	cmp	r3, #4
2000f8f2:	bf08      	it	eq
2000f8f4:	1aad      	subeq	r5, r5, r2
2000f8f6:	68a3      	ldr	r3, [r4, #8]
2000f8f8:	6922      	ldr	r2, [r4, #16]
2000f8fa:	bf0c      	ite	eq
2000f8fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
2000f900:	2500      	movne	r5, #0
2000f902:	4293      	cmp	r3, r2
2000f904:	bfc4      	itt	gt
2000f906:	1a9b      	subgt	r3, r3, r2
2000f908:	18ed      	addgt	r5, r5, r3
2000f90a:	f04f 0900 	mov.w	r9, #0
2000f90e:	341a      	adds	r4, #26
2000f910:	454d      	cmp	r5, r9
2000f912:	d11a      	bne.n	2000f94a <_printf_common+0xd6>
2000f914:	2000      	movs	r0, #0
2000f916:	e008      	b.n	2000f92a <_printf_common+0xb6>
2000f918:	2301      	movs	r3, #1
2000f91a:	4652      	mov	r2, sl
2000f91c:	4639      	mov	r1, r7
2000f91e:	4630      	mov	r0, r6
2000f920:	47c0      	blx	r8
2000f922:	3001      	adds	r0, #1
2000f924:	d103      	bne.n	2000f92e <_printf_common+0xba>
2000f926:	f04f 30ff 	mov.w	r0, #4294967295
2000f92a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
2000f92e:	3501      	adds	r5, #1
2000f930:	e7c3      	b.n	2000f8ba <_printf_common+0x46>
2000f932:	18e1      	adds	r1, r4, r3
2000f934:	1c5a      	adds	r2, r3, #1
2000f936:	2030      	movs	r0, #48	; 0x30
2000f938:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
2000f93c:	4422      	add	r2, r4
2000f93e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
2000f942:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
2000f946:	3302      	adds	r3, #2
2000f948:	e7c5      	b.n	2000f8d6 <_printf_common+0x62>
2000f94a:	2301      	movs	r3, #1
2000f94c:	4622      	mov	r2, r4
2000f94e:	4639      	mov	r1, r7
2000f950:	4630      	mov	r0, r6
2000f952:	47c0      	blx	r8
2000f954:	3001      	adds	r0, #1
2000f956:	d0e6      	beq.n	2000f926 <_printf_common+0xb2>
2000f958:	f109 0901 	add.w	r9, r9, #1
2000f95c:	e7d8      	b.n	2000f910 <_printf_common+0x9c>
	...

2000f960 <_printf_i>:
2000f960:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
2000f964:	f101 0c43 	add.w	ip, r1, #67	; 0x43
2000f968:	460c      	mov	r4, r1
2000f96a:	7e09      	ldrb	r1, [r1, #24]
2000f96c:	b085      	sub	sp, #20
2000f96e:	296e      	cmp	r1, #110	; 0x6e
2000f970:	4617      	mov	r7, r2
2000f972:	4606      	mov	r6, r0
2000f974:	4698      	mov	r8, r3
2000f976:	9a0c      	ldr	r2, [sp, #48]	; 0x30
2000f978:	f000 80b3 	beq.w	2000fae2 <_printf_i+0x182>
2000f97c:	d822      	bhi.n	2000f9c4 <_printf_i+0x64>
2000f97e:	2963      	cmp	r1, #99	; 0x63
2000f980:	d036      	beq.n	2000f9f0 <_printf_i+0x90>
2000f982:	d80a      	bhi.n	2000f99a <_printf_i+0x3a>
2000f984:	2900      	cmp	r1, #0
2000f986:	f000 80b9 	beq.w	2000fafc <_printf_i+0x19c>
2000f98a:	2958      	cmp	r1, #88	; 0x58
2000f98c:	f000 8083 	beq.w	2000fa96 <_printf_i+0x136>
2000f990:	f104 0542 	add.w	r5, r4, #66	; 0x42
2000f994:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
2000f998:	e032      	b.n	2000fa00 <_printf_i+0xa0>
2000f99a:	2964      	cmp	r1, #100	; 0x64
2000f99c:	d001      	beq.n	2000f9a2 <_printf_i+0x42>
2000f99e:	2969      	cmp	r1, #105	; 0x69
2000f9a0:	d1f6      	bne.n	2000f990 <_printf_i+0x30>
2000f9a2:	6820      	ldr	r0, [r4, #0]
2000f9a4:	6813      	ldr	r3, [r2, #0]
2000f9a6:	0605      	lsls	r5, r0, #24
2000f9a8:	f103 0104 	add.w	r1, r3, #4
2000f9ac:	d52a      	bpl.n	2000fa04 <_printf_i+0xa4>
2000f9ae:	681b      	ldr	r3, [r3, #0]
2000f9b0:	6011      	str	r1, [r2, #0]
2000f9b2:	2b00      	cmp	r3, #0
2000f9b4:	da03      	bge.n	2000f9be <_printf_i+0x5e>
2000f9b6:	222d      	movs	r2, #45	; 0x2d
2000f9b8:	425b      	negs	r3, r3
2000f9ba:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
2000f9be:	486f      	ldr	r0, [pc, #444]	; (2000fb7c <_printf_i+0x21c>)
2000f9c0:	220a      	movs	r2, #10
2000f9c2:	e039      	b.n	2000fa38 <_printf_i+0xd8>
2000f9c4:	2973      	cmp	r1, #115	; 0x73
2000f9c6:	f000 809d 	beq.w	2000fb04 <_printf_i+0x1a4>
2000f9ca:	d808      	bhi.n	2000f9de <_printf_i+0x7e>
2000f9cc:	296f      	cmp	r1, #111	; 0x6f
2000f9ce:	d020      	beq.n	2000fa12 <_printf_i+0xb2>
2000f9d0:	2970      	cmp	r1, #112	; 0x70
2000f9d2:	d1dd      	bne.n	2000f990 <_printf_i+0x30>
2000f9d4:	6823      	ldr	r3, [r4, #0]
2000f9d6:	f043 0320 	orr.w	r3, r3, #32
2000f9da:	6023      	str	r3, [r4, #0]
2000f9dc:	e003      	b.n	2000f9e6 <_printf_i+0x86>
2000f9de:	2975      	cmp	r1, #117	; 0x75
2000f9e0:	d017      	beq.n	2000fa12 <_printf_i+0xb2>
2000f9e2:	2978      	cmp	r1, #120	; 0x78
2000f9e4:	d1d4      	bne.n	2000f990 <_printf_i+0x30>
2000f9e6:	2378      	movs	r3, #120	; 0x78
2000f9e8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
2000f9ec:	4864      	ldr	r0, [pc, #400]	; (2000fb80 <_printf_i+0x220>)
2000f9ee:	e055      	b.n	2000fa9c <_printf_i+0x13c>
2000f9f0:	6813      	ldr	r3, [r2, #0]
2000f9f2:	1d19      	adds	r1, r3, #4
2000f9f4:	681b      	ldr	r3, [r3, #0]
2000f9f6:	6011      	str	r1, [r2, #0]
2000f9f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
2000f9fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
2000fa00:	2301      	movs	r3, #1
2000fa02:	e08c      	b.n	2000fb1e <_printf_i+0x1be>
2000fa04:	681b      	ldr	r3, [r3, #0]
2000fa06:	6011      	str	r1, [r2, #0]
2000fa08:	f010 0f40 	tst.w	r0, #64	; 0x40
2000fa0c:	bf18      	it	ne
2000fa0e:	b21b      	sxthne	r3, r3
2000fa10:	e7cf      	b.n	2000f9b2 <_printf_i+0x52>
2000fa12:	6813      	ldr	r3, [r2, #0]
2000fa14:	6825      	ldr	r5, [r4, #0]
2000fa16:	1d18      	adds	r0, r3, #4
2000fa18:	6010      	str	r0, [r2, #0]
2000fa1a:	0628      	lsls	r0, r5, #24
2000fa1c:	d501      	bpl.n	2000fa22 <_printf_i+0xc2>
2000fa1e:	681b      	ldr	r3, [r3, #0]
2000fa20:	e002      	b.n	2000fa28 <_printf_i+0xc8>
2000fa22:	0668      	lsls	r0, r5, #25
2000fa24:	d5fb      	bpl.n	2000fa1e <_printf_i+0xbe>
2000fa26:	881b      	ldrh	r3, [r3, #0]
2000fa28:	4854      	ldr	r0, [pc, #336]	; (2000fb7c <_printf_i+0x21c>)
2000fa2a:	296f      	cmp	r1, #111	; 0x6f
2000fa2c:	bf14      	ite	ne
2000fa2e:	220a      	movne	r2, #10
2000fa30:	2208      	moveq	r2, #8
2000fa32:	2100      	movs	r1, #0
2000fa34:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
2000fa38:	6865      	ldr	r5, [r4, #4]
2000fa3a:	60a5      	str	r5, [r4, #8]
2000fa3c:	2d00      	cmp	r5, #0
2000fa3e:	f2c0 8095 	blt.w	2000fb6c <_printf_i+0x20c>
2000fa42:	6821      	ldr	r1, [r4, #0]
2000fa44:	f021 0104 	bic.w	r1, r1, #4
2000fa48:	6021      	str	r1, [r4, #0]
2000fa4a:	2b00      	cmp	r3, #0
2000fa4c:	d13d      	bne.n	2000faca <_printf_i+0x16a>
2000fa4e:	2d00      	cmp	r5, #0
2000fa50:	f040 808e 	bne.w	2000fb70 <_printf_i+0x210>
2000fa54:	4665      	mov	r5, ip
2000fa56:	2a08      	cmp	r2, #8
2000fa58:	d10b      	bne.n	2000fa72 <_printf_i+0x112>
2000fa5a:	6823      	ldr	r3, [r4, #0]
2000fa5c:	07db      	lsls	r3, r3, #31
2000fa5e:	d508      	bpl.n	2000fa72 <_printf_i+0x112>
2000fa60:	6923      	ldr	r3, [r4, #16]
2000fa62:	6862      	ldr	r2, [r4, #4]
2000fa64:	429a      	cmp	r2, r3
2000fa66:	bfde      	ittt	le
2000fa68:	2330      	movle	r3, #48	; 0x30
2000fa6a:	f805 3c01 	strble.w	r3, [r5, #-1]
2000fa6e:	f105 35ff 	addle.w	r5, r5, #4294967295
2000fa72:	ebac 0305 	sub.w	r3, ip, r5
2000fa76:	6123      	str	r3, [r4, #16]
2000fa78:	f8cd 8000 	str.w	r8, [sp]
2000fa7c:	463b      	mov	r3, r7
2000fa7e:	aa03      	add	r2, sp, #12
2000fa80:	4621      	mov	r1, r4
2000fa82:	4630      	mov	r0, r6
2000fa84:	f7ff fef6 	bl	2000f874 <_printf_common>
2000fa88:	3001      	adds	r0, #1
2000fa8a:	d14d      	bne.n	2000fb28 <_printf_i+0x1c8>
2000fa8c:	f04f 30ff 	mov.w	r0, #4294967295
2000fa90:	b005      	add	sp, #20
2000fa92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
2000fa96:	4839      	ldr	r0, [pc, #228]	; (2000fb7c <_printf_i+0x21c>)
2000fa98:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
2000fa9c:	6813      	ldr	r3, [r2, #0]
2000fa9e:	6821      	ldr	r1, [r4, #0]
2000faa0:	1d1d      	adds	r5, r3, #4
2000faa2:	681b      	ldr	r3, [r3, #0]
2000faa4:	6015      	str	r5, [r2, #0]
2000faa6:	060a      	lsls	r2, r1, #24
2000faa8:	d50b      	bpl.n	2000fac2 <_printf_i+0x162>
2000faaa:	07ca      	lsls	r2, r1, #31
2000faac:	bf44      	itt	mi
2000faae:	f041 0120 	orrmi.w	r1, r1, #32
2000fab2:	6021      	strmi	r1, [r4, #0]
2000fab4:	b91b      	cbnz	r3, 2000fabe <_printf_i+0x15e>
2000fab6:	6822      	ldr	r2, [r4, #0]
2000fab8:	f022 0220 	bic.w	r2, r2, #32
2000fabc:	6022      	str	r2, [r4, #0]
2000fabe:	2210      	movs	r2, #16
2000fac0:	e7b7      	b.n	2000fa32 <_printf_i+0xd2>
2000fac2:	064d      	lsls	r5, r1, #25
2000fac4:	bf48      	it	mi
2000fac6:	b29b      	uxthmi	r3, r3
2000fac8:	e7ef      	b.n	2000faaa <_printf_i+0x14a>
2000faca:	4665      	mov	r5, ip
2000facc:	fbb3 f1f2 	udiv	r1, r3, r2
2000fad0:	fb02 3311 	mls	r3, r2, r1, r3
2000fad4:	5cc3      	ldrb	r3, [r0, r3]
2000fad6:	f805 3d01 	strb.w	r3, [r5, #-1]!
2000fada:	460b      	mov	r3, r1
2000fadc:	2900      	cmp	r1, #0
2000fade:	d1f5      	bne.n	2000facc <_printf_i+0x16c>
2000fae0:	e7b9      	b.n	2000fa56 <_printf_i+0xf6>
2000fae2:	6813      	ldr	r3, [r2, #0]
2000fae4:	6825      	ldr	r5, [r4, #0]
2000fae6:	6961      	ldr	r1, [r4, #20]
2000fae8:	1d18      	adds	r0, r3, #4
2000faea:	6010      	str	r0, [r2, #0]
2000faec:	0628      	lsls	r0, r5, #24
2000faee:	681b      	ldr	r3, [r3, #0]
2000faf0:	d501      	bpl.n	2000faf6 <_printf_i+0x196>
2000faf2:	6019      	str	r1, [r3, #0]
2000faf4:	e002      	b.n	2000fafc <_printf_i+0x19c>
2000faf6:	066a      	lsls	r2, r5, #25
2000faf8:	d5fb      	bpl.n	2000faf2 <_printf_i+0x192>
2000fafa:	8019      	strh	r1, [r3, #0]
2000fafc:	2300      	movs	r3, #0
2000fafe:	6123      	str	r3, [r4, #16]
2000fb00:	4665      	mov	r5, ip
2000fb02:	e7b9      	b.n	2000fa78 <_printf_i+0x118>
2000fb04:	6813      	ldr	r3, [r2, #0]
2000fb06:	1d19      	adds	r1, r3, #4
2000fb08:	6011      	str	r1, [r2, #0]
2000fb0a:	681d      	ldr	r5, [r3, #0]
2000fb0c:	6862      	ldr	r2, [r4, #4]
2000fb0e:	2100      	movs	r1, #0
2000fb10:	4628      	mov	r0, r5
2000fb12:	f7fd fb65 	bl	2000d1e0 <memchr>
2000fb16:	b108      	cbz	r0, 2000fb1c <_printf_i+0x1bc>
2000fb18:	1b40      	subs	r0, r0, r5
2000fb1a:	6060      	str	r0, [r4, #4]
2000fb1c:	6863      	ldr	r3, [r4, #4]
2000fb1e:	6123      	str	r3, [r4, #16]
2000fb20:	2300      	movs	r3, #0
2000fb22:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
2000fb26:	e7a7      	b.n	2000fa78 <_printf_i+0x118>
2000fb28:	6923      	ldr	r3, [r4, #16]
2000fb2a:	462a      	mov	r2, r5
2000fb2c:	4639      	mov	r1, r7
2000fb2e:	4630      	mov	r0, r6
2000fb30:	47c0      	blx	r8
2000fb32:	3001      	adds	r0, #1
2000fb34:	d0aa      	beq.n	2000fa8c <_printf_i+0x12c>
2000fb36:	6823      	ldr	r3, [r4, #0]
2000fb38:	079b      	lsls	r3, r3, #30
2000fb3a:	d413      	bmi.n	2000fb64 <_printf_i+0x204>
2000fb3c:	68e0      	ldr	r0, [r4, #12]
2000fb3e:	9b03      	ldr	r3, [sp, #12]
2000fb40:	4298      	cmp	r0, r3
2000fb42:	bfb8      	it	lt
2000fb44:	4618      	movlt	r0, r3
2000fb46:	e7a3      	b.n	2000fa90 <_printf_i+0x130>
2000fb48:	2301      	movs	r3, #1
2000fb4a:	464a      	mov	r2, r9
2000fb4c:	4639      	mov	r1, r7
2000fb4e:	4630      	mov	r0, r6
2000fb50:	47c0      	blx	r8
2000fb52:	3001      	adds	r0, #1
2000fb54:	d09a      	beq.n	2000fa8c <_printf_i+0x12c>
2000fb56:	3501      	adds	r5, #1
2000fb58:	68e3      	ldr	r3, [r4, #12]
2000fb5a:	9a03      	ldr	r2, [sp, #12]
2000fb5c:	1a9b      	subs	r3, r3, r2
2000fb5e:	42ab      	cmp	r3, r5
2000fb60:	dcf2      	bgt.n	2000fb48 <_printf_i+0x1e8>
2000fb62:	e7eb      	b.n	2000fb3c <_printf_i+0x1dc>
2000fb64:	2500      	movs	r5, #0
2000fb66:	f104 0919 	add.w	r9, r4, #25
2000fb6a:	e7f5      	b.n	2000fb58 <_printf_i+0x1f8>
2000fb6c:	2b00      	cmp	r3, #0
2000fb6e:	d1ac      	bne.n	2000faca <_printf_i+0x16a>
2000fb70:	7803      	ldrb	r3, [r0, #0]
2000fb72:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
2000fb76:	f104 0542 	add.w	r5, r4, #66	; 0x42
2000fb7a:	e76c      	b.n	2000fa56 <_printf_i+0xf6>
2000fb7c:	20010225 	.word	0x20010225
2000fb80:	20010236 	.word	0x20010236

2000fb84 <memcpy>:
2000fb84:	b510      	push	{r4, lr}
2000fb86:	1e43      	subs	r3, r0, #1
2000fb88:	440a      	add	r2, r1
2000fb8a:	4291      	cmp	r1, r2
2000fb8c:	d100      	bne.n	2000fb90 <memcpy+0xc>
2000fb8e:	bd10      	pop	{r4, pc}
2000fb90:	f811 4b01 	ldrb.w	r4, [r1], #1
2000fb94:	f803 4f01 	strb.w	r4, [r3, #1]!
2000fb98:	e7f7      	b.n	2000fb8a <memcpy+0x6>

2000fb9a <memmove>:
2000fb9a:	4288      	cmp	r0, r1
2000fb9c:	b510      	push	{r4, lr}
2000fb9e:	eb01 0302 	add.w	r3, r1, r2
2000fba2:	d807      	bhi.n	2000fbb4 <memmove+0x1a>
2000fba4:	1e42      	subs	r2, r0, #1
2000fba6:	4299      	cmp	r1, r3
2000fba8:	d00a      	beq.n	2000fbc0 <memmove+0x26>
2000fbaa:	f811 4b01 	ldrb.w	r4, [r1], #1
2000fbae:	f802 4f01 	strb.w	r4, [r2, #1]!
2000fbb2:	e7f8      	b.n	2000fba6 <memmove+0xc>
2000fbb4:	4283      	cmp	r3, r0
2000fbb6:	d9f5      	bls.n	2000fba4 <memmove+0xa>
2000fbb8:	1881      	adds	r1, r0, r2
2000fbba:	1ad2      	subs	r2, r2, r3
2000fbbc:	42d3      	cmn	r3, r2
2000fbbe:	d100      	bne.n	2000fbc2 <memmove+0x28>
2000fbc0:	bd10      	pop	{r4, pc}
2000fbc2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
2000fbc6:	f801 4d01 	strb.w	r4, [r1, #-1]!
2000fbca:	e7f7      	b.n	2000fbbc <memmove+0x22>

2000fbcc <_free_r>:
2000fbcc:	b538      	push	{r3, r4, r5, lr}
2000fbce:	4605      	mov	r5, r0
2000fbd0:	2900      	cmp	r1, #0
2000fbd2:	d045      	beq.n	2000fc60 <_free_r+0x94>
2000fbd4:	f851 3c04 	ldr.w	r3, [r1, #-4]
2000fbd8:	1f0c      	subs	r4, r1, #4
2000fbda:	2b00      	cmp	r3, #0
2000fbdc:	bfb8      	it	lt
2000fbde:	18e4      	addlt	r4, r4, r3
2000fbe0:	f000 f8d2 	bl	2000fd88 <__malloc_lock>
2000fbe4:	4a1f      	ldr	r2, [pc, #124]	; (2000fc64 <_free_r+0x98>)
2000fbe6:	6813      	ldr	r3, [r2, #0]
2000fbe8:	4610      	mov	r0, r2
2000fbea:	b933      	cbnz	r3, 2000fbfa <_free_r+0x2e>
2000fbec:	6063      	str	r3, [r4, #4]
2000fbee:	6014      	str	r4, [r2, #0]
2000fbf0:	4628      	mov	r0, r5
2000fbf2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
2000fbf6:	f000 b8c8 	b.w	2000fd8a <__malloc_unlock>
2000fbfa:	42a3      	cmp	r3, r4
2000fbfc:	d90c      	bls.n	2000fc18 <_free_r+0x4c>
2000fbfe:	6821      	ldr	r1, [r4, #0]
2000fc00:	1862      	adds	r2, r4, r1
2000fc02:	4293      	cmp	r3, r2
2000fc04:	bf04      	itt	eq
2000fc06:	681a      	ldreq	r2, [r3, #0]
2000fc08:	685b      	ldreq	r3, [r3, #4]
2000fc0a:	6063      	str	r3, [r4, #4]
2000fc0c:	bf04      	itt	eq
2000fc0e:	1852      	addeq	r2, r2, r1
2000fc10:	6022      	streq	r2, [r4, #0]
2000fc12:	6004      	str	r4, [r0, #0]
2000fc14:	e7ec      	b.n	2000fbf0 <_free_r+0x24>
2000fc16:	4613      	mov	r3, r2
2000fc18:	685a      	ldr	r2, [r3, #4]
2000fc1a:	b10a      	cbz	r2, 2000fc20 <_free_r+0x54>
2000fc1c:	42a2      	cmp	r2, r4
2000fc1e:	d9fa      	bls.n	2000fc16 <_free_r+0x4a>
2000fc20:	6819      	ldr	r1, [r3, #0]
2000fc22:	1858      	adds	r0, r3, r1
2000fc24:	42a0      	cmp	r0, r4
2000fc26:	d10b      	bne.n	2000fc40 <_free_r+0x74>
2000fc28:	6820      	ldr	r0, [r4, #0]
2000fc2a:	4401      	add	r1, r0
2000fc2c:	1858      	adds	r0, r3, r1
2000fc2e:	4282      	cmp	r2, r0
2000fc30:	6019      	str	r1, [r3, #0]
2000fc32:	d1dd      	bne.n	2000fbf0 <_free_r+0x24>
2000fc34:	6810      	ldr	r0, [r2, #0]
2000fc36:	6852      	ldr	r2, [r2, #4]
2000fc38:	605a      	str	r2, [r3, #4]
2000fc3a:	4401      	add	r1, r0
2000fc3c:	6019      	str	r1, [r3, #0]
2000fc3e:	e7d7      	b.n	2000fbf0 <_free_r+0x24>
2000fc40:	d902      	bls.n	2000fc48 <_free_r+0x7c>
2000fc42:	230c      	movs	r3, #12
2000fc44:	602b      	str	r3, [r5, #0]
2000fc46:	e7d3      	b.n	2000fbf0 <_free_r+0x24>
2000fc48:	6820      	ldr	r0, [r4, #0]
2000fc4a:	1821      	adds	r1, r4, r0
2000fc4c:	428a      	cmp	r2, r1
2000fc4e:	bf04      	itt	eq
2000fc50:	6811      	ldreq	r1, [r2, #0]
2000fc52:	6852      	ldreq	r2, [r2, #4]
2000fc54:	6062      	str	r2, [r4, #4]
2000fc56:	bf04      	itt	eq
2000fc58:	1809      	addeq	r1, r1, r0
2000fc5a:	6021      	streq	r1, [r4, #0]
2000fc5c:	605c      	str	r4, [r3, #4]
2000fc5e:	e7c7      	b.n	2000fbf0 <_free_r+0x24>
2000fc60:	bd38      	pop	{r3, r4, r5, pc}
2000fc62:	bf00      	nop
2000fc64:	200102fc 	.word	0x200102fc

2000fc68 <_malloc_r>:
2000fc68:	b570      	push	{r4, r5, r6, lr}
2000fc6a:	1ccd      	adds	r5, r1, #3
2000fc6c:	f025 0503 	bic.w	r5, r5, #3
2000fc70:	3508      	adds	r5, #8
2000fc72:	2d0c      	cmp	r5, #12
2000fc74:	bf38      	it	cc
2000fc76:	250c      	movcc	r5, #12
2000fc78:	2d00      	cmp	r5, #0
2000fc7a:	4606      	mov	r6, r0
2000fc7c:	db01      	blt.n	2000fc82 <_malloc_r+0x1a>
2000fc7e:	42a9      	cmp	r1, r5
2000fc80:	d903      	bls.n	2000fc8a <_malloc_r+0x22>
2000fc82:	230c      	movs	r3, #12
2000fc84:	6033      	str	r3, [r6, #0]
2000fc86:	2000      	movs	r0, #0
2000fc88:	bd70      	pop	{r4, r5, r6, pc}
2000fc8a:	f000 f87d 	bl	2000fd88 <__malloc_lock>
2000fc8e:	4a21      	ldr	r2, [pc, #132]	; (2000fd14 <_malloc_r+0xac>)
2000fc90:	6814      	ldr	r4, [r2, #0]
2000fc92:	4621      	mov	r1, r4
2000fc94:	b991      	cbnz	r1, 2000fcbc <_malloc_r+0x54>
2000fc96:	4c20      	ldr	r4, [pc, #128]	; (2000fd18 <_malloc_r+0xb0>)
2000fc98:	6823      	ldr	r3, [r4, #0]
2000fc9a:	b91b      	cbnz	r3, 2000fca4 <_malloc_r+0x3c>
2000fc9c:	4630      	mov	r0, r6
2000fc9e:	f000 f863 	bl	2000fd68 <_sbrk_r>
2000fca2:	6020      	str	r0, [r4, #0]
2000fca4:	4629      	mov	r1, r5
2000fca6:	4630      	mov	r0, r6
2000fca8:	f000 f85e 	bl	2000fd68 <_sbrk_r>
2000fcac:	1c43      	adds	r3, r0, #1
2000fcae:	d124      	bne.n	2000fcfa <_malloc_r+0x92>
2000fcb0:	230c      	movs	r3, #12
2000fcb2:	6033      	str	r3, [r6, #0]
2000fcb4:	4630      	mov	r0, r6
2000fcb6:	f000 f868 	bl	2000fd8a <__malloc_unlock>
2000fcba:	e7e4      	b.n	2000fc86 <_malloc_r+0x1e>
2000fcbc:	680b      	ldr	r3, [r1, #0]
2000fcbe:	1b5b      	subs	r3, r3, r5
2000fcc0:	d418      	bmi.n	2000fcf4 <_malloc_r+0x8c>
2000fcc2:	2b0b      	cmp	r3, #11
2000fcc4:	d90f      	bls.n	2000fce6 <_malloc_r+0x7e>
2000fcc6:	600b      	str	r3, [r1, #0]
2000fcc8:	50cd      	str	r5, [r1, r3]
2000fcca:	18cc      	adds	r4, r1, r3
2000fccc:	4630      	mov	r0, r6
2000fcce:	f000 f85c 	bl	2000fd8a <__malloc_unlock>
2000fcd2:	f104 000b 	add.w	r0, r4, #11
2000fcd6:	1d23      	adds	r3, r4, #4
2000fcd8:	f020 0007 	bic.w	r0, r0, #7
2000fcdc:	1ac3      	subs	r3, r0, r3
2000fcde:	d0d3      	beq.n	2000fc88 <_malloc_r+0x20>
2000fce0:	425a      	negs	r2, r3
2000fce2:	50e2      	str	r2, [r4, r3]
2000fce4:	e7d0      	b.n	2000fc88 <_malloc_r+0x20>
2000fce6:	428c      	cmp	r4, r1
2000fce8:	684b      	ldr	r3, [r1, #4]
2000fcea:	bf16      	itet	ne
2000fcec:	6063      	strne	r3, [r4, #4]
2000fcee:	6013      	streq	r3, [r2, #0]
2000fcf0:	460c      	movne	r4, r1
2000fcf2:	e7eb      	b.n	2000fccc <_malloc_r+0x64>
2000fcf4:	460c      	mov	r4, r1
2000fcf6:	6849      	ldr	r1, [r1, #4]
2000fcf8:	e7cc      	b.n	2000fc94 <_malloc_r+0x2c>
2000fcfa:	1cc4      	adds	r4, r0, #3
2000fcfc:	f024 0403 	bic.w	r4, r4, #3
2000fd00:	42a0      	cmp	r0, r4
2000fd02:	d005      	beq.n	2000fd10 <_malloc_r+0xa8>
2000fd04:	1a21      	subs	r1, r4, r0
2000fd06:	4630      	mov	r0, r6
2000fd08:	f000 f82e 	bl	2000fd68 <_sbrk_r>
2000fd0c:	3001      	adds	r0, #1
2000fd0e:	d0cf      	beq.n	2000fcb0 <_malloc_r+0x48>
2000fd10:	6025      	str	r5, [r4, #0]
2000fd12:	e7db      	b.n	2000fccc <_malloc_r+0x64>
2000fd14:	200102fc 	.word	0x200102fc
2000fd18:	20010300 	.word	0x20010300

2000fd1c <_realloc_r>:
2000fd1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
2000fd1e:	4607      	mov	r7, r0
2000fd20:	4614      	mov	r4, r2
2000fd22:	460e      	mov	r6, r1
2000fd24:	b921      	cbnz	r1, 2000fd30 <_realloc_r+0x14>
2000fd26:	4611      	mov	r1, r2
2000fd28:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
2000fd2c:	f7ff bf9c 	b.w	2000fc68 <_malloc_r>
2000fd30:	b922      	cbnz	r2, 2000fd3c <_realloc_r+0x20>
2000fd32:	f7ff ff4b 	bl	2000fbcc <_free_r>
2000fd36:	4625      	mov	r5, r4
2000fd38:	4628      	mov	r0, r5
2000fd3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
2000fd3c:	f000 f826 	bl	2000fd8c <_malloc_usable_size_r>
2000fd40:	42a0      	cmp	r0, r4
2000fd42:	d20f      	bcs.n	2000fd64 <_realloc_r+0x48>
2000fd44:	4621      	mov	r1, r4
2000fd46:	4638      	mov	r0, r7
2000fd48:	f7ff ff8e 	bl	2000fc68 <_malloc_r>
2000fd4c:	4605      	mov	r5, r0
2000fd4e:	2800      	cmp	r0, #0
2000fd50:	d0f2      	beq.n	2000fd38 <_realloc_r+0x1c>
2000fd52:	4631      	mov	r1, r6
2000fd54:	4622      	mov	r2, r4
2000fd56:	f7ff ff15 	bl	2000fb84 <memcpy>
2000fd5a:	4631      	mov	r1, r6
2000fd5c:	4638      	mov	r0, r7
2000fd5e:	f7ff ff35 	bl	2000fbcc <_free_r>
2000fd62:	e7e9      	b.n	2000fd38 <_realloc_r+0x1c>
2000fd64:	4635      	mov	r5, r6
2000fd66:	e7e7      	b.n	2000fd38 <_realloc_r+0x1c>

2000fd68 <_sbrk_r>:
2000fd68:	b538      	push	{r3, r4, r5, lr}
2000fd6a:	4c06      	ldr	r4, [pc, #24]	; (2000fd84 <_sbrk_r+0x1c>)
2000fd6c:	2300      	movs	r3, #0
2000fd6e:	4605      	mov	r5, r0
2000fd70:	4608      	mov	r0, r1
2000fd72:	6023      	str	r3, [r4, #0]
2000fd74:	f7fd fed4 	bl	2000db20 <_sbrk>
2000fd78:	1c43      	adds	r3, r0, #1
2000fd7a:	d102      	bne.n	2000fd82 <_sbrk_r+0x1a>
2000fd7c:	6823      	ldr	r3, [r4, #0]
2000fd7e:	b103      	cbz	r3, 2000fd82 <_sbrk_r+0x1a>
2000fd80:	602b      	str	r3, [r5, #0]
2000fd82:	bd38      	pop	{r3, r4, r5, pc}
2000fd84:	20010334 	.word	0x20010334

2000fd88 <__malloc_lock>:
2000fd88:	4770      	bx	lr

2000fd8a <__malloc_unlock>:
2000fd8a:	4770      	bx	lr

2000fd8c <_malloc_usable_size_r>:
2000fd8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
2000fd90:	1f18      	subs	r0, r3, #4
2000fd92:	2b00      	cmp	r3, #0
2000fd94:	bfbc      	itt	lt
2000fd96:	580b      	ldrlt	r3, [r1, r0]
2000fd98:	18c0      	addlt	r0, r0, r3
2000fd9a:	4770      	bx	lr

2000fd9c <_init>:
2000fd9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
2000fd9e:	bf00      	nop
2000fda0:	bcf8      	pop	{r3, r4, r5, r6, r7}
2000fda2:	bc08      	pop	{r3}
2000fda4:	469e      	mov	lr, r3
2000fda6:	4770      	bx	lr

2000fda8 <_fini>:
2000fda8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
2000fdaa:	bf00      	nop
2000fdac:	bcf8      	pop	{r3, r4, r5, r6, r7}
2000fdae:	bc08      	pop	{r3}
2000fdb0:	469e      	mov	lr, r3
2000fdb2:	4770      	bx	lr
