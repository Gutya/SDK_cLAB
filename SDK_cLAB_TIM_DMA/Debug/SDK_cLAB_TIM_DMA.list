
SDK_cLAB_TIM_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  2000d000  2000d000  0000d000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000041dc  2000d190  2000d190  0000d190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000480  2001136c  2001136c  0001136c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  200117ec  200117ec  0001187c  2**0
                  CONTENTS
  4 .ARM          00000008  200117ec  200117ec  000117ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  200117f4  2001187c  0001187c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  200117f4  200117f4  000117f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  200117f8  200117f8  000117f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  200117fc  200117fc  000117fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c4  2001187c  2001187c  0001187c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20011a40  20011a40  0001187c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001187c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e70d  00000000  00000000  000118ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002462  00000000  00000000  0001ffb9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ce8  00000000  00000000  00022420  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b90  00000000  00000000  00023108  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022054  00000000  00000000  00023c98  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000bdd2  00000000  00000000  00045cec  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ca7f8  00000000  00000000  00051abe  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011c2b6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003690  00000000  00000000  0011c334  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

2000d190 <__do_global_dtors_aux>:
2000d190:	b510      	push	{r4, lr}
2000d192:	4c05      	ldr	r4, [pc, #20]	; (2000d1a8 <__do_global_dtors_aux+0x18>)
2000d194:	7823      	ldrb	r3, [r4, #0]
2000d196:	b933      	cbnz	r3, 2000d1a6 <__do_global_dtors_aux+0x16>
2000d198:	4b04      	ldr	r3, [pc, #16]	; (2000d1ac <__do_global_dtors_aux+0x1c>)
2000d19a:	b113      	cbz	r3, 2000d1a2 <__do_global_dtors_aux+0x12>
2000d19c:	4804      	ldr	r0, [pc, #16]	; (2000d1b0 <__do_global_dtors_aux+0x20>)
2000d19e:	f3af 8000 	nop.w
2000d1a2:	2301      	movs	r3, #1
2000d1a4:	7023      	strb	r3, [r4, #0]
2000d1a6:	bd10      	pop	{r4, pc}
2000d1a8:	2001187c 	.word	0x2001187c
2000d1ac:	00000000 	.word	0x00000000
2000d1b0:	20011354 	.word	0x20011354

2000d1b4 <frame_dummy>:
2000d1b4:	b508      	push	{r3, lr}
2000d1b6:	4b03      	ldr	r3, [pc, #12]	; (2000d1c4 <frame_dummy+0x10>)
2000d1b8:	b11b      	cbz	r3, 2000d1c2 <frame_dummy+0xe>
2000d1ba:	4903      	ldr	r1, [pc, #12]	; (2000d1c8 <frame_dummy+0x14>)
2000d1bc:	4803      	ldr	r0, [pc, #12]	; (2000d1cc <frame_dummy+0x18>)
2000d1be:	f3af 8000 	nop.w
2000d1c2:	bd08      	pop	{r3, pc}
2000d1c4:	00000000 	.word	0x00000000
2000d1c8:	20011880 	.word	0x20011880
2000d1cc:	20011354 	.word	0x20011354

2000d1d0 <strlen>:
2000d1d0:	4603      	mov	r3, r0
2000d1d2:	f813 2b01 	ldrb.w	r2, [r3], #1
2000d1d6:	2a00      	cmp	r2, #0
2000d1d8:	d1fb      	bne.n	2000d1d2 <strlen+0x2>
2000d1da:	1a18      	subs	r0, r3, r0
2000d1dc:	3801      	subs	r0, #1
2000d1de:	4770      	bx	lr

2000d1e0 <memchr>:
2000d1e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
2000d1e4:	2a10      	cmp	r2, #16
2000d1e6:	db2b      	blt.n	2000d240 <memchr+0x60>
2000d1e8:	f010 0f07 	tst.w	r0, #7
2000d1ec:	d008      	beq.n	2000d200 <memchr+0x20>
2000d1ee:	f810 3b01 	ldrb.w	r3, [r0], #1
2000d1f2:	3a01      	subs	r2, #1
2000d1f4:	428b      	cmp	r3, r1
2000d1f6:	d02d      	beq.n	2000d254 <memchr+0x74>
2000d1f8:	f010 0f07 	tst.w	r0, #7
2000d1fc:	b342      	cbz	r2, 2000d250 <memchr+0x70>
2000d1fe:	d1f6      	bne.n	2000d1ee <memchr+0xe>
2000d200:	b4f0      	push	{r4, r5, r6, r7}
2000d202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
2000d206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
2000d20a:	f022 0407 	bic.w	r4, r2, #7
2000d20e:	f07f 0700 	mvns.w	r7, #0
2000d212:	2300      	movs	r3, #0
2000d214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
2000d218:	3c08      	subs	r4, #8
2000d21a:	ea85 0501 	eor.w	r5, r5, r1
2000d21e:	ea86 0601 	eor.w	r6, r6, r1
2000d222:	fa85 f547 	uadd8	r5, r5, r7
2000d226:	faa3 f587 	sel	r5, r3, r7
2000d22a:	fa86 f647 	uadd8	r6, r6, r7
2000d22e:	faa5 f687 	sel	r6, r5, r7
2000d232:	b98e      	cbnz	r6, 2000d258 <memchr+0x78>
2000d234:	d1ee      	bne.n	2000d214 <memchr+0x34>
2000d236:	bcf0      	pop	{r4, r5, r6, r7}
2000d238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
2000d23c:	f002 0207 	and.w	r2, r2, #7
2000d240:	b132      	cbz	r2, 2000d250 <memchr+0x70>
2000d242:	f810 3b01 	ldrb.w	r3, [r0], #1
2000d246:	3a01      	subs	r2, #1
2000d248:	ea83 0301 	eor.w	r3, r3, r1
2000d24c:	b113      	cbz	r3, 2000d254 <memchr+0x74>
2000d24e:	d1f8      	bne.n	2000d242 <memchr+0x62>
2000d250:	2000      	movs	r0, #0
2000d252:	4770      	bx	lr
2000d254:	3801      	subs	r0, #1
2000d256:	4770      	bx	lr
2000d258:	2d00      	cmp	r5, #0
2000d25a:	bf06      	itte	eq
2000d25c:	4635      	moveq	r5, r6
2000d25e:	3803      	subeq	r0, #3
2000d260:	3807      	subne	r0, #7
2000d262:	f015 0f01 	tst.w	r5, #1
2000d266:	d107      	bne.n	2000d278 <memchr+0x98>
2000d268:	3001      	adds	r0, #1
2000d26a:	f415 7f80 	tst.w	r5, #256	; 0x100
2000d26e:	bf02      	ittt	eq
2000d270:	3001      	addeq	r0, #1
2000d272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
2000d276:	3001      	addeq	r0, #1
2000d278:	bcf0      	pop	{r4, r5, r6, r7}
2000d27a:	3801      	subs	r0, #1
2000d27c:	4770      	bx	lr
2000d27e:	bf00      	nop

2000d280 <__aeabi_uldivmod>:
2000d280:	b953      	cbnz	r3, 2000d298 <__aeabi_uldivmod+0x18>
2000d282:	b94a      	cbnz	r2, 2000d298 <__aeabi_uldivmod+0x18>
2000d284:	2900      	cmp	r1, #0
2000d286:	bf08      	it	eq
2000d288:	2800      	cmpeq	r0, #0
2000d28a:	bf1c      	itt	ne
2000d28c:	f04f 31ff 	movne.w	r1, #4294967295
2000d290:	f04f 30ff 	movne.w	r0, #4294967295
2000d294:	f000 b972 	b.w	2000d57c <__aeabi_idiv0>
2000d298:	f1ad 0c08 	sub.w	ip, sp, #8
2000d29c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
2000d2a0:	f000 f806 	bl	2000d2b0 <__udivmoddi4>
2000d2a4:	f8dd e004 	ldr.w	lr, [sp, #4]
2000d2a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
2000d2ac:	b004      	add	sp, #16
2000d2ae:	4770      	bx	lr

2000d2b0 <__udivmoddi4>:
2000d2b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
2000d2b4:	9e08      	ldr	r6, [sp, #32]
2000d2b6:	4604      	mov	r4, r0
2000d2b8:	4688      	mov	r8, r1
2000d2ba:	2b00      	cmp	r3, #0
2000d2bc:	d14b      	bne.n	2000d356 <__udivmoddi4+0xa6>
2000d2be:	428a      	cmp	r2, r1
2000d2c0:	4615      	mov	r5, r2
2000d2c2:	d967      	bls.n	2000d394 <__udivmoddi4+0xe4>
2000d2c4:	fab2 f282 	clz	r2, r2
2000d2c8:	b14a      	cbz	r2, 2000d2de <__udivmoddi4+0x2e>
2000d2ca:	f1c2 0720 	rsb	r7, r2, #32
2000d2ce:	fa01 f302 	lsl.w	r3, r1, r2
2000d2d2:	fa20 f707 	lsr.w	r7, r0, r7
2000d2d6:	4095      	lsls	r5, r2
2000d2d8:	ea47 0803 	orr.w	r8, r7, r3
2000d2dc:	4094      	lsls	r4, r2
2000d2de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
2000d2e2:	0c23      	lsrs	r3, r4, #16
2000d2e4:	fbb8 f7fe 	udiv	r7, r8, lr
2000d2e8:	fa1f fc85 	uxth.w	ip, r5
2000d2ec:	fb0e 8817 	mls	r8, lr, r7, r8
2000d2f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
2000d2f4:	fb07 f10c 	mul.w	r1, r7, ip
2000d2f8:	4299      	cmp	r1, r3
2000d2fa:	d909      	bls.n	2000d310 <__udivmoddi4+0x60>
2000d2fc:	18eb      	adds	r3, r5, r3
2000d2fe:	f107 30ff 	add.w	r0, r7, #4294967295
2000d302:	f080 811b 	bcs.w	2000d53c <__udivmoddi4+0x28c>
2000d306:	4299      	cmp	r1, r3
2000d308:	f240 8118 	bls.w	2000d53c <__udivmoddi4+0x28c>
2000d30c:	3f02      	subs	r7, #2
2000d30e:	442b      	add	r3, r5
2000d310:	1a5b      	subs	r3, r3, r1
2000d312:	b2a4      	uxth	r4, r4
2000d314:	fbb3 f0fe 	udiv	r0, r3, lr
2000d318:	fb0e 3310 	mls	r3, lr, r0, r3
2000d31c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
2000d320:	fb00 fc0c 	mul.w	ip, r0, ip
2000d324:	45a4      	cmp	ip, r4
2000d326:	d909      	bls.n	2000d33c <__udivmoddi4+0x8c>
2000d328:	192c      	adds	r4, r5, r4
2000d32a:	f100 33ff 	add.w	r3, r0, #4294967295
2000d32e:	f080 8107 	bcs.w	2000d540 <__udivmoddi4+0x290>
2000d332:	45a4      	cmp	ip, r4
2000d334:	f240 8104 	bls.w	2000d540 <__udivmoddi4+0x290>
2000d338:	3802      	subs	r0, #2
2000d33a:	442c      	add	r4, r5
2000d33c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
2000d340:	eba4 040c 	sub.w	r4, r4, ip
2000d344:	2700      	movs	r7, #0
2000d346:	b11e      	cbz	r6, 2000d350 <__udivmoddi4+0xa0>
2000d348:	40d4      	lsrs	r4, r2
2000d34a:	2300      	movs	r3, #0
2000d34c:	e9c6 4300 	strd	r4, r3, [r6]
2000d350:	4639      	mov	r1, r7
2000d352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
2000d356:	428b      	cmp	r3, r1
2000d358:	d909      	bls.n	2000d36e <__udivmoddi4+0xbe>
2000d35a:	2e00      	cmp	r6, #0
2000d35c:	f000 80eb 	beq.w	2000d536 <__udivmoddi4+0x286>
2000d360:	2700      	movs	r7, #0
2000d362:	e9c6 0100 	strd	r0, r1, [r6]
2000d366:	4638      	mov	r0, r7
2000d368:	4639      	mov	r1, r7
2000d36a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
2000d36e:	fab3 f783 	clz	r7, r3
2000d372:	2f00      	cmp	r7, #0
2000d374:	d147      	bne.n	2000d406 <__udivmoddi4+0x156>
2000d376:	428b      	cmp	r3, r1
2000d378:	d302      	bcc.n	2000d380 <__udivmoddi4+0xd0>
2000d37a:	4282      	cmp	r2, r0
2000d37c:	f200 80fa 	bhi.w	2000d574 <__udivmoddi4+0x2c4>
2000d380:	1a84      	subs	r4, r0, r2
2000d382:	eb61 0303 	sbc.w	r3, r1, r3
2000d386:	2001      	movs	r0, #1
2000d388:	4698      	mov	r8, r3
2000d38a:	2e00      	cmp	r6, #0
2000d38c:	d0e0      	beq.n	2000d350 <__udivmoddi4+0xa0>
2000d38e:	e9c6 4800 	strd	r4, r8, [r6]
2000d392:	e7dd      	b.n	2000d350 <__udivmoddi4+0xa0>
2000d394:	b902      	cbnz	r2, 2000d398 <__udivmoddi4+0xe8>
2000d396:	deff      	udf	#255	; 0xff
2000d398:	fab2 f282 	clz	r2, r2
2000d39c:	2a00      	cmp	r2, #0
2000d39e:	f040 808f 	bne.w	2000d4c0 <__udivmoddi4+0x210>
2000d3a2:	1b49      	subs	r1, r1, r5
2000d3a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
2000d3a8:	fa1f f885 	uxth.w	r8, r5
2000d3ac:	2701      	movs	r7, #1
2000d3ae:	fbb1 fcfe 	udiv	ip, r1, lr
2000d3b2:	0c23      	lsrs	r3, r4, #16
2000d3b4:	fb0e 111c 	mls	r1, lr, ip, r1
2000d3b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
2000d3bc:	fb08 f10c 	mul.w	r1, r8, ip
2000d3c0:	4299      	cmp	r1, r3
2000d3c2:	d907      	bls.n	2000d3d4 <__udivmoddi4+0x124>
2000d3c4:	18eb      	adds	r3, r5, r3
2000d3c6:	f10c 30ff 	add.w	r0, ip, #4294967295
2000d3ca:	d202      	bcs.n	2000d3d2 <__udivmoddi4+0x122>
2000d3cc:	4299      	cmp	r1, r3
2000d3ce:	f200 80cd 	bhi.w	2000d56c <__udivmoddi4+0x2bc>
2000d3d2:	4684      	mov	ip, r0
2000d3d4:	1a59      	subs	r1, r3, r1
2000d3d6:	b2a3      	uxth	r3, r4
2000d3d8:	fbb1 f0fe 	udiv	r0, r1, lr
2000d3dc:	fb0e 1410 	mls	r4, lr, r0, r1
2000d3e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
2000d3e4:	fb08 f800 	mul.w	r8, r8, r0
2000d3e8:	45a0      	cmp	r8, r4
2000d3ea:	d907      	bls.n	2000d3fc <__udivmoddi4+0x14c>
2000d3ec:	192c      	adds	r4, r5, r4
2000d3ee:	f100 33ff 	add.w	r3, r0, #4294967295
2000d3f2:	d202      	bcs.n	2000d3fa <__udivmoddi4+0x14a>
2000d3f4:	45a0      	cmp	r8, r4
2000d3f6:	f200 80b6 	bhi.w	2000d566 <__udivmoddi4+0x2b6>
2000d3fa:	4618      	mov	r0, r3
2000d3fc:	eba4 0408 	sub.w	r4, r4, r8
2000d400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
2000d404:	e79f      	b.n	2000d346 <__udivmoddi4+0x96>
2000d406:	f1c7 0c20 	rsb	ip, r7, #32
2000d40a:	40bb      	lsls	r3, r7
2000d40c:	fa22 fe0c 	lsr.w	lr, r2, ip
2000d410:	ea4e 0e03 	orr.w	lr, lr, r3
2000d414:	fa01 f407 	lsl.w	r4, r1, r7
2000d418:	fa20 f50c 	lsr.w	r5, r0, ip
2000d41c:	fa21 f30c 	lsr.w	r3, r1, ip
2000d420:	ea4f 481e 	mov.w	r8, lr, lsr #16
2000d424:	4325      	orrs	r5, r4
2000d426:	fbb3 f9f8 	udiv	r9, r3, r8
2000d42a:	0c2c      	lsrs	r4, r5, #16
2000d42c:	fb08 3319 	mls	r3, r8, r9, r3
2000d430:	fa1f fa8e 	uxth.w	sl, lr
2000d434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
2000d438:	fb09 f40a 	mul.w	r4, r9, sl
2000d43c:	429c      	cmp	r4, r3
2000d43e:	fa02 f207 	lsl.w	r2, r2, r7
2000d442:	fa00 f107 	lsl.w	r1, r0, r7
2000d446:	d90b      	bls.n	2000d460 <__udivmoddi4+0x1b0>
2000d448:	eb1e 0303 	adds.w	r3, lr, r3
2000d44c:	f109 30ff 	add.w	r0, r9, #4294967295
2000d450:	f080 8087 	bcs.w	2000d562 <__udivmoddi4+0x2b2>
2000d454:	429c      	cmp	r4, r3
2000d456:	f240 8084 	bls.w	2000d562 <__udivmoddi4+0x2b2>
2000d45a:	f1a9 0902 	sub.w	r9, r9, #2
2000d45e:	4473      	add	r3, lr
2000d460:	1b1b      	subs	r3, r3, r4
2000d462:	b2ad      	uxth	r5, r5
2000d464:	fbb3 f0f8 	udiv	r0, r3, r8
2000d468:	fb08 3310 	mls	r3, r8, r0, r3
2000d46c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
2000d470:	fb00 fa0a 	mul.w	sl, r0, sl
2000d474:	45a2      	cmp	sl, r4
2000d476:	d908      	bls.n	2000d48a <__udivmoddi4+0x1da>
2000d478:	eb1e 0404 	adds.w	r4, lr, r4
2000d47c:	f100 33ff 	add.w	r3, r0, #4294967295
2000d480:	d26b      	bcs.n	2000d55a <__udivmoddi4+0x2aa>
2000d482:	45a2      	cmp	sl, r4
2000d484:	d969      	bls.n	2000d55a <__udivmoddi4+0x2aa>
2000d486:	3802      	subs	r0, #2
2000d488:	4474      	add	r4, lr
2000d48a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
2000d48e:	fba0 8902 	umull	r8, r9, r0, r2
2000d492:	eba4 040a 	sub.w	r4, r4, sl
2000d496:	454c      	cmp	r4, r9
2000d498:	46c2      	mov	sl, r8
2000d49a:	464b      	mov	r3, r9
2000d49c:	d354      	bcc.n	2000d548 <__udivmoddi4+0x298>
2000d49e:	d051      	beq.n	2000d544 <__udivmoddi4+0x294>
2000d4a0:	2e00      	cmp	r6, #0
2000d4a2:	d069      	beq.n	2000d578 <__udivmoddi4+0x2c8>
2000d4a4:	ebb1 050a 	subs.w	r5, r1, sl
2000d4a8:	eb64 0403 	sbc.w	r4, r4, r3
2000d4ac:	fa04 fc0c 	lsl.w	ip, r4, ip
2000d4b0:	40fd      	lsrs	r5, r7
2000d4b2:	40fc      	lsrs	r4, r7
2000d4b4:	ea4c 0505 	orr.w	r5, ip, r5
2000d4b8:	e9c6 5400 	strd	r5, r4, [r6]
2000d4bc:	2700      	movs	r7, #0
2000d4be:	e747      	b.n	2000d350 <__udivmoddi4+0xa0>
2000d4c0:	f1c2 0320 	rsb	r3, r2, #32
2000d4c4:	fa20 f703 	lsr.w	r7, r0, r3
2000d4c8:	4095      	lsls	r5, r2
2000d4ca:	fa01 f002 	lsl.w	r0, r1, r2
2000d4ce:	fa21 f303 	lsr.w	r3, r1, r3
2000d4d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
2000d4d6:	4338      	orrs	r0, r7
2000d4d8:	0c01      	lsrs	r1, r0, #16
2000d4da:	fbb3 f7fe 	udiv	r7, r3, lr
2000d4de:	fa1f f885 	uxth.w	r8, r5
2000d4e2:	fb0e 3317 	mls	r3, lr, r7, r3
2000d4e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
2000d4ea:	fb07 f308 	mul.w	r3, r7, r8
2000d4ee:	428b      	cmp	r3, r1
2000d4f0:	fa04 f402 	lsl.w	r4, r4, r2
2000d4f4:	d907      	bls.n	2000d506 <__udivmoddi4+0x256>
2000d4f6:	1869      	adds	r1, r5, r1
2000d4f8:	f107 3cff 	add.w	ip, r7, #4294967295
2000d4fc:	d22f      	bcs.n	2000d55e <__udivmoddi4+0x2ae>
2000d4fe:	428b      	cmp	r3, r1
2000d500:	d92d      	bls.n	2000d55e <__udivmoddi4+0x2ae>
2000d502:	3f02      	subs	r7, #2
2000d504:	4429      	add	r1, r5
2000d506:	1acb      	subs	r3, r1, r3
2000d508:	b281      	uxth	r1, r0
2000d50a:	fbb3 f0fe 	udiv	r0, r3, lr
2000d50e:	fb0e 3310 	mls	r3, lr, r0, r3
2000d512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
2000d516:	fb00 f308 	mul.w	r3, r0, r8
2000d51a:	428b      	cmp	r3, r1
2000d51c:	d907      	bls.n	2000d52e <__udivmoddi4+0x27e>
2000d51e:	1869      	adds	r1, r5, r1
2000d520:	f100 3cff 	add.w	ip, r0, #4294967295
2000d524:	d217      	bcs.n	2000d556 <__udivmoddi4+0x2a6>
2000d526:	428b      	cmp	r3, r1
2000d528:	d915      	bls.n	2000d556 <__udivmoddi4+0x2a6>
2000d52a:	3802      	subs	r0, #2
2000d52c:	4429      	add	r1, r5
2000d52e:	1ac9      	subs	r1, r1, r3
2000d530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
2000d534:	e73b      	b.n	2000d3ae <__udivmoddi4+0xfe>
2000d536:	4637      	mov	r7, r6
2000d538:	4630      	mov	r0, r6
2000d53a:	e709      	b.n	2000d350 <__udivmoddi4+0xa0>
2000d53c:	4607      	mov	r7, r0
2000d53e:	e6e7      	b.n	2000d310 <__udivmoddi4+0x60>
2000d540:	4618      	mov	r0, r3
2000d542:	e6fb      	b.n	2000d33c <__udivmoddi4+0x8c>
2000d544:	4541      	cmp	r1, r8
2000d546:	d2ab      	bcs.n	2000d4a0 <__udivmoddi4+0x1f0>
2000d548:	ebb8 0a02 	subs.w	sl, r8, r2
2000d54c:	eb69 020e 	sbc.w	r2, r9, lr
2000d550:	3801      	subs	r0, #1
2000d552:	4613      	mov	r3, r2
2000d554:	e7a4      	b.n	2000d4a0 <__udivmoddi4+0x1f0>
2000d556:	4660      	mov	r0, ip
2000d558:	e7e9      	b.n	2000d52e <__udivmoddi4+0x27e>
2000d55a:	4618      	mov	r0, r3
2000d55c:	e795      	b.n	2000d48a <__udivmoddi4+0x1da>
2000d55e:	4667      	mov	r7, ip
2000d560:	e7d1      	b.n	2000d506 <__udivmoddi4+0x256>
2000d562:	4681      	mov	r9, r0
2000d564:	e77c      	b.n	2000d460 <__udivmoddi4+0x1b0>
2000d566:	3802      	subs	r0, #2
2000d568:	442c      	add	r4, r5
2000d56a:	e747      	b.n	2000d3fc <__udivmoddi4+0x14c>
2000d56c:	f1ac 0c02 	sub.w	ip, ip, #2
2000d570:	442b      	add	r3, r5
2000d572:	e72f      	b.n	2000d3d4 <__udivmoddi4+0x124>
2000d574:	4638      	mov	r0, r7
2000d576:	e708      	b.n	2000d38a <__udivmoddi4+0xda>
2000d578:	4637      	mov	r7, r6
2000d57a:	e6e9      	b.n	2000d350 <__udivmoddi4+0xa0>

2000d57c <__aeabi_idiv0>:
2000d57c:	4770      	bx	lr
2000d57e:	bf00      	nop

2000d580 <crc32stream>:
    0xBAD03605UL, 0xCDD70693UL, 0x54DE5729UL, 0x23D967BFUL, 
    0xB3667A2EUL, 0xC4614AB8UL, 0x5D681B02UL, 0x2A6F2B94UL, 
    0xB40BBE37UL, 0xC30C8EA1UL, 0x5A05DF1BUL, 0x2D02EF8DUL };

unsigned long crc32stream( unsigned char c, unsigned long crc )    
{
2000d580:	b480      	push	{r7}
2000d582:	b083      	sub	sp, #12
2000d584:	af00      	add	r7, sp, #0
2000d586:	4603      	mov	r3, r0
2000d588:	6039      	str	r1, [r7, #0]
2000d58a:	71fb      	strb	r3, [r7, #7]
    crc = ((crc>>8) & 0x00FFFFFF) ^ crc32_table[ (crc^c) & 0xFF ];
2000d58c:	683b      	ldr	r3, [r7, #0]
2000d58e:	0a1a      	lsrs	r2, r3, #8
2000d590:	79f9      	ldrb	r1, [r7, #7]
2000d592:	683b      	ldr	r3, [r7, #0]
2000d594:	404b      	eors	r3, r1
2000d596:	b2db      	uxtb	r3, r3
2000d598:	4906      	ldr	r1, [pc, #24]	; (2000d5b4 <crc32stream+0x34>)
2000d59a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
2000d59e:	4053      	eors	r3, r2
2000d5a0:	603b      	str	r3, [r7, #0]
    return( crc^0xFFFFFFFF );
2000d5a2:	683b      	ldr	r3, [r7, #0]
2000d5a4:	43db      	mvns	r3, r3
}
2000d5a6:	4618      	mov	r0, r3
2000d5a8:	370c      	adds	r7, #12
2000d5aa:	46bd      	mov	sp, r7
2000d5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
2000d5b0:	4770      	bx	lr
2000d5b2:	bf00      	nop
2000d5b4:	2001138c 	.word	0x2001138c

2000d5b8 <crc32>:


unsigned long crc32( unsigned char * buf, unsigned long len, unsigned long crc )    
{
2000d5b8:	b580      	push	{r7, lr}
2000d5ba:	b086      	sub	sp, #24
2000d5bc:	af00      	add	r7, sp, #0
2000d5be:	60f8      	str	r0, [r7, #12]
2000d5c0:	60b9      	str	r1, [r7, #8]
2000d5c2:	607a      	str	r2, [r7, #4]
unsigned long i;

    for( i = 0; i < len; i++ )
2000d5c4:	2300      	movs	r3, #0
2000d5c6:	617b      	str	r3, [r7, #20]
2000d5c8:	e00b      	b.n	2000d5e2 <crc32+0x2a>
	{
        crc = crc32stream( buf[ i ], crc );
2000d5ca:	68fa      	ldr	r2, [r7, #12]
2000d5cc:	697b      	ldr	r3, [r7, #20]
2000d5ce:	4413      	add	r3, r2
2000d5d0:	781b      	ldrb	r3, [r3, #0]
2000d5d2:	6879      	ldr	r1, [r7, #4]
2000d5d4:	4618      	mov	r0, r3
2000d5d6:	f7ff ffd3 	bl	2000d580 <crc32stream>
2000d5da:	6078      	str	r0, [r7, #4]
    for( i = 0; i < len; i++ )
2000d5dc:	697b      	ldr	r3, [r7, #20]
2000d5de:	3301      	adds	r3, #1
2000d5e0:	617b      	str	r3, [r7, #20]
2000d5e2:	697a      	ldr	r2, [r7, #20]
2000d5e4:	68bb      	ldr	r3, [r7, #8]
2000d5e6:	429a      	cmp	r2, r3
2000d5e8:	d3ef      	bcc.n	2000d5ca <crc32+0x12>
	}

    return crc;
2000d5ea:	687b      	ldr	r3, [r7, #4]
}
2000d5ec:	4618      	mov	r0, r3
2000d5ee:	3718      	adds	r7, #24
2000d5f0:	46bd      	mov	sp, r7
2000d5f2:	bd80      	pop	{r7, pc}

2000d5f4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
2000d5f4:	b580      	push	{r7, lr}
2000d5f6:	b082      	sub	sp, #8
2000d5f8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
2000d5fa:	2300      	movs	r3, #0
2000d5fc:	607b      	str	r3, [r7, #4]
2000d5fe:	4b10      	ldr	r3, [pc, #64]	; (2000d640 <MX_DMA_Init+0x4c>)
2000d600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2000d602:	4a0f      	ldr	r2, [pc, #60]	; (2000d640 <MX_DMA_Init+0x4c>)
2000d604:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
2000d608:	6313      	str	r3, [r2, #48]	; 0x30
2000d60a:	4b0d      	ldr	r3, [pc, #52]	; (2000d640 <MX_DMA_Init+0x4c>)
2000d60c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2000d60e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
2000d612:	607b      	str	r3, [r7, #4]
2000d614:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
2000d616:	2200      	movs	r2, #0
2000d618:	2100      	movs	r1, #0
2000d61a:	200c      	movs	r0, #12
2000d61c:	f000 fe5d 	bl	2000e2da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
2000d620:	200c      	movs	r0, #12
2000d622:	f000 fe76 	bl	2000e312 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
2000d626:	2200      	movs	r2, #0
2000d628:	2100      	movs	r1, #0
2000d62a:	2011      	movs	r0, #17
2000d62c:	f000 fe55 	bl	2000e2da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
2000d630:	2011      	movs	r0, #17
2000d632:	f000 fe6e 	bl	2000e312 <HAL_NVIC_EnableIRQ>

}
2000d636:	bf00      	nop
2000d638:	3708      	adds	r7, #8
2000d63a:	46bd      	mov	sp, r7
2000d63c:	bd80      	pop	{r7, pc}
2000d63e:	bf00      	nop
2000d640:	40023800 	.word	0x40023800

2000d644 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
2000d644:	b580      	push	{r7, lr}
2000d646:	b08a      	sub	sp, #40	; 0x28
2000d648:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
2000d64a:	f107 0314 	add.w	r3, r7, #20
2000d64e:	2200      	movs	r2, #0
2000d650:	601a      	str	r2, [r3, #0]
2000d652:	605a      	str	r2, [r3, #4]
2000d654:	609a      	str	r2, [r3, #8]
2000d656:	60da      	str	r2, [r3, #12]
2000d658:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
2000d65a:	2300      	movs	r3, #0
2000d65c:	613b      	str	r3, [r7, #16]
2000d65e:	4b27      	ldr	r3, [pc, #156]	; (2000d6fc <MX_GPIO_Init+0xb8>)
2000d660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2000d662:	4a26      	ldr	r2, [pc, #152]	; (2000d6fc <MX_GPIO_Init+0xb8>)
2000d664:	f043 0380 	orr.w	r3, r3, #128	; 0x80
2000d668:	6313      	str	r3, [r2, #48]	; 0x30
2000d66a:	4b24      	ldr	r3, [pc, #144]	; (2000d6fc <MX_GPIO_Init+0xb8>)
2000d66c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2000d66e:	f003 0380 	and.w	r3, r3, #128	; 0x80
2000d672:	613b      	str	r3, [r7, #16]
2000d674:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
2000d676:	2300      	movs	r3, #0
2000d678:	60fb      	str	r3, [r7, #12]
2000d67a:	4b20      	ldr	r3, [pc, #128]	; (2000d6fc <MX_GPIO_Init+0xb8>)
2000d67c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2000d67e:	4a1f      	ldr	r2, [pc, #124]	; (2000d6fc <MX_GPIO_Init+0xb8>)
2000d680:	f043 0308 	orr.w	r3, r3, #8
2000d684:	6313      	str	r3, [r2, #48]	; 0x30
2000d686:	4b1d      	ldr	r3, [pc, #116]	; (2000d6fc <MX_GPIO_Init+0xb8>)
2000d688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2000d68a:	f003 0308 	and.w	r3, r3, #8
2000d68e:	60fb      	str	r3, [r7, #12]
2000d690:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
2000d692:	2300      	movs	r3, #0
2000d694:	60bb      	str	r3, [r7, #8]
2000d696:	4b19      	ldr	r3, [pc, #100]	; (2000d6fc <MX_GPIO_Init+0xb8>)
2000d698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2000d69a:	4a18      	ldr	r2, [pc, #96]	; (2000d6fc <MX_GPIO_Init+0xb8>)
2000d69c:	f043 0301 	orr.w	r3, r3, #1
2000d6a0:	6313      	str	r3, [r2, #48]	; 0x30
2000d6a2:	4b16      	ldr	r3, [pc, #88]	; (2000d6fc <MX_GPIO_Init+0xb8>)
2000d6a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2000d6a6:	f003 0301 	and.w	r3, r3, #1
2000d6aa:	60bb      	str	r3, [r7, #8]
2000d6ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
2000d6ae:	2300      	movs	r3, #0
2000d6b0:	607b      	str	r3, [r7, #4]
2000d6b2:	4b12      	ldr	r3, [pc, #72]	; (2000d6fc <MX_GPIO_Init+0xb8>)
2000d6b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2000d6b6:	4a11      	ldr	r2, [pc, #68]	; (2000d6fc <MX_GPIO_Init+0xb8>)
2000d6b8:	f043 0302 	orr.w	r3, r3, #2
2000d6bc:	6313      	str	r3, [r2, #48]	; 0x30
2000d6be:	4b0f      	ldr	r3, [pc, #60]	; (2000d6fc <MX_GPIO_Init+0xb8>)
2000d6c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2000d6c2:	f003 0302 	and.w	r3, r3, #2
2000d6c6:	607b      	str	r3, [r7, #4]
2000d6c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
2000d6ca:	2200      	movs	r2, #0
2000d6cc:	f44f 4160 	mov.w	r1, #57344	; 0xe000
2000d6d0:	480b      	ldr	r0, [pc, #44]	; (2000d700 <MX_GPIO_Init+0xbc>)
2000d6d2:	f001 fb63 	bl	2000ed9c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
2000d6d6:	f44f 4360 	mov.w	r3, #57344	; 0xe000
2000d6da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
2000d6dc:	2301      	movs	r3, #1
2000d6de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
2000d6e0:	2300      	movs	r3, #0
2000d6e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
2000d6e4:	2302      	movs	r3, #2
2000d6e6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
2000d6e8:	f107 0314 	add.w	r3, r7, #20
2000d6ec:	4619      	mov	r1, r3
2000d6ee:	4804      	ldr	r0, [pc, #16]	; (2000d700 <MX_GPIO_Init+0xbc>)
2000d6f0:	f001 f9ba 	bl	2000ea68 <HAL_GPIO_Init>

}
2000d6f4:	bf00      	nop
2000d6f6:	3728      	adds	r7, #40	; 0x28
2000d6f8:	46bd      	mov	sp, r7
2000d6fa:	bd80      	pop	{r7, pc}
2000d6fc:	40023800 	.word	0x40023800
2000d700:	40020c00 	.word	0x40020c00

2000d704 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
2000d704:	b580      	push	{r7, lr}
2000d706:	af00      	add	r7, sp, #0

  hiwdg.Instance = IWDG;
2000d708:	4b09      	ldr	r3, [pc, #36]	; (2000d730 <MX_IWDG_Init+0x2c>)
2000d70a:	4a0a      	ldr	r2, [pc, #40]	; (2000d734 <MX_IWDG_Init+0x30>)
2000d70c:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_64;
2000d70e:	4b08      	ldr	r3, [pc, #32]	; (2000d730 <MX_IWDG_Init+0x2c>)
2000d710:	2204      	movs	r2, #4
2000d712:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4095;
2000d714:	4b06      	ldr	r3, [pc, #24]	; (2000d730 <MX_IWDG_Init+0x2c>)
2000d716:	f640 72ff 	movw	r2, #4095	; 0xfff
2000d71a:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
2000d71c:	4804      	ldr	r0, [pc, #16]	; (2000d730 <MX_IWDG_Init+0x2c>)
2000d71e:	f001 fb56 	bl	2000edce <HAL_IWDG_Init>
2000d722:	4603      	mov	r3, r0
2000d724:	2b00      	cmp	r3, #0
2000d726:	d001      	beq.n	2000d72c <MX_IWDG_Init+0x28>
  {
    Error_Handler();
2000d728:	f000 f8d0 	bl	2000d8cc <Error_Handler>
  }

}
2000d72c:	bf00      	nop
2000d72e:	bd80      	pop	{r7, pc}
2000d730:	200118ac 	.word	0x200118ac
2000d734:	40003000 	.word	0x40003000

2000d738 <HAL_UART_RxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
2000d738:	b580      	push	{r7, lr}
2000d73a:	b082      	sub	sp, #8
2000d73c:	af00      	add	r7, sp, #0
2000d73e:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3)
2000d740:	687b      	ldr	r3, [r7, #4]
2000d742:	681b      	ldr	r3, [r3, #0]
2000d744:	4a10      	ldr	r2, [pc, #64]	; (2000d788 <HAL_UART_RxCpltCallback+0x50>)
2000d746:	4293      	cmp	r3, r2
2000d748:	d11a      	bne.n	2000d780 <HAL_UART_RxCpltCallback+0x48>
	{
		if (huart3.RxXferSize == BUF_LENGTH) {
2000d74a:	4b10      	ldr	r3, [pc, #64]	; (2000d78c <HAL_UART_RxCpltCallback+0x54>)
2000d74c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
2000d74e:	2b0a      	cmp	r3, #10
2000d750:	d10b      	bne.n	2000d76a <HAL_UART_RxCpltCallback+0x32>
			SDK_TRACE_Timestamp(PRINT, 1);
2000d752:	2101      	movs	r1, #1
2000d754:	2004      	movs	r0, #4
2000d756:	f000 fa63 	bl	2000dc20 <SDK_TRACE_Timestamp>
			SDK_TRACE_Print(buf);
2000d75a:	480d      	ldr	r0, [pc, #52]	; (2000d790 <HAL_UART_RxCpltCallback+0x58>)
2000d75c:	f000 fab2 	bl	2000dcc4 <SDK_TRACE_Print>
			SDK_TRACE_Timestamp(PRINT, 0);
2000d760:	2100      	movs	r1, #0
2000d762:	2004      	movs	r0, #4
2000d764:	f000 fa5c 	bl	2000dc20 <SDK_TRACE_Timestamp>
			SDK_TRACE_Timestamp(PRINT, 1);
			SDK_TRACE_Print("Test failed");
			SDK_TRACE_Timestamp(PRINT, 0);
		}
	}
}
2000d768:	e00a      	b.n	2000d780 <HAL_UART_RxCpltCallback+0x48>
			SDK_TRACE_Timestamp(PRINT, 1);
2000d76a:	2101      	movs	r1, #1
2000d76c:	2004      	movs	r0, #4
2000d76e:	f000 fa57 	bl	2000dc20 <SDK_TRACE_Timestamp>
			SDK_TRACE_Print("Test failed");
2000d772:	4808      	ldr	r0, [pc, #32]	; (2000d794 <HAL_UART_RxCpltCallback+0x5c>)
2000d774:	f000 faa6 	bl	2000dcc4 <SDK_TRACE_Print>
			SDK_TRACE_Timestamp(PRINT, 0);
2000d778:	2100      	movs	r1, #0
2000d77a:	2004      	movs	r0, #4
2000d77c:	f000 fa50 	bl	2000dc20 <SDK_TRACE_Timestamp>
}
2000d780:	bf00      	nop
2000d782:	3708      	adds	r7, #8
2000d784:	46bd      	mov	sp, r7
2000d786:	bd80      	pop	{r7, pc}
2000d788:	40004800 	.word	0x40004800
2000d78c:	20011958 	.word	0x20011958
2000d790:	2001178c 	.word	0x2001178c
2000d794:	2001136c 	.word	0x2001136c

2000d798 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
2000d798:	b580      	push	{r7, lr}
2000d79a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
2000d79c:	f000 fc50 	bl	2000e040 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
2000d7a0:	f000 f828 	bl	2000d7f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
2000d7a4:	f7ff ff4e 	bl	2000d644 <MX_GPIO_Init>
  MX_DMA_Init();
2000d7a8:	f7ff ff24 	bl	2000d5f4 <MX_DMA_Init>
  MX_IWDG_Init();
2000d7ac:	f7ff ffaa 	bl	2000d704 <MX_IWDG_Init>
  MX_USART2_UART_Init();
2000d7b0:	f000 fade 	bl	2000dd70 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
2000d7b4:	f000 fb06 	bl	2000ddc4 <MX_USART3_UART_Init>
  MX_TIM10_Init();
2000d7b8:	f000 f98c 	bl	2000dad4 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */

  /* Do not remove this code below */
  MX_TRACE_Init();
2000d7bc:	f000 f9d6 	bl	2000db6c <MX_TRACE_Init>
  SDK_TRACE_Start();
2000d7c0:	f000 f9f6 	bl	2000dbb0 <SDK_TRACE_Start>
  /* Do not remove this code from above */

  /* Place your code from here */

  HAL_UART_Receive_DMA(&huart3, (uint8_t *)buf, BUF_LENGTH);
2000d7c4:	220a      	movs	r2, #10
2000d7c6:	4907      	ldr	r1, [pc, #28]	; (2000d7e4 <main+0x4c>)
2000d7c8:	4807      	ldr	r0, [pc, #28]	; (2000d7e8 <main+0x50>)
2000d7ca:	f002 fa6d 	bl	2000fca8 <HAL_UART_Receive_DMA>
  HAL_TIM_Base_Start_IT(&htim10);
2000d7ce:	4807      	ldr	r0, [pc, #28]	; (2000d7ec <main+0x54>)
2000d7d0:	f001 ff9d 	bl	2000f70e <HAL_TIM_Base_Start_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if(tim_count > 5)
2000d7d4:	4b06      	ldr	r3, [pc, #24]	; (2000d7f0 <main+0x58>)
2000d7d6:	881b      	ldrh	r3, [r3, #0]
2000d7d8:	2b05      	cmp	r3, #5
2000d7da:	d9fb      	bls.n	2000d7d4 <main+0x3c>
		  SDK_TRACE_Stop();
2000d7dc:	f000 f9f8 	bl	2000dbd0 <SDK_TRACE_Stop>
	  if(tim_count > 5)
2000d7e0:	e7f8      	b.n	2000d7d4 <main+0x3c>
2000d7e2:	bf00      	nop
2000d7e4:	2001178c 	.word	0x2001178c
2000d7e8:	20011958 	.word	0x20011958
2000d7ec:	200118b8 	.word	0x200118b8
2000d7f0:	20011898 	.word	0x20011898

2000d7f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
2000d7f4:	b580      	push	{r7, lr}
2000d7f6:	b094      	sub	sp, #80	; 0x50
2000d7f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
2000d7fa:	f107 0320 	add.w	r3, r7, #32
2000d7fe:	2230      	movs	r2, #48	; 0x30
2000d800:	2100      	movs	r1, #0
2000d802:	4618      	mov	r0, r3
2000d804:	f003 f998 	bl	20010b38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
2000d808:	f107 030c 	add.w	r3, r7, #12
2000d80c:	2200      	movs	r2, #0
2000d80e:	601a      	str	r2, [r3, #0]
2000d810:	605a      	str	r2, [r3, #4]
2000d812:	609a      	str	r2, [r3, #8]
2000d814:	60da      	str	r2, [r3, #12]
2000d816:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
2000d818:	2300      	movs	r3, #0
2000d81a:	60bb      	str	r3, [r7, #8]
2000d81c:	4b29      	ldr	r3, [pc, #164]	; (2000d8c4 <SystemClock_Config+0xd0>)
2000d81e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2000d820:	4a28      	ldr	r2, [pc, #160]	; (2000d8c4 <SystemClock_Config+0xd0>)
2000d822:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
2000d826:	6413      	str	r3, [r2, #64]	; 0x40
2000d828:	4b26      	ldr	r3, [pc, #152]	; (2000d8c4 <SystemClock_Config+0xd0>)
2000d82a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2000d82c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
2000d830:	60bb      	str	r3, [r7, #8]
2000d832:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
2000d834:	2300      	movs	r3, #0
2000d836:	607b      	str	r3, [r7, #4]
2000d838:	4b23      	ldr	r3, [pc, #140]	; (2000d8c8 <SystemClock_Config+0xd4>)
2000d83a:	681b      	ldr	r3, [r3, #0]
2000d83c:	4a22      	ldr	r2, [pc, #136]	; (2000d8c8 <SystemClock_Config+0xd4>)
2000d83e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
2000d842:	6013      	str	r3, [r2, #0]
2000d844:	4b20      	ldr	r3, [pc, #128]	; (2000d8c8 <SystemClock_Config+0xd4>)
2000d846:	681b      	ldr	r3, [r3, #0]
2000d848:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
2000d84c:	607b      	str	r3, [r7, #4]
2000d84e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
2000d850:	2309      	movs	r3, #9
2000d852:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
2000d854:	f44f 3380 	mov.w	r3, #65536	; 0x10000
2000d858:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
2000d85a:	2301      	movs	r3, #1
2000d85c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
2000d85e:	2302      	movs	r3, #2
2000d860:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
2000d862:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
2000d866:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
2000d868:	2319      	movs	r3, #25
2000d86a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
2000d86c:	f44f 73a8 	mov.w	r3, #336	; 0x150
2000d870:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
2000d872:	2302      	movs	r3, #2
2000d874:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
2000d876:	2304      	movs	r3, #4
2000d878:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
2000d87a:	f107 0320 	add.w	r3, r7, #32
2000d87e:	4618      	mov	r0, r3
2000d880:	f001 fade 	bl	2000ee40 <HAL_RCC_OscConfig>
2000d884:	4603      	mov	r3, r0
2000d886:	2b00      	cmp	r3, #0
2000d888:	d001      	beq.n	2000d88e <SystemClock_Config+0x9a>
  {
    Error_Handler();
2000d88a:	f000 f81f 	bl	2000d8cc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
2000d88e:	230f      	movs	r3, #15
2000d890:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
2000d892:	2302      	movs	r3, #2
2000d894:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
2000d896:	2300      	movs	r3, #0
2000d898:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
2000d89a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
2000d89e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
2000d8a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
2000d8a4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
2000d8a6:	f107 030c 	add.w	r3, r7, #12
2000d8aa:	2105      	movs	r1, #5
2000d8ac:	4618      	mov	r0, r3
2000d8ae:	f001 fd37 	bl	2000f320 <HAL_RCC_ClockConfig>
2000d8b2:	4603      	mov	r3, r0
2000d8b4:	2b00      	cmp	r3, #0
2000d8b6:	d001      	beq.n	2000d8bc <SystemClock_Config+0xc8>
  {
    Error_Handler();
2000d8b8:	f000 f808 	bl	2000d8cc <Error_Handler>
  }
}
2000d8bc:	bf00      	nop
2000d8be:	3750      	adds	r7, #80	; 0x50
2000d8c0:	46bd      	mov	sp, r7
2000d8c2:	bd80      	pop	{r7, pc}
2000d8c4:	40023800 	.word	0x40023800
2000d8c8:	40007000 	.word	0x40007000

2000d8cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
2000d8cc:	b480      	push	{r7}
2000d8ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
2000d8d0:	bf00      	nop
2000d8d2:	46bd      	mov	sp, r7
2000d8d4:	f85d 7b04 	ldr.w	r7, [sp], #4
2000d8d8:	4770      	bx	lr
	...

2000d8dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
2000d8dc:	b480      	push	{r7}
2000d8de:	b083      	sub	sp, #12
2000d8e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
2000d8e2:	2300      	movs	r3, #0
2000d8e4:	607b      	str	r3, [r7, #4]
2000d8e6:	4b10      	ldr	r3, [pc, #64]	; (2000d928 <HAL_MspInit+0x4c>)
2000d8e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2000d8ea:	4a0f      	ldr	r2, [pc, #60]	; (2000d928 <HAL_MspInit+0x4c>)
2000d8ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
2000d8f0:	6453      	str	r3, [r2, #68]	; 0x44
2000d8f2:	4b0d      	ldr	r3, [pc, #52]	; (2000d928 <HAL_MspInit+0x4c>)
2000d8f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2000d8f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
2000d8fa:	607b      	str	r3, [r7, #4]
2000d8fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
2000d8fe:	2300      	movs	r3, #0
2000d900:	603b      	str	r3, [r7, #0]
2000d902:	4b09      	ldr	r3, [pc, #36]	; (2000d928 <HAL_MspInit+0x4c>)
2000d904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2000d906:	4a08      	ldr	r2, [pc, #32]	; (2000d928 <HAL_MspInit+0x4c>)
2000d908:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
2000d90c:	6413      	str	r3, [r2, #64]	; 0x40
2000d90e:	4b06      	ldr	r3, [pc, #24]	; (2000d928 <HAL_MspInit+0x4c>)
2000d910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2000d912:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
2000d916:	603b      	str	r3, [r7, #0]
2000d918:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
2000d91a:	bf00      	nop
2000d91c:	370c      	adds	r7, #12
2000d91e:	46bd      	mov	sp, r7
2000d920:	f85d 7b04 	ldr.w	r7, [sp], #4
2000d924:	4770      	bx	lr
2000d926:	bf00      	nop
2000d928:	40023800 	.word	0x40023800

2000d92c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
2000d92c:	b480      	push	{r7}
2000d92e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
2000d930:	bf00      	nop
2000d932:	46bd      	mov	sp, r7
2000d934:	f85d 7b04 	ldr.w	r7, [sp], #4
2000d938:	4770      	bx	lr

2000d93a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
2000d93a:	b480      	push	{r7}
2000d93c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
2000d93e:	e7fe      	b.n	2000d93e <HardFault_Handler+0x4>

2000d940 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
2000d940:	b480      	push	{r7}
2000d942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
2000d944:	e7fe      	b.n	2000d944 <MemManage_Handler+0x4>

2000d946 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
2000d946:	b480      	push	{r7}
2000d948:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
2000d94a:	e7fe      	b.n	2000d94a <BusFault_Handler+0x4>

2000d94c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
2000d94c:	b480      	push	{r7}
2000d94e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
2000d950:	e7fe      	b.n	2000d950 <UsageFault_Handler+0x4>

2000d952 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
2000d952:	b480      	push	{r7}
2000d954:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
2000d956:	bf00      	nop
2000d958:	46bd      	mov	sp, r7
2000d95a:	f85d 7b04 	ldr.w	r7, [sp], #4
2000d95e:	4770      	bx	lr

2000d960 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
2000d960:	b480      	push	{r7}
2000d962:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
2000d964:	bf00      	nop
2000d966:	46bd      	mov	sp, r7
2000d968:	f85d 7b04 	ldr.w	r7, [sp], #4
2000d96c:	4770      	bx	lr

2000d96e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
2000d96e:	b480      	push	{r7}
2000d970:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
2000d972:	bf00      	nop
2000d974:	46bd      	mov	sp, r7
2000d976:	f85d 7b04 	ldr.w	r7, [sp], #4
2000d97a:	4770      	bx	lr

2000d97c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
2000d97c:	b580      	push	{r7, lr}
2000d97e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
2000d980:	f000 fbb0 	bl	2000e0e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
2000d984:	bf00      	nop
2000d986:	bd80      	pop	{r7, pc}

2000d988 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
2000d988:	b580      	push	{r7, lr}
2000d98a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
2000d98c:	4802      	ldr	r0, [pc, #8]	; (2000d998 <DMA1_Stream1_IRQHandler+0x10>)
2000d98e:	f000 fe03 	bl	2000e598 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
2000d992:	bf00      	nop
2000d994:	bd80      	pop	{r7, pc}
2000d996:	bf00      	nop
2000d998:	200118f8 	.word	0x200118f8

2000d99c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
2000d99c:	b580      	push	{r7, lr}
2000d99e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
2000d9a0:	4802      	ldr	r0, [pc, #8]	; (2000d9ac <DMA1_Stream6_IRQHandler+0x10>)
2000d9a2:	f000 fdf9 	bl	2000e598 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
2000d9a6:	bf00      	nop
2000d9a8:	bd80      	pop	{r7, pc}
2000d9aa:	bf00      	nop
2000d9ac:	20011998 	.word	0x20011998

2000d9b0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
2000d9b0:	b580      	push	{r7, lr}
2000d9b2:	b084      	sub	sp, #16
2000d9b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
2000d9b6:	4817      	ldr	r0, [pc, #92]	; (2000da14 <TIM1_UP_TIM10_IRQHandler+0x64>)
2000d9b8:	f001 fecd 	bl	2000f756 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  char test_str[BUF_LENGTH] = {0};
2000d9bc:	1d3b      	adds	r3, r7, #4
2000d9be:	2200      	movs	r2, #0
2000d9c0:	601a      	str	r2, [r3, #0]
2000d9c2:	605a      	str	r2, [r3, #4]
2000d9c4:	811a      	strh	r2, [r3, #8]
  sprintf(test_str, "TIM %d", tim_count);
2000d9c6:	4b14      	ldr	r3, [pc, #80]	; (2000da18 <TIM1_UP_TIM10_IRQHandler+0x68>)
2000d9c8:	881b      	ldrh	r3, [r3, #0]
2000d9ca:	461a      	mov	r2, r3
2000d9cc:	1d3b      	adds	r3, r7, #4
2000d9ce:	4913      	ldr	r1, [pc, #76]	; (2000da1c <TIM1_UP_TIM10_IRQHandler+0x6c>)
2000d9d0:	4618      	mov	r0, r3
2000d9d2:	f003 f8b9 	bl	20010b48 <siprintf>

  SDK_TRACE_Timestamp(PRINT, 1);
2000d9d6:	2101      	movs	r1, #1
2000d9d8:	2004      	movs	r0, #4
2000d9da:	f000 f921 	bl	2000dc20 <SDK_TRACE_Timestamp>
  SDK_TRACE_Print(test_str);
2000d9de:	1d3b      	adds	r3, r7, #4
2000d9e0:	4618      	mov	r0, r3
2000d9e2:	f000 f96f 	bl	2000dcc4 <SDK_TRACE_Print>
  SDK_TRACE_Timestamp(PRINT, 0);
2000d9e6:	2100      	movs	r1, #0
2000d9e8:	2004      	movs	r0, #4
2000d9ea:	f000 f919 	bl	2000dc20 <SDK_TRACE_Timestamp>

  if(tim_count == 4)
2000d9ee:	4b0a      	ldr	r3, [pc, #40]	; (2000da18 <TIM1_UP_TIM10_IRQHandler+0x68>)
2000d9f0:	881b      	ldrh	r3, [r3, #0]
2000d9f2:	2b04      	cmp	r3, #4
2000d9f4:	d104      	bne.n	2000da00 <TIM1_UP_TIM10_IRQHandler+0x50>
	  HAL_UART_Transmit_DMA(&huart2, (uint8_t *)"UART test", BUF_LENGTH);
2000d9f6:	220a      	movs	r2, #10
2000d9f8:	4909      	ldr	r1, [pc, #36]	; (2000da20 <TIM1_UP_TIM10_IRQHandler+0x70>)
2000d9fa:	480a      	ldr	r0, [pc, #40]	; (2000da24 <TIM1_UP_TIM10_IRQHandler+0x74>)
2000d9fc:	f002 f8e8 	bl	2000fbd0 <HAL_UART_Transmit_DMA>

  tim_count++;
2000da00:	4b05      	ldr	r3, [pc, #20]	; (2000da18 <TIM1_UP_TIM10_IRQHandler+0x68>)
2000da02:	881b      	ldrh	r3, [r3, #0]
2000da04:	3301      	adds	r3, #1
2000da06:	b29a      	uxth	r2, r3
2000da08:	4b03      	ldr	r3, [pc, #12]	; (2000da18 <TIM1_UP_TIM10_IRQHandler+0x68>)
2000da0a:	801a      	strh	r2, [r3, #0]

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
2000da0c:	bf00      	nop
2000da0e:	3710      	adds	r7, #16
2000da10:	46bd      	mov	sp, r7
2000da12:	bd80      	pop	{r7, pc}
2000da14:	200118b8 	.word	0x200118b8
2000da18:	20011898 	.word	0x20011898
2000da1c:	20011378 	.word	0x20011378
2000da20:	20011380 	.word	0x20011380
2000da24:	200119f8 	.word	0x200119f8

2000da28 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
2000da28:	b580      	push	{r7, lr}
2000da2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
2000da2c:	4802      	ldr	r0, [pc, #8]	; (2000da38 <USART3_IRQHandler+0x10>)
2000da2e:	f002 f9bb 	bl	2000fda8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
2000da32:	bf00      	nop
2000da34:	bd80      	pop	{r7, pc}
2000da36:	bf00      	nop
2000da38:	20011958 	.word	0x20011958

2000da3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
2000da3c:	b580      	push	{r7, lr}
2000da3e:	b086      	sub	sp, #24
2000da40:	af00      	add	r7, sp, #0
2000da42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
2000da44:	4a14      	ldr	r2, [pc, #80]	; (2000da98 <_sbrk+0x5c>)
2000da46:	4b15      	ldr	r3, [pc, #84]	; (2000da9c <_sbrk+0x60>)
2000da48:	1ad3      	subs	r3, r2, r3
2000da4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
2000da4c:	697b      	ldr	r3, [r7, #20]
2000da4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
2000da50:	4b13      	ldr	r3, [pc, #76]	; (2000daa0 <_sbrk+0x64>)
2000da52:	681b      	ldr	r3, [r3, #0]
2000da54:	2b00      	cmp	r3, #0
2000da56:	d102      	bne.n	2000da5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
2000da58:	4b11      	ldr	r3, [pc, #68]	; (2000daa0 <_sbrk+0x64>)
2000da5a:	4a12      	ldr	r2, [pc, #72]	; (2000daa4 <_sbrk+0x68>)
2000da5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
2000da5e:	4b10      	ldr	r3, [pc, #64]	; (2000daa0 <_sbrk+0x64>)
2000da60:	681a      	ldr	r2, [r3, #0]
2000da62:	687b      	ldr	r3, [r7, #4]
2000da64:	4413      	add	r3, r2
2000da66:	693a      	ldr	r2, [r7, #16]
2000da68:	429a      	cmp	r2, r3
2000da6a:	d207      	bcs.n	2000da7c <_sbrk+0x40>
  {
    errno = ENOMEM;
2000da6c:	f003 f83a 	bl	20010ae4 <__errno>
2000da70:	4602      	mov	r2, r0
2000da72:	230c      	movs	r3, #12
2000da74:	6013      	str	r3, [r2, #0]
    return (void *)-1;
2000da76:	f04f 33ff 	mov.w	r3, #4294967295
2000da7a:	e009      	b.n	2000da90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
2000da7c:	4b08      	ldr	r3, [pc, #32]	; (2000daa0 <_sbrk+0x64>)
2000da7e:	681b      	ldr	r3, [r3, #0]
2000da80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
2000da82:	4b07      	ldr	r3, [pc, #28]	; (2000daa0 <_sbrk+0x64>)
2000da84:	681a      	ldr	r2, [r3, #0]
2000da86:	687b      	ldr	r3, [r7, #4]
2000da88:	4413      	add	r3, r2
2000da8a:	4a05      	ldr	r2, [pc, #20]	; (2000daa0 <_sbrk+0x64>)
2000da8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
2000da8e:	68fb      	ldr	r3, [r7, #12]
}
2000da90:	4618      	mov	r0, r3
2000da92:	3718      	adds	r7, #24
2000da94:	46bd      	mov	sp, r7
2000da96:	bd80      	pop	{r7, pc}
2000da98:	20020000 	.word	0x20020000
2000da9c:	00000400 	.word	0x00000400
2000daa0:	2001189c 	.word	0x2001189c
2000daa4:	20011a40 	.word	0x20011a40

2000daa8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
2000daa8:	b480      	push	{r7}
2000daaa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
2000daac:	4b07      	ldr	r3, [pc, #28]	; (2000dacc <SystemInit+0x24>)
2000daae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
2000dab2:	4a06      	ldr	r2, [pc, #24]	; (2000dacc <SystemInit+0x24>)
2000dab4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
2000dab8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
2000dabc:	4b03      	ldr	r3, [pc, #12]	; (2000dacc <SystemInit+0x24>)
2000dabe:	4a04      	ldr	r2, [pc, #16]	; (2000dad0 <SystemInit+0x28>)
2000dac0:	609a      	str	r2, [r3, #8]
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif
}
2000dac2:	bf00      	nop
2000dac4:	46bd      	mov	sp, r7
2000dac6:	f85d 7b04 	ldr.w	r7, [sp], #4
2000daca:	4770      	bx	lr
2000dacc:	e000ed00 	.word	0xe000ed00
2000dad0:	2000d000 	.word	0x2000d000

2000dad4 <MX_TIM10_Init>:

TIM_HandleTypeDef htim10;

/* TIM10 init function */
void MX_TIM10_Init(void)
{
2000dad4:	b580      	push	{r7, lr}
2000dad6:	af00      	add	r7, sp, #0

  htim10.Instance = TIM10;
2000dad8:	4b0e      	ldr	r3, [pc, #56]	; (2000db14 <MX_TIM10_Init+0x40>)
2000dada:	4a0f      	ldr	r2, [pc, #60]	; (2000db18 <MX_TIM10_Init+0x44>)
2000dadc:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 16799;
2000dade:	4b0d      	ldr	r3, [pc, #52]	; (2000db14 <MX_TIM10_Init+0x40>)
2000dae0:	f244 129f 	movw	r2, #16799	; 0x419f
2000dae4:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
2000dae6:	4b0b      	ldr	r3, [pc, #44]	; (2000db14 <MX_TIM10_Init+0x40>)
2000dae8:	2200      	movs	r2, #0
2000daea:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 4999;
2000daec:	4b09      	ldr	r3, [pc, #36]	; (2000db14 <MX_TIM10_Init+0x40>)
2000daee:	f241 3287 	movw	r2, #4999	; 0x1387
2000daf2:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
2000daf4:	4b07      	ldr	r3, [pc, #28]	; (2000db14 <MX_TIM10_Init+0x40>)
2000daf6:	2200      	movs	r2, #0
2000daf8:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
2000dafa:	4b06      	ldr	r3, [pc, #24]	; (2000db14 <MX_TIM10_Init+0x40>)
2000dafc:	2200      	movs	r2, #0
2000dafe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
2000db00:	4804      	ldr	r0, [pc, #16]	; (2000db14 <MX_TIM10_Init+0x40>)
2000db02:	f001 fdd9 	bl	2000f6b8 <HAL_TIM_Base_Init>
2000db06:	4603      	mov	r3, r0
2000db08:	2b00      	cmp	r3, #0
2000db0a:	d001      	beq.n	2000db10 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
2000db0c:	f7ff fede 	bl	2000d8cc <Error_Handler>
  }

}
2000db10:	bf00      	nop
2000db12:	bd80      	pop	{r7, pc}
2000db14:	200118b8 	.word	0x200118b8
2000db18:	40014400 	.word	0x40014400

2000db1c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
2000db1c:	b580      	push	{r7, lr}
2000db1e:	b084      	sub	sp, #16
2000db20:	af00      	add	r7, sp, #0
2000db22:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM10)
2000db24:	687b      	ldr	r3, [r7, #4]
2000db26:	681b      	ldr	r3, [r3, #0]
2000db28:	4a0e      	ldr	r2, [pc, #56]	; (2000db64 <HAL_TIM_Base_MspInit+0x48>)
2000db2a:	4293      	cmp	r3, r2
2000db2c:	d115      	bne.n	2000db5a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* TIM10 clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
2000db2e:	2300      	movs	r3, #0
2000db30:	60fb      	str	r3, [r7, #12]
2000db32:	4b0d      	ldr	r3, [pc, #52]	; (2000db68 <HAL_TIM_Base_MspInit+0x4c>)
2000db34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2000db36:	4a0c      	ldr	r2, [pc, #48]	; (2000db68 <HAL_TIM_Base_MspInit+0x4c>)
2000db38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
2000db3c:	6453      	str	r3, [r2, #68]	; 0x44
2000db3e:	4b0a      	ldr	r3, [pc, #40]	; (2000db68 <HAL_TIM_Base_MspInit+0x4c>)
2000db40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2000db42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
2000db46:	60fb      	str	r3, [r7, #12]
2000db48:	68fb      	ldr	r3, [r7, #12]

    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
2000db4a:	2200      	movs	r2, #0
2000db4c:	2100      	movs	r1, #0
2000db4e:	2019      	movs	r0, #25
2000db50:	f000 fbc3 	bl	2000e2da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
2000db54:	2019      	movs	r0, #25
2000db56:	f000 fbdc 	bl	2000e312 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
2000db5a:	bf00      	nop
2000db5c:	3710      	adds	r7, #16
2000db5e:	46bd      	mov	sp, r7
2000db60:	bd80      	pop	{r7, pc}
2000db62:	bf00      	nop
2000db64:	40014400 	.word	0x40014400
2000db68:	40023800 	.word	0x40023800

2000db6c <MX_TRACE_Init>:
 * ----------------------------------------------------------------------
 * Trace initialization function
 *-----------------------------------------------------------------------
 */
void MX_TRACE_Init(void)
{
2000db6c:	b480      	push	{r7}
2000db6e:	af00      	add	r7, sp, #0
	InitCC();
2000db70:	4b0c      	ldr	r3, [pc, #48]	; (2000dba4 <MX_TRACE_Init+0x38>)
2000db72:	681b      	ldr	r3, [r3, #0]
2000db74:	4a0b      	ldr	r2, [pc, #44]	; (2000dba4 <MX_TRACE_Init+0x38>)
2000db76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
2000db7a:	6013      	str	r3, [r2, #0]
	ResetCC();
2000db7c:	4b0a      	ldr	r3, [pc, #40]	; (2000dba8 <MX_TRACE_Init+0x3c>)
2000db7e:	2200      	movs	r2, #0
2000db80:	601a      	str	r2, [r3, #0]
	TI->printlog_size = 0x00;
2000db82:	4b0a      	ldr	r3, [pc, #40]	; (2000dbac <MX_TRACE_Init+0x40>)
2000db84:	681b      	ldr	r3, [r3, #0]
2000db86:	2200      	movs	r2, #0
2000db88:	605a      	str	r2, [r3, #4]
	TI->tracelog_size = 0x00;
2000db8a:	4b08      	ldr	r3, [pc, #32]	; (2000dbac <MX_TRACE_Init+0x40>)
2000db8c:	681b      	ldr	r3, [r3, #0]
2000db8e:	2200      	movs	r2, #0
2000db90:	601a      	str	r2, [r3, #0]
	TI->dumpbuf_size = 0x00;
2000db92:	4b06      	ldr	r3, [pc, #24]	; (2000dbac <MX_TRACE_Init+0x40>)
2000db94:	681b      	ldr	r3, [r3, #0]
2000db96:	2200      	movs	r2, #0
2000db98:	609a      	str	r2, [r3, #8]
}
2000db9a:	bf00      	nop
2000db9c:	46bd      	mov	sp, r7
2000db9e:	f85d 7b04 	ldr.w	r7, [sp], #4
2000dba2:	4770      	bx	lr
2000dba4:	e000edfc 	.word	0xe000edfc
2000dba8:	e0001004 	.word	0xe0001004
2000dbac:	20011800 	.word	0x20011800

2000dbb0 <SDK_TRACE_Start>:
 * ----------------------------------------------------------------------
 * Start trace recording function
 *-----------------------------------------------------------------------
 */
void SDK_TRACE_Start(void)
{
2000dbb0:	b480      	push	{r7}
2000dbb2:	af00      	add	r7, sp, #0
	EnableCC();
2000dbb4:	4b05      	ldr	r3, [pc, #20]	; (2000dbcc <SDK_TRACE_Start+0x1c>)
2000dbb6:	681b      	ldr	r3, [r3, #0]
2000dbb8:	4a04      	ldr	r2, [pc, #16]	; (2000dbcc <SDK_TRACE_Start+0x1c>)
2000dbba:	f043 0301 	orr.w	r3, r3, #1
2000dbbe:	6013      	str	r3, [r2, #0]
}
2000dbc0:	bf00      	nop
2000dbc2:	46bd      	mov	sp, r7
2000dbc4:	f85d 7b04 	ldr.w	r7, [sp], #4
2000dbc8:	4770      	bx	lr
2000dbca:	bf00      	nop
2000dbcc:	e0001000 	.word	0xe0001000

2000dbd0 <SDK_TRACE_Stop>:
 * ----------------------------------------------------------------------
 * Stop trace recording function
 *-----------------------------------------------------------------------
 */
void SDK_TRACE_Stop(void)
{
2000dbd0:	b598      	push	{r3, r4, r7, lr}
2000dbd2:	af00      	add	r7, sp, #0
	DisableCC();
2000dbd4:	4b0c      	ldr	r3, [pc, #48]	; (2000dc08 <SDK_TRACE_Stop+0x38>)
2000dbd6:	681b      	ldr	r3, [r3, #0]
2000dbd8:	4a0b      	ldr	r2, [pc, #44]	; (2000dc08 <SDK_TRACE_Stop+0x38>)
2000dbda:	f023 0301 	bic.w	r3, r3, #1
2000dbde:	6013      	str	r3, [r2, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
2000dbe0:	b672      	cpsid	i
	__disable_irq();
	*CRC32 = crc32((unsigned char *)TRACEINFO_ADDR, sizeof(traceinfo_t) + (TI->tracelog_size), 0);
2000dbe2:	4b0a      	ldr	r3, [pc, #40]	; (2000dc0c <SDK_TRACE_Stop+0x3c>)
2000dbe4:	681b      	ldr	r3, [r3, #0]
2000dbe6:	681b      	ldr	r3, [r3, #0]
2000dbe8:	f103 0110 	add.w	r1, r3, #16
2000dbec:	4b08      	ldr	r3, [pc, #32]	; (2000dc10 <SDK_TRACE_Stop+0x40>)
2000dbee:	681c      	ldr	r4, [r3, #0]
2000dbf0:	2200      	movs	r2, #0
2000dbf2:	4808      	ldr	r0, [pc, #32]	; (2000dc14 <SDK_TRACE_Stop+0x44>)
2000dbf4:	f7ff fce0 	bl	2000d5b8 <crc32>
2000dbf8:	4603      	mov	r3, r0
2000dbfa:	6023      	str	r3, [r4, #0]
	SCB->AIRCR = 0x05FA0004;
2000dbfc:	4b06      	ldr	r3, [pc, #24]	; (2000dc18 <SDK_TRACE_Stop+0x48>)
2000dbfe:	4a07      	ldr	r2, [pc, #28]	; (2000dc1c <SDK_TRACE_Stop+0x4c>)
2000dc00:	60da      	str	r2, [r3, #12]
}
2000dc02:	bf00      	nop
2000dc04:	bd98      	pop	{r3, r4, r7, pc}
2000dc06:	bf00      	nop
2000dc08:	e0001000 	.word	0xe0001000
2000dc0c:	20011800 	.word	0x20011800
2000dc10:	20011808 	.word	0x20011808
2000dc14:	10000004 	.word	0x10000004
2000dc18:	e000ed00 	.word	0xe000ed00
2000dc1c:	05fa0004 	.word	0x05fa0004

2000dc20 <SDK_TRACE_Timestamp>:
 * @param id Event ID (For example: LED1)
 * @param value LED port state (0 or 1)
 *-----------------------------------------------------------------------
 */
void SDK_TRACE_Timestamp(uint8_t id, uint8_t value)
{
2000dc20:	b590      	push	{r4, r7, lr}
2000dc22:	b085      	sub	sp, #20
2000dc24:	af00      	add	r7, sp, #0
2000dc26:	4603      	mov	r3, r0
2000dc28:	460a      	mov	r2, r1
2000dc2a:	71fb      	strb	r3, [r7, #7]
2000dc2c:	4613      	mov	r3, r2
2000dc2e:	71bb      	strb	r3, [r7, #6]
	uint32_t eCode = 0x00;
2000dc30:	2300      	movs	r3, #0
2000dc32:	60fb      	str	r3, [r7, #12]
	eCode = (eCode << 8) + 0x01;
2000dc34:	68fb      	ldr	r3, [r7, #12]
2000dc36:	021b      	lsls	r3, r3, #8
2000dc38:	3301      	adds	r3, #1
2000dc3a:	60fb      	str	r3, [r7, #12]
	eCode = (eCode << 8) + value;
2000dc3c:	68fb      	ldr	r3, [r7, #12]
2000dc3e:	021a      	lsls	r2, r3, #8
2000dc40:	79bb      	ldrb	r3, [r7, #6]
2000dc42:	4413      	add	r3, r2
2000dc44:	60fb      	str	r3, [r7, #12]
	eCode = (eCode << 8) + id;
2000dc46:	68fb      	ldr	r3, [r7, #12]
2000dc48:	021a      	lsls	r2, r3, #8
2000dc4a:	79fb      	ldrb	r3, [r7, #7]
2000dc4c:	4413      	add	r3, r2
2000dc4e:	60fb      	str	r3, [r7, #12]
	TL[TI->tracelog_size/8].timecode = GetCC() / (HAL_RCC_GetHCLKFreq() / CLK_Prescaler);
2000dc50:	4b17      	ldr	r3, [pc, #92]	; (2000dcb0 <SDK_TRACE_Timestamp+0x90>)
2000dc52:	681c      	ldr	r4, [r3, #0]
2000dc54:	f001 fcfc 	bl	2000f650 <HAL_RCC_GetHCLKFreq>
2000dc58:	4602      	mov	r2, r0
2000dc5a:	4b16      	ldr	r3, [pc, #88]	; (2000dcb4 <SDK_TRACE_Timestamp+0x94>)
2000dc5c:	fba3 2302 	umull	r2, r3, r3, r2
2000dc60:	0c9a      	lsrs	r2, r3, #18
2000dc62:	4b15      	ldr	r3, [pc, #84]	; (2000dcb8 <SDK_TRACE_Timestamp+0x98>)
2000dc64:	6819      	ldr	r1, [r3, #0]
2000dc66:	4b15      	ldr	r3, [pc, #84]	; (2000dcbc <SDK_TRACE_Timestamp+0x9c>)
2000dc68:	681b      	ldr	r3, [r3, #0]
2000dc6a:	681b      	ldr	r3, [r3, #0]
2000dc6c:	f023 0307 	bic.w	r3, r3, #7
2000dc70:	440b      	add	r3, r1
2000dc72:	fbb4 f2f2 	udiv	r2, r4, r2
2000dc76:	601a      	str	r2, [r3, #0]
	TL[TI->tracelog_size/8].eventcode = eCode;
2000dc78:	4b0f      	ldr	r3, [pc, #60]	; (2000dcb8 <SDK_TRACE_Timestamp+0x98>)
2000dc7a:	681a      	ldr	r2, [r3, #0]
2000dc7c:	4b0f      	ldr	r3, [pc, #60]	; (2000dcbc <SDK_TRACE_Timestamp+0x9c>)
2000dc7e:	681b      	ldr	r3, [r3, #0]
2000dc80:	681b      	ldr	r3, [r3, #0]
2000dc82:	f023 0307 	bic.w	r3, r3, #7
2000dc86:	4413      	add	r3, r2
2000dc88:	68fa      	ldr	r2, [r7, #12]
2000dc8a:	605a      	str	r2, [r3, #4]
	TI->tracelog_size+=8;
2000dc8c:	4b0b      	ldr	r3, [pc, #44]	; (2000dcbc <SDK_TRACE_Timestamp+0x9c>)
2000dc8e:	681b      	ldr	r3, [r3, #0]
2000dc90:	681a      	ldr	r2, [r3, #0]
2000dc92:	4b0a      	ldr	r3, [pc, #40]	; (2000dcbc <SDK_TRACE_Timestamp+0x9c>)
2000dc94:	681b      	ldr	r3, [r3, #0]
2000dc96:	3208      	adds	r2, #8
2000dc98:	601a      	str	r2, [r3, #0]
	eventId++;
2000dc9a:	4b09      	ldr	r3, [pc, #36]	; (2000dcc0 <SDK_TRACE_Timestamp+0xa0>)
2000dc9c:	781b      	ldrb	r3, [r3, #0]
2000dc9e:	3301      	adds	r3, #1
2000dca0:	b2da      	uxtb	r2, r3
2000dca2:	4b07      	ldr	r3, [pc, #28]	; (2000dcc0 <SDK_TRACE_Timestamp+0xa0>)
2000dca4:	701a      	strb	r2, [r3, #0]
}
2000dca6:	bf00      	nop
2000dca8:	3714      	adds	r7, #20
2000dcaa:	46bd      	mov	sp, r7
2000dcac:	bd90      	pop	{r4, r7, pc}
2000dcae:	bf00      	nop
2000dcb0:	e0001004 	.word	0xe0001004
2000dcb4:	431bde83 	.word	0x431bde83
2000dcb8:	20011804 	.word	0x20011804
2000dcbc:	20011800 	.word	0x20011800
2000dcc0:	200118a0 	.word	0x200118a0

2000dcc4 <SDK_TRACE_Print>:
 * Function for writing a message to the trace buffer
 * @param data Pointer to array of chars
 *-----------------------------------------------------------------------
 */
void SDK_TRACE_Print(const char * data)
{
2000dcc4:	b590      	push	{r4, r7, lr}
2000dcc6:	b085      	sub	sp, #20
2000dcc8:	af00      	add	r7, sp, #0
2000dcca:	6078      	str	r0, [r7, #4]
	uint8_t len = strlen(data);
2000dccc:	6878      	ldr	r0, [r7, #4]
2000dcce:	f7ff fa7f 	bl	2000d1d0 <strlen>
2000dcd2:	4603      	mov	r3, r0
2000dcd4:	72fb      	strb	r3, [r7, #11]

	*(__IO uint32_t *)(Print_Write_Address+TI->printlog_size) = GetCC() / (HAL_RCC_GetHCLKFreq() / CLK_Prescaler);
2000dcd6:	4b22      	ldr	r3, [pc, #136]	; (2000dd60 <SDK_TRACE_Print+0x9c>)
2000dcd8:	681c      	ldr	r4, [r3, #0]
2000dcda:	f001 fcb9 	bl	2000f650 <HAL_RCC_GetHCLKFreq>
2000dcde:	4602      	mov	r2, r0
2000dce0:	4b20      	ldr	r3, [pc, #128]	; (2000dd64 <SDK_TRACE_Print+0xa0>)
2000dce2:	fba3 2302 	umull	r2, r3, r3, r2
2000dce6:	0c9b      	lsrs	r3, r3, #18
2000dce8:	4a1f      	ldr	r2, [pc, #124]	; (2000dd68 <SDK_TRACE_Print+0xa4>)
2000dcea:	6812      	ldr	r2, [r2, #0]
2000dcec:	6851      	ldr	r1, [r2, #4]
2000dcee:	4a1f      	ldr	r2, [pc, #124]	; (2000dd6c <SDK_TRACE_Print+0xa8>)
2000dcf0:	6812      	ldr	r2, [r2, #0]
2000dcf2:	440a      	add	r2, r1
2000dcf4:	fbb4 f3f3 	udiv	r3, r4, r3
2000dcf8:	6013      	str	r3, [r2, #0]
	TI->printlog_size+=4;
2000dcfa:	4b1b      	ldr	r3, [pc, #108]	; (2000dd68 <SDK_TRACE_Print+0xa4>)
2000dcfc:	681b      	ldr	r3, [r3, #0]
2000dcfe:	685a      	ldr	r2, [r3, #4]
2000dd00:	4b19      	ldr	r3, [pc, #100]	; (2000dd68 <SDK_TRACE_Print+0xa4>)
2000dd02:	681b      	ldr	r3, [r3, #0]
2000dd04:	3204      	adds	r2, #4
2000dd06:	605a      	str	r2, [r3, #4]

	*(__IO uint8_t *)(Print_Write_Address+TI->printlog_size) = len;
2000dd08:	4b17      	ldr	r3, [pc, #92]	; (2000dd68 <SDK_TRACE_Print+0xa4>)
2000dd0a:	681b      	ldr	r3, [r3, #0]
2000dd0c:	685a      	ldr	r2, [r3, #4]
2000dd0e:	4b17      	ldr	r3, [pc, #92]	; (2000dd6c <SDK_TRACE_Print+0xa8>)
2000dd10:	681b      	ldr	r3, [r3, #0]
2000dd12:	4413      	add	r3, r2
2000dd14:	461a      	mov	r2, r3
2000dd16:	7afb      	ldrb	r3, [r7, #11]
2000dd18:	7013      	strb	r3, [r2, #0]
	TI->printlog_size++;
2000dd1a:	4b13      	ldr	r3, [pc, #76]	; (2000dd68 <SDK_TRACE_Print+0xa4>)
2000dd1c:	681b      	ldr	r3, [r3, #0]
2000dd1e:	685a      	ldr	r2, [r3, #4]
2000dd20:	3201      	adds	r2, #1
2000dd22:	605a      	str	r2, [r3, #4]

	for (int i = 0; i < len; i++)
2000dd24:	2300      	movs	r3, #0
2000dd26:	60fb      	str	r3, [r7, #12]
2000dd28:	e012      	b.n	2000dd50 <SDK_TRACE_Print+0x8c>
	{
		*(__IO uint8_t *)(Print_Write_Address+TI->printlog_size) = data[i];
2000dd2a:	68fb      	ldr	r3, [r7, #12]
2000dd2c:	687a      	ldr	r2, [r7, #4]
2000dd2e:	4413      	add	r3, r2
2000dd30:	4a0d      	ldr	r2, [pc, #52]	; (2000dd68 <SDK_TRACE_Print+0xa4>)
2000dd32:	6812      	ldr	r2, [r2, #0]
2000dd34:	6851      	ldr	r1, [r2, #4]
2000dd36:	4a0d      	ldr	r2, [pc, #52]	; (2000dd6c <SDK_TRACE_Print+0xa8>)
2000dd38:	6812      	ldr	r2, [r2, #0]
2000dd3a:	440a      	add	r2, r1
2000dd3c:	781b      	ldrb	r3, [r3, #0]
2000dd3e:	7013      	strb	r3, [r2, #0]
		TI->printlog_size++;
2000dd40:	4b09      	ldr	r3, [pc, #36]	; (2000dd68 <SDK_TRACE_Print+0xa4>)
2000dd42:	681b      	ldr	r3, [r3, #0]
2000dd44:	685a      	ldr	r2, [r3, #4]
2000dd46:	3201      	adds	r2, #1
2000dd48:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < len; i++)
2000dd4a:	68fb      	ldr	r3, [r7, #12]
2000dd4c:	3301      	adds	r3, #1
2000dd4e:	60fb      	str	r3, [r7, #12]
2000dd50:	7afb      	ldrb	r3, [r7, #11]
2000dd52:	68fa      	ldr	r2, [r7, #12]
2000dd54:	429a      	cmp	r2, r3
2000dd56:	dbe8      	blt.n	2000dd2a <SDK_TRACE_Print+0x66>
	}
}
2000dd58:	bf00      	nop
2000dd5a:	3714      	adds	r7, #20
2000dd5c:	46bd      	mov	sp, r7
2000dd5e:	bd90      	pop	{r4, r7, pc}
2000dd60:	e0001004 	.word	0xe0001004
2000dd64:	431bde83 	.word	0x431bde83
2000dd68:	20011800 	.word	0x20011800
2000dd6c:	2001180c 	.word	0x2001180c

2000dd70 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
2000dd70:	b580      	push	{r7, lr}
2000dd72:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
2000dd74:	4b11      	ldr	r3, [pc, #68]	; (2000ddbc <MX_USART2_UART_Init+0x4c>)
2000dd76:	4a12      	ldr	r2, [pc, #72]	; (2000ddc0 <MX_USART2_UART_Init+0x50>)
2000dd78:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
2000dd7a:	4b10      	ldr	r3, [pc, #64]	; (2000ddbc <MX_USART2_UART_Init+0x4c>)
2000dd7c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
2000dd80:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
2000dd82:	4b0e      	ldr	r3, [pc, #56]	; (2000ddbc <MX_USART2_UART_Init+0x4c>)
2000dd84:	2200      	movs	r2, #0
2000dd86:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
2000dd88:	4b0c      	ldr	r3, [pc, #48]	; (2000ddbc <MX_USART2_UART_Init+0x4c>)
2000dd8a:	2200      	movs	r2, #0
2000dd8c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
2000dd8e:	4b0b      	ldr	r3, [pc, #44]	; (2000ddbc <MX_USART2_UART_Init+0x4c>)
2000dd90:	2200      	movs	r2, #0
2000dd92:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
2000dd94:	4b09      	ldr	r3, [pc, #36]	; (2000ddbc <MX_USART2_UART_Init+0x4c>)
2000dd96:	220c      	movs	r2, #12
2000dd98:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
2000dd9a:	4b08      	ldr	r3, [pc, #32]	; (2000ddbc <MX_USART2_UART_Init+0x4c>)
2000dd9c:	2200      	movs	r2, #0
2000dd9e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
2000dda0:	4b06      	ldr	r3, [pc, #24]	; (2000ddbc <MX_USART2_UART_Init+0x4c>)
2000dda2:	2200      	movs	r2, #0
2000dda4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
2000dda6:	4805      	ldr	r0, [pc, #20]	; (2000ddbc <MX_USART2_UART_Init+0x4c>)
2000dda8:	f001 fec4 	bl	2000fb34 <HAL_UART_Init>
2000ddac:	4603      	mov	r3, r0
2000ddae:	2b00      	cmp	r3, #0
2000ddb0:	d001      	beq.n	2000ddb6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
2000ddb2:	f7ff fd8b 	bl	2000d8cc <Error_Handler>
  }

}
2000ddb6:	bf00      	nop
2000ddb8:	bd80      	pop	{r7, pc}
2000ddba:	bf00      	nop
2000ddbc:	200119f8 	.word	0x200119f8
2000ddc0:	40004400 	.word	0x40004400

2000ddc4 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
2000ddc4:	b580      	push	{r7, lr}
2000ddc6:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
2000ddc8:	4b11      	ldr	r3, [pc, #68]	; (2000de10 <MX_USART3_UART_Init+0x4c>)
2000ddca:	4a12      	ldr	r2, [pc, #72]	; (2000de14 <MX_USART3_UART_Init+0x50>)
2000ddcc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
2000ddce:	4b10      	ldr	r3, [pc, #64]	; (2000de10 <MX_USART3_UART_Init+0x4c>)
2000ddd0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
2000ddd4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
2000ddd6:	4b0e      	ldr	r3, [pc, #56]	; (2000de10 <MX_USART3_UART_Init+0x4c>)
2000ddd8:	2200      	movs	r2, #0
2000ddda:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
2000dddc:	4b0c      	ldr	r3, [pc, #48]	; (2000de10 <MX_USART3_UART_Init+0x4c>)
2000ddde:	2200      	movs	r2, #0
2000dde0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
2000dde2:	4b0b      	ldr	r3, [pc, #44]	; (2000de10 <MX_USART3_UART_Init+0x4c>)
2000dde4:	2200      	movs	r2, #0
2000dde6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
2000dde8:	4b09      	ldr	r3, [pc, #36]	; (2000de10 <MX_USART3_UART_Init+0x4c>)
2000ddea:	220c      	movs	r2, #12
2000ddec:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
2000ddee:	4b08      	ldr	r3, [pc, #32]	; (2000de10 <MX_USART3_UART_Init+0x4c>)
2000ddf0:	2200      	movs	r2, #0
2000ddf2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
2000ddf4:	4b06      	ldr	r3, [pc, #24]	; (2000de10 <MX_USART3_UART_Init+0x4c>)
2000ddf6:	2200      	movs	r2, #0
2000ddf8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
2000ddfa:	4805      	ldr	r0, [pc, #20]	; (2000de10 <MX_USART3_UART_Init+0x4c>)
2000ddfc:	f001 fe9a 	bl	2000fb34 <HAL_UART_Init>
2000de00:	4603      	mov	r3, r0
2000de02:	2b00      	cmp	r3, #0
2000de04:	d001      	beq.n	2000de0a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
2000de06:	f7ff fd61 	bl	2000d8cc <Error_Handler>
  }

}
2000de0a:	bf00      	nop
2000de0c:	bd80      	pop	{r7, pc}
2000de0e:	bf00      	nop
2000de10:	20011958 	.word	0x20011958
2000de14:	40004800 	.word	0x40004800

2000de18 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
2000de18:	b580      	push	{r7, lr}
2000de1a:	b08c      	sub	sp, #48	; 0x30
2000de1c:	af00      	add	r7, sp, #0
2000de1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
2000de20:	f107 031c 	add.w	r3, r7, #28
2000de24:	2200      	movs	r2, #0
2000de26:	601a      	str	r2, [r3, #0]
2000de28:	605a      	str	r2, [r3, #4]
2000de2a:	609a      	str	r2, [r3, #8]
2000de2c:	60da      	str	r2, [r3, #12]
2000de2e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
2000de30:	687b      	ldr	r3, [r7, #4]
2000de32:	681b      	ldr	r3, [r3, #0]
2000de34:	4a65      	ldr	r2, [pc, #404]	; (2000dfcc <HAL_UART_MspInit+0x1b4>)
2000de36:	4293      	cmp	r3, r2
2000de38:	d15b      	bne.n	2000def2 <HAL_UART_MspInit+0xda>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
2000de3a:	2300      	movs	r3, #0
2000de3c:	61bb      	str	r3, [r7, #24]
2000de3e:	4b64      	ldr	r3, [pc, #400]	; (2000dfd0 <HAL_UART_MspInit+0x1b8>)
2000de40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2000de42:	4a63      	ldr	r2, [pc, #396]	; (2000dfd0 <HAL_UART_MspInit+0x1b8>)
2000de44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
2000de48:	6413      	str	r3, [r2, #64]	; 0x40
2000de4a:	4b61      	ldr	r3, [pc, #388]	; (2000dfd0 <HAL_UART_MspInit+0x1b8>)
2000de4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2000de4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
2000de52:	61bb      	str	r3, [r7, #24]
2000de54:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
2000de56:	2300      	movs	r3, #0
2000de58:	617b      	str	r3, [r7, #20]
2000de5a:	4b5d      	ldr	r3, [pc, #372]	; (2000dfd0 <HAL_UART_MspInit+0x1b8>)
2000de5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2000de5e:	4a5c      	ldr	r2, [pc, #368]	; (2000dfd0 <HAL_UART_MspInit+0x1b8>)
2000de60:	f043 0308 	orr.w	r3, r3, #8
2000de64:	6313      	str	r3, [r2, #48]	; 0x30
2000de66:	4b5a      	ldr	r3, [pc, #360]	; (2000dfd0 <HAL_UART_MspInit+0x1b8>)
2000de68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2000de6a:	f003 0308 	and.w	r3, r3, #8
2000de6e:	617b      	str	r3, [r7, #20]
2000de70:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
2000de72:	2360      	movs	r3, #96	; 0x60
2000de74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
2000de76:	2302      	movs	r3, #2
2000de78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
2000de7a:	2300      	movs	r3, #0
2000de7c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
2000de7e:	2303      	movs	r3, #3
2000de80:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
2000de82:	2307      	movs	r3, #7
2000de84:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
2000de86:	f107 031c 	add.w	r3, r7, #28
2000de8a:	4619      	mov	r1, r3
2000de8c:	4851      	ldr	r0, [pc, #324]	; (2000dfd4 <HAL_UART_MspInit+0x1bc>)
2000de8e:	f000 fdeb 	bl	2000ea68 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
2000de92:	4b51      	ldr	r3, [pc, #324]	; (2000dfd8 <HAL_UART_MspInit+0x1c0>)
2000de94:	4a51      	ldr	r2, [pc, #324]	; (2000dfdc <HAL_UART_MspInit+0x1c4>)
2000de96:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
2000de98:	4b4f      	ldr	r3, [pc, #316]	; (2000dfd8 <HAL_UART_MspInit+0x1c0>)
2000de9a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
2000de9e:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
2000dea0:	4b4d      	ldr	r3, [pc, #308]	; (2000dfd8 <HAL_UART_MspInit+0x1c0>)
2000dea2:	2240      	movs	r2, #64	; 0x40
2000dea4:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
2000dea6:	4b4c      	ldr	r3, [pc, #304]	; (2000dfd8 <HAL_UART_MspInit+0x1c0>)
2000dea8:	2200      	movs	r2, #0
2000deaa:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
2000deac:	4b4a      	ldr	r3, [pc, #296]	; (2000dfd8 <HAL_UART_MspInit+0x1c0>)
2000deae:	f44f 6280 	mov.w	r2, #1024	; 0x400
2000deb2:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
2000deb4:	4b48      	ldr	r3, [pc, #288]	; (2000dfd8 <HAL_UART_MspInit+0x1c0>)
2000deb6:	2200      	movs	r2, #0
2000deb8:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
2000deba:	4b47      	ldr	r3, [pc, #284]	; (2000dfd8 <HAL_UART_MspInit+0x1c0>)
2000debc:	2200      	movs	r2, #0
2000debe:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
2000dec0:	4b45      	ldr	r3, [pc, #276]	; (2000dfd8 <HAL_UART_MspInit+0x1c0>)
2000dec2:	2200      	movs	r2, #0
2000dec4:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
2000dec6:	4b44      	ldr	r3, [pc, #272]	; (2000dfd8 <HAL_UART_MspInit+0x1c0>)
2000dec8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
2000decc:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
2000dece:	4b42      	ldr	r3, [pc, #264]	; (2000dfd8 <HAL_UART_MspInit+0x1c0>)
2000ded0:	2200      	movs	r2, #0
2000ded2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
2000ded4:	4840      	ldr	r0, [pc, #256]	; (2000dfd8 <HAL_UART_MspInit+0x1c0>)
2000ded6:	f000 fa37 	bl	2000e348 <HAL_DMA_Init>
2000deda:	4603      	mov	r3, r0
2000dedc:	2b00      	cmp	r3, #0
2000dede:	d001      	beq.n	2000dee4 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
2000dee0:	f7ff fcf4 	bl	2000d8cc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
2000dee4:	687b      	ldr	r3, [r7, #4]
2000dee6:	4a3c      	ldr	r2, [pc, #240]	; (2000dfd8 <HAL_UART_MspInit+0x1c0>)
2000dee8:	631a      	str	r2, [r3, #48]	; 0x30
2000deea:	4a3b      	ldr	r2, [pc, #236]	; (2000dfd8 <HAL_UART_MspInit+0x1c0>)
2000deec:	687b      	ldr	r3, [r7, #4]
2000deee:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
2000def0:	e068      	b.n	2000dfc4 <HAL_UART_MspInit+0x1ac>
  else if(uartHandle->Instance==USART3)
2000def2:	687b      	ldr	r3, [r7, #4]
2000def4:	681b      	ldr	r3, [r3, #0]
2000def6:	4a3a      	ldr	r2, [pc, #232]	; (2000dfe0 <HAL_UART_MspInit+0x1c8>)
2000def8:	4293      	cmp	r3, r2
2000defa:	d163      	bne.n	2000dfc4 <HAL_UART_MspInit+0x1ac>
    __HAL_RCC_USART3_CLK_ENABLE();
2000defc:	2300      	movs	r3, #0
2000defe:	613b      	str	r3, [r7, #16]
2000df00:	4b33      	ldr	r3, [pc, #204]	; (2000dfd0 <HAL_UART_MspInit+0x1b8>)
2000df02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2000df04:	4a32      	ldr	r2, [pc, #200]	; (2000dfd0 <HAL_UART_MspInit+0x1b8>)
2000df06:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
2000df0a:	6413      	str	r3, [r2, #64]	; 0x40
2000df0c:	4b30      	ldr	r3, [pc, #192]	; (2000dfd0 <HAL_UART_MspInit+0x1b8>)
2000df0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2000df10:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
2000df14:	613b      	str	r3, [r7, #16]
2000df16:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
2000df18:	2300      	movs	r3, #0
2000df1a:	60fb      	str	r3, [r7, #12]
2000df1c:	4b2c      	ldr	r3, [pc, #176]	; (2000dfd0 <HAL_UART_MspInit+0x1b8>)
2000df1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2000df20:	4a2b      	ldr	r2, [pc, #172]	; (2000dfd0 <HAL_UART_MspInit+0x1b8>)
2000df22:	f043 0308 	orr.w	r3, r3, #8
2000df26:	6313      	str	r3, [r2, #48]	; 0x30
2000df28:	4b29      	ldr	r3, [pc, #164]	; (2000dfd0 <HAL_UART_MspInit+0x1b8>)
2000df2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2000df2c:	f003 0308 	and.w	r3, r3, #8
2000df30:	60fb      	str	r3, [r7, #12]
2000df32:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
2000df34:	f44f 7340 	mov.w	r3, #768	; 0x300
2000df38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
2000df3a:	2302      	movs	r3, #2
2000df3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
2000df3e:	2300      	movs	r3, #0
2000df40:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
2000df42:	2303      	movs	r3, #3
2000df44:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
2000df46:	2307      	movs	r3, #7
2000df48:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
2000df4a:	f107 031c 	add.w	r3, r7, #28
2000df4e:	4619      	mov	r1, r3
2000df50:	4820      	ldr	r0, [pc, #128]	; (2000dfd4 <HAL_UART_MspInit+0x1bc>)
2000df52:	f000 fd89 	bl	2000ea68 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
2000df56:	4b23      	ldr	r3, [pc, #140]	; (2000dfe4 <HAL_UART_MspInit+0x1cc>)
2000df58:	4a23      	ldr	r2, [pc, #140]	; (2000dfe8 <HAL_UART_MspInit+0x1d0>)
2000df5a:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
2000df5c:	4b21      	ldr	r3, [pc, #132]	; (2000dfe4 <HAL_UART_MspInit+0x1cc>)
2000df5e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
2000df62:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
2000df64:	4b1f      	ldr	r3, [pc, #124]	; (2000dfe4 <HAL_UART_MspInit+0x1cc>)
2000df66:	2200      	movs	r2, #0
2000df68:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
2000df6a:	4b1e      	ldr	r3, [pc, #120]	; (2000dfe4 <HAL_UART_MspInit+0x1cc>)
2000df6c:	2200      	movs	r2, #0
2000df6e:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
2000df70:	4b1c      	ldr	r3, [pc, #112]	; (2000dfe4 <HAL_UART_MspInit+0x1cc>)
2000df72:	f44f 6280 	mov.w	r2, #1024	; 0x400
2000df76:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
2000df78:	4b1a      	ldr	r3, [pc, #104]	; (2000dfe4 <HAL_UART_MspInit+0x1cc>)
2000df7a:	2200      	movs	r2, #0
2000df7c:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
2000df7e:	4b19      	ldr	r3, [pc, #100]	; (2000dfe4 <HAL_UART_MspInit+0x1cc>)
2000df80:	2200      	movs	r2, #0
2000df82:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
2000df84:	4b17      	ldr	r3, [pc, #92]	; (2000dfe4 <HAL_UART_MspInit+0x1cc>)
2000df86:	2200      	movs	r2, #0
2000df88:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
2000df8a:	4b16      	ldr	r3, [pc, #88]	; (2000dfe4 <HAL_UART_MspInit+0x1cc>)
2000df8c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
2000df90:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
2000df92:	4b14      	ldr	r3, [pc, #80]	; (2000dfe4 <HAL_UART_MspInit+0x1cc>)
2000df94:	2200      	movs	r2, #0
2000df96:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
2000df98:	4812      	ldr	r0, [pc, #72]	; (2000dfe4 <HAL_UART_MspInit+0x1cc>)
2000df9a:	f000 f9d5 	bl	2000e348 <HAL_DMA_Init>
2000df9e:	4603      	mov	r3, r0
2000dfa0:	2b00      	cmp	r3, #0
2000dfa2:	d001      	beq.n	2000dfa8 <HAL_UART_MspInit+0x190>
      Error_Handler();
2000dfa4:	f7ff fc92 	bl	2000d8cc <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
2000dfa8:	687b      	ldr	r3, [r7, #4]
2000dfaa:	4a0e      	ldr	r2, [pc, #56]	; (2000dfe4 <HAL_UART_MspInit+0x1cc>)
2000dfac:	635a      	str	r2, [r3, #52]	; 0x34
2000dfae:	4a0d      	ldr	r2, [pc, #52]	; (2000dfe4 <HAL_UART_MspInit+0x1cc>)
2000dfb0:	687b      	ldr	r3, [r7, #4]
2000dfb2:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
2000dfb4:	2200      	movs	r2, #0
2000dfb6:	2100      	movs	r1, #0
2000dfb8:	2027      	movs	r0, #39	; 0x27
2000dfba:	f000 f98e 	bl	2000e2da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
2000dfbe:	2027      	movs	r0, #39	; 0x27
2000dfc0:	f000 f9a7 	bl	2000e312 <HAL_NVIC_EnableIRQ>
}
2000dfc4:	bf00      	nop
2000dfc6:	3730      	adds	r7, #48	; 0x30
2000dfc8:	46bd      	mov	sp, r7
2000dfca:	bd80      	pop	{r7, pc}
2000dfcc:	40004400 	.word	0x40004400
2000dfd0:	40023800 	.word	0x40023800
2000dfd4:	40020c00 	.word	0x40020c00
2000dfd8:	20011998 	.word	0x20011998
2000dfdc:	400260a0 	.word	0x400260a0
2000dfe0:	40004800 	.word	0x40004800
2000dfe4:	200118f8 	.word	0x200118f8
2000dfe8:	40026028 	.word	0x40026028

2000dfec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
2000dfec:	f8df d034 	ldr.w	sp, [pc, #52]	; 2000e024 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
2000dff0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
2000dff2:	e003      	b.n	2000dffc <LoopCopyDataInit>

2000dff4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
2000dff4:	4b0c      	ldr	r3, [pc, #48]	; (2000e028 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
2000dff6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
2000dff8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
2000dffa:	3104      	adds	r1, #4

2000dffc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
2000dffc:	480b      	ldr	r0, [pc, #44]	; (2000e02c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
2000dffe:	4b0c      	ldr	r3, [pc, #48]	; (2000e030 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
2000e000:	1842      	adds	r2, r0, r1
  cmp  r2, r3
2000e002:	429a      	cmp	r2, r3
  bcc  CopyDataInit
2000e004:	d3f6      	bcc.n	2000dff4 <CopyDataInit>
  ldr  r2, =_sbss
2000e006:	4a0b      	ldr	r2, [pc, #44]	; (2000e034 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
2000e008:	e002      	b.n	2000e010 <LoopFillZerobss>

2000e00a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
2000e00a:	2300      	movs	r3, #0
  str  r3, [r2], #4
2000e00c:	f842 3b04 	str.w	r3, [r2], #4

2000e010 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
2000e010:	4b09      	ldr	r3, [pc, #36]	; (2000e038 <LoopFillZerobss+0x28>)
  cmp  r2, r3
2000e012:	429a      	cmp	r2, r3
  bcc  FillZerobss
2000e014:	d3f9      	bcc.n	2000e00a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
2000e016:	f7ff fd47 	bl	2000daa8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
2000e01a:	f002 fd69 	bl	20010af0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
2000e01e:	f7ff fbbb 	bl	2000d798 <main>
  bx  lr    
2000e022:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
2000e024:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
2000e028:	200117fc 	.word	0x200117fc
  ldr  r0, =_sdata
2000e02c:	200117fc 	.word	0x200117fc
  ldr  r3, =_edata
2000e030:	2001187c 	.word	0x2001187c
  ldr  r2, =_sbss
2000e034:	2001187c 	.word	0x2001187c
  ldr  r3, = _ebss
2000e038:	20011a40 	.word	0x20011a40

2000e03c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
2000e03c:	e7fe      	b.n	2000e03c <ADC_IRQHandler>
	...

2000e040 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
2000e040:	b580      	push	{r7, lr}
2000e042:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
2000e044:	4b0e      	ldr	r3, [pc, #56]	; (2000e080 <HAL_Init+0x40>)
2000e046:	681b      	ldr	r3, [r3, #0]
2000e048:	4a0d      	ldr	r2, [pc, #52]	; (2000e080 <HAL_Init+0x40>)
2000e04a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
2000e04e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
2000e050:	4b0b      	ldr	r3, [pc, #44]	; (2000e080 <HAL_Init+0x40>)
2000e052:	681b      	ldr	r3, [r3, #0]
2000e054:	4a0a      	ldr	r2, [pc, #40]	; (2000e080 <HAL_Init+0x40>)
2000e056:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
2000e05a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
2000e05c:	4b08      	ldr	r3, [pc, #32]	; (2000e080 <HAL_Init+0x40>)
2000e05e:	681b      	ldr	r3, [r3, #0]
2000e060:	4a07      	ldr	r2, [pc, #28]	; (2000e080 <HAL_Init+0x40>)
2000e062:	f443 7380 	orr.w	r3, r3, #256	; 0x100
2000e066:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
2000e068:	2003      	movs	r0, #3
2000e06a:	f000 f92b 	bl	2000e2c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
2000e06e:	2000      	movs	r0, #0
2000e070:	f000 f808 	bl	2000e084 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
2000e074:	f7ff fc32 	bl	2000d8dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
2000e078:	2300      	movs	r3, #0
}
2000e07a:	4618      	mov	r0, r3
2000e07c:	bd80      	pop	{r7, pc}
2000e07e:	bf00      	nop
2000e080:	40023c00 	.word	0x40023c00

2000e084 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
2000e084:	b580      	push	{r7, lr}
2000e086:	b082      	sub	sp, #8
2000e088:	af00      	add	r7, sp, #0
2000e08a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
2000e08c:	4b12      	ldr	r3, [pc, #72]	; (2000e0d8 <HAL_InitTick+0x54>)
2000e08e:	681a      	ldr	r2, [r3, #0]
2000e090:	4b12      	ldr	r3, [pc, #72]	; (2000e0dc <HAL_InitTick+0x58>)
2000e092:	781b      	ldrb	r3, [r3, #0]
2000e094:	4619      	mov	r1, r3
2000e096:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
2000e09a:	fbb3 f3f1 	udiv	r3, r3, r1
2000e09e:	fbb2 f3f3 	udiv	r3, r2, r3
2000e0a2:	4618      	mov	r0, r3
2000e0a4:	f000 f943 	bl	2000e32e <HAL_SYSTICK_Config>
2000e0a8:	4603      	mov	r3, r0
2000e0aa:	2b00      	cmp	r3, #0
2000e0ac:	d001      	beq.n	2000e0b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
2000e0ae:	2301      	movs	r3, #1
2000e0b0:	e00e      	b.n	2000e0d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
2000e0b2:	687b      	ldr	r3, [r7, #4]
2000e0b4:	2b0f      	cmp	r3, #15
2000e0b6:	d80a      	bhi.n	2000e0ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
2000e0b8:	2200      	movs	r2, #0
2000e0ba:	6879      	ldr	r1, [r7, #4]
2000e0bc:	f04f 30ff 	mov.w	r0, #4294967295
2000e0c0:	f000 f90b 	bl	2000e2da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
2000e0c4:	4a06      	ldr	r2, [pc, #24]	; (2000e0e0 <HAL_InitTick+0x5c>)
2000e0c6:	687b      	ldr	r3, [r7, #4]
2000e0c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
2000e0ca:	2300      	movs	r3, #0
2000e0cc:	e000      	b.n	2000e0d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
2000e0ce:	2301      	movs	r3, #1
}
2000e0d0:	4618      	mov	r0, r3
2000e0d2:	3708      	adds	r7, #8
2000e0d4:	46bd      	mov	sp, r7
2000e0d6:	bd80      	pop	{r7, pc}
2000e0d8:	200117fc 	.word	0x200117fc
2000e0dc:	20011814 	.word	0x20011814
2000e0e0:	20011810 	.word	0x20011810

2000e0e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
2000e0e4:	b480      	push	{r7}
2000e0e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
2000e0e8:	4b06      	ldr	r3, [pc, #24]	; (2000e104 <HAL_IncTick+0x20>)
2000e0ea:	781b      	ldrb	r3, [r3, #0]
2000e0ec:	461a      	mov	r2, r3
2000e0ee:	4b06      	ldr	r3, [pc, #24]	; (2000e108 <HAL_IncTick+0x24>)
2000e0f0:	681b      	ldr	r3, [r3, #0]
2000e0f2:	4413      	add	r3, r2
2000e0f4:	4a04      	ldr	r2, [pc, #16]	; (2000e108 <HAL_IncTick+0x24>)
2000e0f6:	6013      	str	r3, [r2, #0]
}
2000e0f8:	bf00      	nop
2000e0fa:	46bd      	mov	sp, r7
2000e0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
2000e100:	4770      	bx	lr
2000e102:	bf00      	nop
2000e104:	20011814 	.word	0x20011814
2000e108:	20011a38 	.word	0x20011a38

2000e10c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
2000e10c:	b480      	push	{r7}
2000e10e:	af00      	add	r7, sp, #0
  return uwTick;
2000e110:	4b03      	ldr	r3, [pc, #12]	; (2000e120 <HAL_GetTick+0x14>)
2000e112:	681b      	ldr	r3, [r3, #0]
}
2000e114:	4618      	mov	r0, r3
2000e116:	46bd      	mov	sp, r7
2000e118:	f85d 7b04 	ldr.w	r7, [sp], #4
2000e11c:	4770      	bx	lr
2000e11e:	bf00      	nop
2000e120:	20011a38 	.word	0x20011a38

2000e124 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
2000e124:	b480      	push	{r7}
2000e126:	b085      	sub	sp, #20
2000e128:	af00      	add	r7, sp, #0
2000e12a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
2000e12c:	687b      	ldr	r3, [r7, #4]
2000e12e:	f003 0307 	and.w	r3, r3, #7
2000e132:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
2000e134:	4b0c      	ldr	r3, [pc, #48]	; (2000e168 <__NVIC_SetPriorityGrouping+0x44>)
2000e136:	68db      	ldr	r3, [r3, #12]
2000e138:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
2000e13a:	68ba      	ldr	r2, [r7, #8]
2000e13c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
2000e140:	4013      	ands	r3, r2
2000e142:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
2000e144:	68fb      	ldr	r3, [r7, #12]
2000e146:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
2000e148:	68bb      	ldr	r3, [r7, #8]
2000e14a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
2000e14c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
2000e150:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
2000e154:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
2000e156:	4a04      	ldr	r2, [pc, #16]	; (2000e168 <__NVIC_SetPriorityGrouping+0x44>)
2000e158:	68bb      	ldr	r3, [r7, #8]
2000e15a:	60d3      	str	r3, [r2, #12]
}
2000e15c:	bf00      	nop
2000e15e:	3714      	adds	r7, #20
2000e160:	46bd      	mov	sp, r7
2000e162:	f85d 7b04 	ldr.w	r7, [sp], #4
2000e166:	4770      	bx	lr
2000e168:	e000ed00 	.word	0xe000ed00

2000e16c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
2000e16c:	b480      	push	{r7}
2000e16e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
2000e170:	4b04      	ldr	r3, [pc, #16]	; (2000e184 <__NVIC_GetPriorityGrouping+0x18>)
2000e172:	68db      	ldr	r3, [r3, #12]
2000e174:	0a1b      	lsrs	r3, r3, #8
2000e176:	f003 0307 	and.w	r3, r3, #7
}
2000e17a:	4618      	mov	r0, r3
2000e17c:	46bd      	mov	sp, r7
2000e17e:	f85d 7b04 	ldr.w	r7, [sp], #4
2000e182:	4770      	bx	lr
2000e184:	e000ed00 	.word	0xe000ed00

2000e188 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
2000e188:	b480      	push	{r7}
2000e18a:	b083      	sub	sp, #12
2000e18c:	af00      	add	r7, sp, #0
2000e18e:	4603      	mov	r3, r0
2000e190:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
2000e192:	f997 3007 	ldrsb.w	r3, [r7, #7]
2000e196:	2b00      	cmp	r3, #0
2000e198:	db0b      	blt.n	2000e1b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
2000e19a:	79fb      	ldrb	r3, [r7, #7]
2000e19c:	f003 021f 	and.w	r2, r3, #31
2000e1a0:	4907      	ldr	r1, [pc, #28]	; (2000e1c0 <__NVIC_EnableIRQ+0x38>)
2000e1a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
2000e1a6:	095b      	lsrs	r3, r3, #5
2000e1a8:	2001      	movs	r0, #1
2000e1aa:	fa00 f202 	lsl.w	r2, r0, r2
2000e1ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
2000e1b2:	bf00      	nop
2000e1b4:	370c      	adds	r7, #12
2000e1b6:	46bd      	mov	sp, r7
2000e1b8:	f85d 7b04 	ldr.w	r7, [sp], #4
2000e1bc:	4770      	bx	lr
2000e1be:	bf00      	nop
2000e1c0:	e000e100 	.word	0xe000e100

2000e1c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
2000e1c4:	b480      	push	{r7}
2000e1c6:	b083      	sub	sp, #12
2000e1c8:	af00      	add	r7, sp, #0
2000e1ca:	4603      	mov	r3, r0
2000e1cc:	6039      	str	r1, [r7, #0]
2000e1ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
2000e1d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
2000e1d4:	2b00      	cmp	r3, #0
2000e1d6:	db0a      	blt.n	2000e1ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
2000e1d8:	683b      	ldr	r3, [r7, #0]
2000e1da:	b2da      	uxtb	r2, r3
2000e1dc:	490c      	ldr	r1, [pc, #48]	; (2000e210 <__NVIC_SetPriority+0x4c>)
2000e1de:	f997 3007 	ldrsb.w	r3, [r7, #7]
2000e1e2:	0112      	lsls	r2, r2, #4
2000e1e4:	b2d2      	uxtb	r2, r2
2000e1e6:	440b      	add	r3, r1
2000e1e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
2000e1ec:	e00a      	b.n	2000e204 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
2000e1ee:	683b      	ldr	r3, [r7, #0]
2000e1f0:	b2da      	uxtb	r2, r3
2000e1f2:	4908      	ldr	r1, [pc, #32]	; (2000e214 <__NVIC_SetPriority+0x50>)
2000e1f4:	79fb      	ldrb	r3, [r7, #7]
2000e1f6:	f003 030f 	and.w	r3, r3, #15
2000e1fa:	3b04      	subs	r3, #4
2000e1fc:	0112      	lsls	r2, r2, #4
2000e1fe:	b2d2      	uxtb	r2, r2
2000e200:	440b      	add	r3, r1
2000e202:	761a      	strb	r2, [r3, #24]
}
2000e204:	bf00      	nop
2000e206:	370c      	adds	r7, #12
2000e208:	46bd      	mov	sp, r7
2000e20a:	f85d 7b04 	ldr.w	r7, [sp], #4
2000e20e:	4770      	bx	lr
2000e210:	e000e100 	.word	0xe000e100
2000e214:	e000ed00 	.word	0xe000ed00

2000e218 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
2000e218:	b480      	push	{r7}
2000e21a:	b089      	sub	sp, #36	; 0x24
2000e21c:	af00      	add	r7, sp, #0
2000e21e:	60f8      	str	r0, [r7, #12]
2000e220:	60b9      	str	r1, [r7, #8]
2000e222:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
2000e224:	68fb      	ldr	r3, [r7, #12]
2000e226:	f003 0307 	and.w	r3, r3, #7
2000e22a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
2000e22c:	69fb      	ldr	r3, [r7, #28]
2000e22e:	f1c3 0307 	rsb	r3, r3, #7
2000e232:	2b04      	cmp	r3, #4
2000e234:	bf28      	it	cs
2000e236:	2304      	movcs	r3, #4
2000e238:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
2000e23a:	69fb      	ldr	r3, [r7, #28]
2000e23c:	3304      	adds	r3, #4
2000e23e:	2b06      	cmp	r3, #6
2000e240:	d902      	bls.n	2000e248 <NVIC_EncodePriority+0x30>
2000e242:	69fb      	ldr	r3, [r7, #28]
2000e244:	3b03      	subs	r3, #3
2000e246:	e000      	b.n	2000e24a <NVIC_EncodePriority+0x32>
2000e248:	2300      	movs	r3, #0
2000e24a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
2000e24c:	f04f 32ff 	mov.w	r2, #4294967295
2000e250:	69bb      	ldr	r3, [r7, #24]
2000e252:	fa02 f303 	lsl.w	r3, r2, r3
2000e256:	43da      	mvns	r2, r3
2000e258:	68bb      	ldr	r3, [r7, #8]
2000e25a:	401a      	ands	r2, r3
2000e25c:	697b      	ldr	r3, [r7, #20]
2000e25e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
2000e260:	f04f 31ff 	mov.w	r1, #4294967295
2000e264:	697b      	ldr	r3, [r7, #20]
2000e266:	fa01 f303 	lsl.w	r3, r1, r3
2000e26a:	43d9      	mvns	r1, r3
2000e26c:	687b      	ldr	r3, [r7, #4]
2000e26e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
2000e270:	4313      	orrs	r3, r2
         );
}
2000e272:	4618      	mov	r0, r3
2000e274:	3724      	adds	r7, #36	; 0x24
2000e276:	46bd      	mov	sp, r7
2000e278:	f85d 7b04 	ldr.w	r7, [sp], #4
2000e27c:	4770      	bx	lr
	...

2000e280 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
2000e280:	b580      	push	{r7, lr}
2000e282:	b082      	sub	sp, #8
2000e284:	af00      	add	r7, sp, #0
2000e286:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
2000e288:	687b      	ldr	r3, [r7, #4]
2000e28a:	3b01      	subs	r3, #1
2000e28c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
2000e290:	d301      	bcc.n	2000e296 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
2000e292:	2301      	movs	r3, #1
2000e294:	e00f      	b.n	2000e2b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
2000e296:	4a0a      	ldr	r2, [pc, #40]	; (2000e2c0 <SysTick_Config+0x40>)
2000e298:	687b      	ldr	r3, [r7, #4]
2000e29a:	3b01      	subs	r3, #1
2000e29c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
2000e29e:	210f      	movs	r1, #15
2000e2a0:	f04f 30ff 	mov.w	r0, #4294967295
2000e2a4:	f7ff ff8e 	bl	2000e1c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
2000e2a8:	4b05      	ldr	r3, [pc, #20]	; (2000e2c0 <SysTick_Config+0x40>)
2000e2aa:	2200      	movs	r2, #0
2000e2ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
2000e2ae:	4b04      	ldr	r3, [pc, #16]	; (2000e2c0 <SysTick_Config+0x40>)
2000e2b0:	2207      	movs	r2, #7
2000e2b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
2000e2b4:	2300      	movs	r3, #0
}
2000e2b6:	4618      	mov	r0, r3
2000e2b8:	3708      	adds	r7, #8
2000e2ba:	46bd      	mov	sp, r7
2000e2bc:	bd80      	pop	{r7, pc}
2000e2be:	bf00      	nop
2000e2c0:	e000e010 	.word	0xe000e010

2000e2c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
2000e2c4:	b580      	push	{r7, lr}
2000e2c6:	b082      	sub	sp, #8
2000e2c8:	af00      	add	r7, sp, #0
2000e2ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
2000e2cc:	6878      	ldr	r0, [r7, #4]
2000e2ce:	f7ff ff29 	bl	2000e124 <__NVIC_SetPriorityGrouping>
}
2000e2d2:	bf00      	nop
2000e2d4:	3708      	adds	r7, #8
2000e2d6:	46bd      	mov	sp, r7
2000e2d8:	bd80      	pop	{r7, pc}

2000e2da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
2000e2da:	b580      	push	{r7, lr}
2000e2dc:	b086      	sub	sp, #24
2000e2de:	af00      	add	r7, sp, #0
2000e2e0:	4603      	mov	r3, r0
2000e2e2:	60b9      	str	r1, [r7, #8]
2000e2e4:	607a      	str	r2, [r7, #4]
2000e2e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
2000e2e8:	2300      	movs	r3, #0
2000e2ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
2000e2ec:	f7ff ff3e 	bl	2000e16c <__NVIC_GetPriorityGrouping>
2000e2f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
2000e2f2:	687a      	ldr	r2, [r7, #4]
2000e2f4:	68b9      	ldr	r1, [r7, #8]
2000e2f6:	6978      	ldr	r0, [r7, #20]
2000e2f8:	f7ff ff8e 	bl	2000e218 <NVIC_EncodePriority>
2000e2fc:	4602      	mov	r2, r0
2000e2fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
2000e302:	4611      	mov	r1, r2
2000e304:	4618      	mov	r0, r3
2000e306:	f7ff ff5d 	bl	2000e1c4 <__NVIC_SetPriority>
}
2000e30a:	bf00      	nop
2000e30c:	3718      	adds	r7, #24
2000e30e:	46bd      	mov	sp, r7
2000e310:	bd80      	pop	{r7, pc}

2000e312 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
2000e312:	b580      	push	{r7, lr}
2000e314:	b082      	sub	sp, #8
2000e316:	af00      	add	r7, sp, #0
2000e318:	4603      	mov	r3, r0
2000e31a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
2000e31c:	f997 3007 	ldrsb.w	r3, [r7, #7]
2000e320:	4618      	mov	r0, r3
2000e322:	f7ff ff31 	bl	2000e188 <__NVIC_EnableIRQ>
}
2000e326:	bf00      	nop
2000e328:	3708      	adds	r7, #8
2000e32a:	46bd      	mov	sp, r7
2000e32c:	bd80      	pop	{r7, pc}

2000e32e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
2000e32e:	b580      	push	{r7, lr}
2000e330:	b082      	sub	sp, #8
2000e332:	af00      	add	r7, sp, #0
2000e334:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
2000e336:	6878      	ldr	r0, [r7, #4]
2000e338:	f7ff ffa2 	bl	2000e280 <SysTick_Config>
2000e33c:	4603      	mov	r3, r0
}
2000e33e:	4618      	mov	r0, r3
2000e340:	3708      	adds	r7, #8
2000e342:	46bd      	mov	sp, r7
2000e344:	bd80      	pop	{r7, pc}
	...

2000e348 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
2000e348:	b580      	push	{r7, lr}
2000e34a:	b086      	sub	sp, #24
2000e34c:	af00      	add	r7, sp, #0
2000e34e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
2000e350:	2300      	movs	r3, #0
2000e352:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
2000e354:	f7ff feda 	bl	2000e10c <HAL_GetTick>
2000e358:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
2000e35a:	687b      	ldr	r3, [r7, #4]
2000e35c:	2b00      	cmp	r3, #0
2000e35e:	d101      	bne.n	2000e364 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
2000e360:	2301      	movs	r3, #1
2000e362:	e099      	b.n	2000e498 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
2000e364:	687b      	ldr	r3, [r7, #4]
2000e366:	2200      	movs	r2, #0
2000e368:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
2000e36c:	687b      	ldr	r3, [r7, #4]
2000e36e:	2202      	movs	r2, #2
2000e370:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
2000e374:	687b      	ldr	r3, [r7, #4]
2000e376:	681b      	ldr	r3, [r3, #0]
2000e378:	681a      	ldr	r2, [r3, #0]
2000e37a:	687b      	ldr	r3, [r7, #4]
2000e37c:	681b      	ldr	r3, [r3, #0]
2000e37e:	f022 0201 	bic.w	r2, r2, #1
2000e382:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
2000e384:	e00f      	b.n	2000e3a6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
2000e386:	f7ff fec1 	bl	2000e10c <HAL_GetTick>
2000e38a:	4602      	mov	r2, r0
2000e38c:	693b      	ldr	r3, [r7, #16]
2000e38e:	1ad3      	subs	r3, r2, r3
2000e390:	2b05      	cmp	r3, #5
2000e392:	d908      	bls.n	2000e3a6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
2000e394:	687b      	ldr	r3, [r7, #4]
2000e396:	2220      	movs	r2, #32
2000e398:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
2000e39a:	687b      	ldr	r3, [r7, #4]
2000e39c:	2203      	movs	r2, #3
2000e39e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
2000e3a2:	2303      	movs	r3, #3
2000e3a4:	e078      	b.n	2000e498 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
2000e3a6:	687b      	ldr	r3, [r7, #4]
2000e3a8:	681b      	ldr	r3, [r3, #0]
2000e3aa:	681b      	ldr	r3, [r3, #0]
2000e3ac:	f003 0301 	and.w	r3, r3, #1
2000e3b0:	2b00      	cmp	r3, #0
2000e3b2:	d1e8      	bne.n	2000e386 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
2000e3b4:	687b      	ldr	r3, [r7, #4]
2000e3b6:	681b      	ldr	r3, [r3, #0]
2000e3b8:	681b      	ldr	r3, [r3, #0]
2000e3ba:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
2000e3bc:	697a      	ldr	r2, [r7, #20]
2000e3be:	4b38      	ldr	r3, [pc, #224]	; (2000e4a0 <HAL_DMA_Init+0x158>)
2000e3c0:	4013      	ands	r3, r2
2000e3c2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
2000e3c4:	687b      	ldr	r3, [r7, #4]
2000e3c6:	685a      	ldr	r2, [r3, #4]
2000e3c8:	687b      	ldr	r3, [r7, #4]
2000e3ca:	689b      	ldr	r3, [r3, #8]
2000e3cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
2000e3ce:	687b      	ldr	r3, [r7, #4]
2000e3d0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
2000e3d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
2000e3d4:	687b      	ldr	r3, [r7, #4]
2000e3d6:	691b      	ldr	r3, [r3, #16]
2000e3d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
2000e3da:	687b      	ldr	r3, [r7, #4]
2000e3dc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
2000e3de:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
2000e3e0:	687b      	ldr	r3, [r7, #4]
2000e3e2:	699b      	ldr	r3, [r3, #24]
2000e3e4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
2000e3e6:	687b      	ldr	r3, [r7, #4]
2000e3e8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
2000e3ea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
2000e3ec:	687b      	ldr	r3, [r7, #4]
2000e3ee:	6a1b      	ldr	r3, [r3, #32]
2000e3f0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
2000e3f2:	697a      	ldr	r2, [r7, #20]
2000e3f4:	4313      	orrs	r3, r2
2000e3f6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
2000e3f8:	687b      	ldr	r3, [r7, #4]
2000e3fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2000e3fc:	2b04      	cmp	r3, #4
2000e3fe:	d107      	bne.n	2000e410 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
2000e400:	687b      	ldr	r3, [r7, #4]
2000e402:	6ada      	ldr	r2, [r3, #44]	; 0x2c
2000e404:	687b      	ldr	r3, [r7, #4]
2000e406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2000e408:	4313      	orrs	r3, r2
2000e40a:	697a      	ldr	r2, [r7, #20]
2000e40c:	4313      	orrs	r3, r2
2000e40e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
2000e410:	687b      	ldr	r3, [r7, #4]
2000e412:	681b      	ldr	r3, [r3, #0]
2000e414:	697a      	ldr	r2, [r7, #20]
2000e416:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
2000e418:	687b      	ldr	r3, [r7, #4]
2000e41a:	681b      	ldr	r3, [r3, #0]
2000e41c:	695b      	ldr	r3, [r3, #20]
2000e41e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
2000e420:	697b      	ldr	r3, [r7, #20]
2000e422:	f023 0307 	bic.w	r3, r3, #7
2000e426:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
2000e428:	687b      	ldr	r3, [r7, #4]
2000e42a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2000e42c:	697a      	ldr	r2, [r7, #20]
2000e42e:	4313      	orrs	r3, r2
2000e430:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
2000e432:	687b      	ldr	r3, [r7, #4]
2000e434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2000e436:	2b04      	cmp	r3, #4
2000e438:	d117      	bne.n	2000e46a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
2000e43a:	687b      	ldr	r3, [r7, #4]
2000e43c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
2000e43e:	697a      	ldr	r2, [r7, #20]
2000e440:	4313      	orrs	r3, r2
2000e442:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
2000e444:	687b      	ldr	r3, [r7, #4]
2000e446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2000e448:	2b00      	cmp	r3, #0
2000e44a:	d00e      	beq.n	2000e46a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
2000e44c:	6878      	ldr	r0, [r7, #4]
2000e44e:	f000 fa91 	bl	2000e974 <DMA_CheckFifoParam>
2000e452:	4603      	mov	r3, r0
2000e454:	2b00      	cmp	r3, #0
2000e456:	d008      	beq.n	2000e46a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
2000e458:	687b      	ldr	r3, [r7, #4]
2000e45a:	2240      	movs	r2, #64	; 0x40
2000e45c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
2000e45e:	687b      	ldr	r3, [r7, #4]
2000e460:	2201      	movs	r2, #1
2000e462:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
2000e466:	2301      	movs	r3, #1
2000e468:	e016      	b.n	2000e498 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
2000e46a:	687b      	ldr	r3, [r7, #4]
2000e46c:	681b      	ldr	r3, [r3, #0]
2000e46e:	697a      	ldr	r2, [r7, #20]
2000e470:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
2000e472:	6878      	ldr	r0, [r7, #4]
2000e474:	f000 fa48 	bl	2000e908 <DMA_CalcBaseAndBitshift>
2000e478:	4603      	mov	r3, r0
2000e47a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
2000e47c:	687b      	ldr	r3, [r7, #4]
2000e47e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
2000e480:	223f      	movs	r2, #63	; 0x3f
2000e482:	409a      	lsls	r2, r3
2000e484:	68fb      	ldr	r3, [r7, #12]
2000e486:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
2000e488:	687b      	ldr	r3, [r7, #4]
2000e48a:	2200      	movs	r2, #0
2000e48c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
2000e48e:	687b      	ldr	r3, [r7, #4]
2000e490:	2201      	movs	r2, #1
2000e492:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
2000e496:	2300      	movs	r3, #0
}
2000e498:	4618      	mov	r0, r3
2000e49a:	3718      	adds	r7, #24
2000e49c:	46bd      	mov	sp, r7
2000e49e:	bd80      	pop	{r7, pc}
2000e4a0:	f010803f 	.word	0xf010803f

2000e4a4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
2000e4a4:	b580      	push	{r7, lr}
2000e4a6:	b086      	sub	sp, #24
2000e4a8:	af00      	add	r7, sp, #0
2000e4aa:	60f8      	str	r0, [r7, #12]
2000e4ac:	60b9      	str	r1, [r7, #8]
2000e4ae:	607a      	str	r2, [r7, #4]
2000e4b0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
2000e4b2:	2300      	movs	r3, #0
2000e4b4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
2000e4b6:	68fb      	ldr	r3, [r7, #12]
2000e4b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
2000e4ba:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
2000e4bc:	68fb      	ldr	r3, [r7, #12]
2000e4be:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
2000e4c2:	2b01      	cmp	r3, #1
2000e4c4:	d101      	bne.n	2000e4ca <HAL_DMA_Start_IT+0x26>
2000e4c6:	2302      	movs	r3, #2
2000e4c8:	e040      	b.n	2000e54c <HAL_DMA_Start_IT+0xa8>
2000e4ca:	68fb      	ldr	r3, [r7, #12]
2000e4cc:	2201      	movs	r2, #1
2000e4ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
2000e4d2:	68fb      	ldr	r3, [r7, #12]
2000e4d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
2000e4d8:	b2db      	uxtb	r3, r3
2000e4da:	2b01      	cmp	r3, #1
2000e4dc:	d12f      	bne.n	2000e53e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
2000e4de:	68fb      	ldr	r3, [r7, #12]
2000e4e0:	2202      	movs	r2, #2
2000e4e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
2000e4e6:	68fb      	ldr	r3, [r7, #12]
2000e4e8:	2200      	movs	r2, #0
2000e4ea:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
2000e4ec:	683b      	ldr	r3, [r7, #0]
2000e4ee:	687a      	ldr	r2, [r7, #4]
2000e4f0:	68b9      	ldr	r1, [r7, #8]
2000e4f2:	68f8      	ldr	r0, [r7, #12]
2000e4f4:	f000 f9da 	bl	2000e8ac <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
2000e4f8:	68fb      	ldr	r3, [r7, #12]
2000e4fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
2000e4fc:	223f      	movs	r2, #63	; 0x3f
2000e4fe:	409a      	lsls	r2, r3
2000e500:	693b      	ldr	r3, [r7, #16]
2000e502:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
2000e504:	68fb      	ldr	r3, [r7, #12]
2000e506:	681b      	ldr	r3, [r3, #0]
2000e508:	681a      	ldr	r2, [r3, #0]
2000e50a:	68fb      	ldr	r3, [r7, #12]
2000e50c:	681b      	ldr	r3, [r3, #0]
2000e50e:	f042 0216 	orr.w	r2, r2, #22
2000e512:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
2000e514:	68fb      	ldr	r3, [r7, #12]
2000e516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2000e518:	2b00      	cmp	r3, #0
2000e51a:	d007      	beq.n	2000e52c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
2000e51c:	68fb      	ldr	r3, [r7, #12]
2000e51e:	681b      	ldr	r3, [r3, #0]
2000e520:	681a      	ldr	r2, [r3, #0]
2000e522:	68fb      	ldr	r3, [r7, #12]
2000e524:	681b      	ldr	r3, [r3, #0]
2000e526:	f042 0208 	orr.w	r2, r2, #8
2000e52a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
2000e52c:	68fb      	ldr	r3, [r7, #12]
2000e52e:	681b      	ldr	r3, [r3, #0]
2000e530:	681a      	ldr	r2, [r3, #0]
2000e532:	68fb      	ldr	r3, [r7, #12]
2000e534:	681b      	ldr	r3, [r3, #0]
2000e536:	f042 0201 	orr.w	r2, r2, #1
2000e53a:	601a      	str	r2, [r3, #0]
2000e53c:	e005      	b.n	2000e54a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
2000e53e:	68fb      	ldr	r3, [r7, #12]
2000e540:	2200      	movs	r2, #0
2000e542:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
2000e546:	2302      	movs	r3, #2
2000e548:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
2000e54a:	7dfb      	ldrb	r3, [r7, #23]
}
2000e54c:	4618      	mov	r0, r3
2000e54e:	3718      	adds	r7, #24
2000e550:	46bd      	mov	sp, r7
2000e552:	bd80      	pop	{r7, pc}

2000e554 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
2000e554:	b480      	push	{r7}
2000e556:	b083      	sub	sp, #12
2000e558:	af00      	add	r7, sp, #0
2000e55a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
2000e55c:	687b      	ldr	r3, [r7, #4]
2000e55e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
2000e562:	b2db      	uxtb	r3, r3
2000e564:	2b02      	cmp	r3, #2
2000e566:	d004      	beq.n	2000e572 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
2000e568:	687b      	ldr	r3, [r7, #4]
2000e56a:	2280      	movs	r2, #128	; 0x80
2000e56c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
2000e56e:	2301      	movs	r3, #1
2000e570:	e00c      	b.n	2000e58c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
2000e572:	687b      	ldr	r3, [r7, #4]
2000e574:	2205      	movs	r2, #5
2000e576:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
2000e57a:	687b      	ldr	r3, [r7, #4]
2000e57c:	681b      	ldr	r3, [r3, #0]
2000e57e:	681a      	ldr	r2, [r3, #0]
2000e580:	687b      	ldr	r3, [r7, #4]
2000e582:	681b      	ldr	r3, [r3, #0]
2000e584:	f022 0201 	bic.w	r2, r2, #1
2000e588:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
2000e58a:	2300      	movs	r3, #0
}
2000e58c:	4618      	mov	r0, r3
2000e58e:	370c      	adds	r7, #12
2000e590:	46bd      	mov	sp, r7
2000e592:	f85d 7b04 	ldr.w	r7, [sp], #4
2000e596:	4770      	bx	lr

2000e598 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
2000e598:	b580      	push	{r7, lr}
2000e59a:	b086      	sub	sp, #24
2000e59c:	af00      	add	r7, sp, #0
2000e59e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
2000e5a0:	2300      	movs	r3, #0
2000e5a2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
2000e5a4:	4b92      	ldr	r3, [pc, #584]	; (2000e7f0 <HAL_DMA_IRQHandler+0x258>)
2000e5a6:	681b      	ldr	r3, [r3, #0]
2000e5a8:	4a92      	ldr	r2, [pc, #584]	; (2000e7f4 <HAL_DMA_IRQHandler+0x25c>)
2000e5aa:	fba2 2303 	umull	r2, r3, r2, r3
2000e5ae:	0a9b      	lsrs	r3, r3, #10
2000e5b0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
2000e5b2:	687b      	ldr	r3, [r7, #4]
2000e5b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
2000e5b6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
2000e5b8:	693b      	ldr	r3, [r7, #16]
2000e5ba:	681b      	ldr	r3, [r3, #0]
2000e5bc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
2000e5be:	687b      	ldr	r3, [r7, #4]
2000e5c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
2000e5c2:	2208      	movs	r2, #8
2000e5c4:	409a      	lsls	r2, r3
2000e5c6:	68fb      	ldr	r3, [r7, #12]
2000e5c8:	4013      	ands	r3, r2
2000e5ca:	2b00      	cmp	r3, #0
2000e5cc:	d01a      	beq.n	2000e604 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
2000e5ce:	687b      	ldr	r3, [r7, #4]
2000e5d0:	681b      	ldr	r3, [r3, #0]
2000e5d2:	681b      	ldr	r3, [r3, #0]
2000e5d4:	f003 0304 	and.w	r3, r3, #4
2000e5d8:	2b00      	cmp	r3, #0
2000e5da:	d013      	beq.n	2000e604 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
2000e5dc:	687b      	ldr	r3, [r7, #4]
2000e5de:	681b      	ldr	r3, [r3, #0]
2000e5e0:	681a      	ldr	r2, [r3, #0]
2000e5e2:	687b      	ldr	r3, [r7, #4]
2000e5e4:	681b      	ldr	r3, [r3, #0]
2000e5e6:	f022 0204 	bic.w	r2, r2, #4
2000e5ea:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
2000e5ec:	687b      	ldr	r3, [r7, #4]
2000e5ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
2000e5f0:	2208      	movs	r2, #8
2000e5f2:	409a      	lsls	r2, r3
2000e5f4:	693b      	ldr	r3, [r7, #16]
2000e5f6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
2000e5f8:	687b      	ldr	r3, [r7, #4]
2000e5fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2000e5fc:	f043 0201 	orr.w	r2, r3, #1
2000e600:	687b      	ldr	r3, [r7, #4]
2000e602:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
2000e604:	687b      	ldr	r3, [r7, #4]
2000e606:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
2000e608:	2201      	movs	r2, #1
2000e60a:	409a      	lsls	r2, r3
2000e60c:	68fb      	ldr	r3, [r7, #12]
2000e60e:	4013      	ands	r3, r2
2000e610:	2b00      	cmp	r3, #0
2000e612:	d012      	beq.n	2000e63a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
2000e614:	687b      	ldr	r3, [r7, #4]
2000e616:	681b      	ldr	r3, [r3, #0]
2000e618:	695b      	ldr	r3, [r3, #20]
2000e61a:	f003 0380 	and.w	r3, r3, #128	; 0x80
2000e61e:	2b00      	cmp	r3, #0
2000e620:	d00b      	beq.n	2000e63a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
2000e622:	687b      	ldr	r3, [r7, #4]
2000e624:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
2000e626:	2201      	movs	r2, #1
2000e628:	409a      	lsls	r2, r3
2000e62a:	693b      	ldr	r3, [r7, #16]
2000e62c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
2000e62e:	687b      	ldr	r3, [r7, #4]
2000e630:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2000e632:	f043 0202 	orr.w	r2, r3, #2
2000e636:	687b      	ldr	r3, [r7, #4]
2000e638:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
2000e63a:	687b      	ldr	r3, [r7, #4]
2000e63c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
2000e63e:	2204      	movs	r2, #4
2000e640:	409a      	lsls	r2, r3
2000e642:	68fb      	ldr	r3, [r7, #12]
2000e644:	4013      	ands	r3, r2
2000e646:	2b00      	cmp	r3, #0
2000e648:	d012      	beq.n	2000e670 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
2000e64a:	687b      	ldr	r3, [r7, #4]
2000e64c:	681b      	ldr	r3, [r3, #0]
2000e64e:	681b      	ldr	r3, [r3, #0]
2000e650:	f003 0302 	and.w	r3, r3, #2
2000e654:	2b00      	cmp	r3, #0
2000e656:	d00b      	beq.n	2000e670 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
2000e658:	687b      	ldr	r3, [r7, #4]
2000e65a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
2000e65c:	2204      	movs	r2, #4
2000e65e:	409a      	lsls	r2, r3
2000e660:	693b      	ldr	r3, [r7, #16]
2000e662:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
2000e664:	687b      	ldr	r3, [r7, #4]
2000e666:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2000e668:	f043 0204 	orr.w	r2, r3, #4
2000e66c:	687b      	ldr	r3, [r7, #4]
2000e66e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
2000e670:	687b      	ldr	r3, [r7, #4]
2000e672:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
2000e674:	2210      	movs	r2, #16
2000e676:	409a      	lsls	r2, r3
2000e678:	68fb      	ldr	r3, [r7, #12]
2000e67a:	4013      	ands	r3, r2
2000e67c:	2b00      	cmp	r3, #0
2000e67e:	d043      	beq.n	2000e708 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
2000e680:	687b      	ldr	r3, [r7, #4]
2000e682:	681b      	ldr	r3, [r3, #0]
2000e684:	681b      	ldr	r3, [r3, #0]
2000e686:	f003 0308 	and.w	r3, r3, #8
2000e68a:	2b00      	cmp	r3, #0
2000e68c:	d03c      	beq.n	2000e708 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
2000e68e:	687b      	ldr	r3, [r7, #4]
2000e690:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
2000e692:	2210      	movs	r2, #16
2000e694:	409a      	lsls	r2, r3
2000e696:	693b      	ldr	r3, [r7, #16]
2000e698:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
2000e69a:	687b      	ldr	r3, [r7, #4]
2000e69c:	681b      	ldr	r3, [r3, #0]
2000e69e:	681b      	ldr	r3, [r3, #0]
2000e6a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
2000e6a4:	2b00      	cmp	r3, #0
2000e6a6:	d018      	beq.n	2000e6da <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
2000e6a8:	687b      	ldr	r3, [r7, #4]
2000e6aa:	681b      	ldr	r3, [r3, #0]
2000e6ac:	681b      	ldr	r3, [r3, #0]
2000e6ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
2000e6b2:	2b00      	cmp	r3, #0
2000e6b4:	d108      	bne.n	2000e6c8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
2000e6b6:	687b      	ldr	r3, [r7, #4]
2000e6b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2000e6ba:	2b00      	cmp	r3, #0
2000e6bc:	d024      	beq.n	2000e708 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
2000e6be:	687b      	ldr	r3, [r7, #4]
2000e6c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2000e6c2:	6878      	ldr	r0, [r7, #4]
2000e6c4:	4798      	blx	r3
2000e6c6:	e01f      	b.n	2000e708 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
2000e6c8:	687b      	ldr	r3, [r7, #4]
2000e6ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
2000e6cc:	2b00      	cmp	r3, #0
2000e6ce:	d01b      	beq.n	2000e708 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
2000e6d0:	687b      	ldr	r3, [r7, #4]
2000e6d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
2000e6d4:	6878      	ldr	r0, [r7, #4]
2000e6d6:	4798      	blx	r3
2000e6d8:	e016      	b.n	2000e708 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
2000e6da:	687b      	ldr	r3, [r7, #4]
2000e6dc:	681b      	ldr	r3, [r3, #0]
2000e6de:	681b      	ldr	r3, [r3, #0]
2000e6e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
2000e6e4:	2b00      	cmp	r3, #0
2000e6e6:	d107      	bne.n	2000e6f8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
2000e6e8:	687b      	ldr	r3, [r7, #4]
2000e6ea:	681b      	ldr	r3, [r3, #0]
2000e6ec:	681a      	ldr	r2, [r3, #0]
2000e6ee:	687b      	ldr	r3, [r7, #4]
2000e6f0:	681b      	ldr	r3, [r3, #0]
2000e6f2:	f022 0208 	bic.w	r2, r2, #8
2000e6f6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
2000e6f8:	687b      	ldr	r3, [r7, #4]
2000e6fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2000e6fc:	2b00      	cmp	r3, #0
2000e6fe:	d003      	beq.n	2000e708 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
2000e700:	687b      	ldr	r3, [r7, #4]
2000e702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2000e704:	6878      	ldr	r0, [r7, #4]
2000e706:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
2000e708:	687b      	ldr	r3, [r7, #4]
2000e70a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
2000e70c:	2220      	movs	r2, #32
2000e70e:	409a      	lsls	r2, r3
2000e710:	68fb      	ldr	r3, [r7, #12]
2000e712:	4013      	ands	r3, r2
2000e714:	2b00      	cmp	r3, #0
2000e716:	f000 808e 	beq.w	2000e836 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
2000e71a:	687b      	ldr	r3, [r7, #4]
2000e71c:	681b      	ldr	r3, [r3, #0]
2000e71e:	681b      	ldr	r3, [r3, #0]
2000e720:	f003 0310 	and.w	r3, r3, #16
2000e724:	2b00      	cmp	r3, #0
2000e726:	f000 8086 	beq.w	2000e836 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
2000e72a:	687b      	ldr	r3, [r7, #4]
2000e72c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
2000e72e:	2220      	movs	r2, #32
2000e730:	409a      	lsls	r2, r3
2000e732:	693b      	ldr	r3, [r7, #16]
2000e734:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
2000e736:	687b      	ldr	r3, [r7, #4]
2000e738:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
2000e73c:	b2db      	uxtb	r3, r3
2000e73e:	2b05      	cmp	r3, #5
2000e740:	d136      	bne.n	2000e7b0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
2000e742:	687b      	ldr	r3, [r7, #4]
2000e744:	681b      	ldr	r3, [r3, #0]
2000e746:	681a      	ldr	r2, [r3, #0]
2000e748:	687b      	ldr	r3, [r7, #4]
2000e74a:	681b      	ldr	r3, [r3, #0]
2000e74c:	f022 0216 	bic.w	r2, r2, #22
2000e750:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
2000e752:	687b      	ldr	r3, [r7, #4]
2000e754:	681b      	ldr	r3, [r3, #0]
2000e756:	695a      	ldr	r2, [r3, #20]
2000e758:	687b      	ldr	r3, [r7, #4]
2000e75a:	681b      	ldr	r3, [r3, #0]
2000e75c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
2000e760:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
2000e762:	687b      	ldr	r3, [r7, #4]
2000e764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2000e766:	2b00      	cmp	r3, #0
2000e768:	d103      	bne.n	2000e772 <HAL_DMA_IRQHandler+0x1da>
2000e76a:	687b      	ldr	r3, [r7, #4]
2000e76c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
2000e76e:	2b00      	cmp	r3, #0
2000e770:	d007      	beq.n	2000e782 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
2000e772:	687b      	ldr	r3, [r7, #4]
2000e774:	681b      	ldr	r3, [r3, #0]
2000e776:	681a      	ldr	r2, [r3, #0]
2000e778:	687b      	ldr	r3, [r7, #4]
2000e77a:	681b      	ldr	r3, [r3, #0]
2000e77c:	f022 0208 	bic.w	r2, r2, #8
2000e780:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
2000e782:	687b      	ldr	r3, [r7, #4]
2000e784:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
2000e786:	223f      	movs	r2, #63	; 0x3f
2000e788:	409a      	lsls	r2, r3
2000e78a:	693b      	ldr	r3, [r7, #16]
2000e78c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
2000e78e:	687b      	ldr	r3, [r7, #4]
2000e790:	2200      	movs	r2, #0
2000e792:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
2000e796:	687b      	ldr	r3, [r7, #4]
2000e798:	2201      	movs	r2, #1
2000e79a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
2000e79e:	687b      	ldr	r3, [r7, #4]
2000e7a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2000e7a2:	2b00      	cmp	r3, #0
2000e7a4:	d07d      	beq.n	2000e8a2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
2000e7a6:	687b      	ldr	r3, [r7, #4]
2000e7a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2000e7aa:	6878      	ldr	r0, [r7, #4]
2000e7ac:	4798      	blx	r3
        }
        return;
2000e7ae:	e078      	b.n	2000e8a2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
2000e7b0:	687b      	ldr	r3, [r7, #4]
2000e7b2:	681b      	ldr	r3, [r3, #0]
2000e7b4:	681b      	ldr	r3, [r3, #0]
2000e7b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
2000e7ba:	2b00      	cmp	r3, #0
2000e7bc:	d01c      	beq.n	2000e7f8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
2000e7be:	687b      	ldr	r3, [r7, #4]
2000e7c0:	681b      	ldr	r3, [r3, #0]
2000e7c2:	681b      	ldr	r3, [r3, #0]
2000e7c4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
2000e7c8:	2b00      	cmp	r3, #0
2000e7ca:	d108      	bne.n	2000e7de <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
2000e7cc:	687b      	ldr	r3, [r7, #4]
2000e7ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2000e7d0:	2b00      	cmp	r3, #0
2000e7d2:	d030      	beq.n	2000e836 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
2000e7d4:	687b      	ldr	r3, [r7, #4]
2000e7d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2000e7d8:	6878      	ldr	r0, [r7, #4]
2000e7da:	4798      	blx	r3
2000e7dc:	e02b      	b.n	2000e836 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
2000e7de:	687b      	ldr	r3, [r7, #4]
2000e7e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2000e7e2:	2b00      	cmp	r3, #0
2000e7e4:	d027      	beq.n	2000e836 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
2000e7e6:	687b      	ldr	r3, [r7, #4]
2000e7e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2000e7ea:	6878      	ldr	r0, [r7, #4]
2000e7ec:	4798      	blx	r3
2000e7ee:	e022      	b.n	2000e836 <HAL_DMA_IRQHandler+0x29e>
2000e7f0:	200117fc 	.word	0x200117fc
2000e7f4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
2000e7f8:	687b      	ldr	r3, [r7, #4]
2000e7fa:	681b      	ldr	r3, [r3, #0]
2000e7fc:	681b      	ldr	r3, [r3, #0]
2000e7fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
2000e802:	2b00      	cmp	r3, #0
2000e804:	d10f      	bne.n	2000e826 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
2000e806:	687b      	ldr	r3, [r7, #4]
2000e808:	681b      	ldr	r3, [r3, #0]
2000e80a:	681a      	ldr	r2, [r3, #0]
2000e80c:	687b      	ldr	r3, [r7, #4]
2000e80e:	681b      	ldr	r3, [r3, #0]
2000e810:	f022 0210 	bic.w	r2, r2, #16
2000e814:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
2000e816:	687b      	ldr	r3, [r7, #4]
2000e818:	2200      	movs	r2, #0
2000e81a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
2000e81e:	687b      	ldr	r3, [r7, #4]
2000e820:	2201      	movs	r2, #1
2000e822:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
2000e826:	687b      	ldr	r3, [r7, #4]
2000e828:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2000e82a:	2b00      	cmp	r3, #0
2000e82c:	d003      	beq.n	2000e836 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
2000e82e:	687b      	ldr	r3, [r7, #4]
2000e830:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2000e832:	6878      	ldr	r0, [r7, #4]
2000e834:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
2000e836:	687b      	ldr	r3, [r7, #4]
2000e838:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2000e83a:	2b00      	cmp	r3, #0
2000e83c:	d032      	beq.n	2000e8a4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
2000e83e:	687b      	ldr	r3, [r7, #4]
2000e840:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2000e842:	f003 0301 	and.w	r3, r3, #1
2000e846:	2b00      	cmp	r3, #0
2000e848:	d022      	beq.n	2000e890 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
2000e84a:	687b      	ldr	r3, [r7, #4]
2000e84c:	2205      	movs	r2, #5
2000e84e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
2000e852:	687b      	ldr	r3, [r7, #4]
2000e854:	681b      	ldr	r3, [r3, #0]
2000e856:	681a      	ldr	r2, [r3, #0]
2000e858:	687b      	ldr	r3, [r7, #4]
2000e85a:	681b      	ldr	r3, [r3, #0]
2000e85c:	f022 0201 	bic.w	r2, r2, #1
2000e860:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
2000e862:	68bb      	ldr	r3, [r7, #8]
2000e864:	3301      	adds	r3, #1
2000e866:	60bb      	str	r3, [r7, #8]
2000e868:	697a      	ldr	r2, [r7, #20]
2000e86a:	429a      	cmp	r2, r3
2000e86c:	d307      	bcc.n	2000e87e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
2000e86e:	687b      	ldr	r3, [r7, #4]
2000e870:	681b      	ldr	r3, [r3, #0]
2000e872:	681b      	ldr	r3, [r3, #0]
2000e874:	f003 0301 	and.w	r3, r3, #1
2000e878:	2b00      	cmp	r3, #0
2000e87a:	d1f2      	bne.n	2000e862 <HAL_DMA_IRQHandler+0x2ca>
2000e87c:	e000      	b.n	2000e880 <HAL_DMA_IRQHandler+0x2e8>
          break;
2000e87e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
2000e880:	687b      	ldr	r3, [r7, #4]
2000e882:	2200      	movs	r2, #0
2000e884:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
2000e888:	687b      	ldr	r3, [r7, #4]
2000e88a:	2201      	movs	r2, #1
2000e88c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
2000e890:	687b      	ldr	r3, [r7, #4]
2000e892:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
2000e894:	2b00      	cmp	r3, #0
2000e896:	d005      	beq.n	2000e8a4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
2000e898:	687b      	ldr	r3, [r7, #4]
2000e89a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
2000e89c:	6878      	ldr	r0, [r7, #4]
2000e89e:	4798      	blx	r3
2000e8a0:	e000      	b.n	2000e8a4 <HAL_DMA_IRQHandler+0x30c>
        return;
2000e8a2:	bf00      	nop
    }
  }
}
2000e8a4:	3718      	adds	r7, #24
2000e8a6:	46bd      	mov	sp, r7
2000e8a8:	bd80      	pop	{r7, pc}
2000e8aa:	bf00      	nop

2000e8ac <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
2000e8ac:	b480      	push	{r7}
2000e8ae:	b085      	sub	sp, #20
2000e8b0:	af00      	add	r7, sp, #0
2000e8b2:	60f8      	str	r0, [r7, #12]
2000e8b4:	60b9      	str	r1, [r7, #8]
2000e8b6:	607a      	str	r2, [r7, #4]
2000e8b8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
2000e8ba:	68fb      	ldr	r3, [r7, #12]
2000e8bc:	681b      	ldr	r3, [r3, #0]
2000e8be:	681a      	ldr	r2, [r3, #0]
2000e8c0:	68fb      	ldr	r3, [r7, #12]
2000e8c2:	681b      	ldr	r3, [r3, #0]
2000e8c4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
2000e8c8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
2000e8ca:	68fb      	ldr	r3, [r7, #12]
2000e8cc:	681b      	ldr	r3, [r3, #0]
2000e8ce:	683a      	ldr	r2, [r7, #0]
2000e8d0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
2000e8d2:	68fb      	ldr	r3, [r7, #12]
2000e8d4:	689b      	ldr	r3, [r3, #8]
2000e8d6:	2b40      	cmp	r3, #64	; 0x40
2000e8d8:	d108      	bne.n	2000e8ec <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
2000e8da:	68fb      	ldr	r3, [r7, #12]
2000e8dc:	681b      	ldr	r3, [r3, #0]
2000e8de:	687a      	ldr	r2, [r7, #4]
2000e8e0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
2000e8e2:	68fb      	ldr	r3, [r7, #12]
2000e8e4:	681b      	ldr	r3, [r3, #0]
2000e8e6:	68ba      	ldr	r2, [r7, #8]
2000e8e8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
2000e8ea:	e007      	b.n	2000e8fc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
2000e8ec:	68fb      	ldr	r3, [r7, #12]
2000e8ee:	681b      	ldr	r3, [r3, #0]
2000e8f0:	68ba      	ldr	r2, [r7, #8]
2000e8f2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
2000e8f4:	68fb      	ldr	r3, [r7, #12]
2000e8f6:	681b      	ldr	r3, [r3, #0]
2000e8f8:	687a      	ldr	r2, [r7, #4]
2000e8fa:	60da      	str	r2, [r3, #12]
}
2000e8fc:	bf00      	nop
2000e8fe:	3714      	adds	r7, #20
2000e900:	46bd      	mov	sp, r7
2000e902:	f85d 7b04 	ldr.w	r7, [sp], #4
2000e906:	4770      	bx	lr

2000e908 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
2000e908:	b480      	push	{r7}
2000e90a:	b085      	sub	sp, #20
2000e90c:	af00      	add	r7, sp, #0
2000e90e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
2000e910:	687b      	ldr	r3, [r7, #4]
2000e912:	681b      	ldr	r3, [r3, #0]
2000e914:	b2db      	uxtb	r3, r3
2000e916:	3b10      	subs	r3, #16
2000e918:	4a14      	ldr	r2, [pc, #80]	; (2000e96c <DMA_CalcBaseAndBitshift+0x64>)
2000e91a:	fba2 2303 	umull	r2, r3, r2, r3
2000e91e:	091b      	lsrs	r3, r3, #4
2000e920:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
2000e922:	4a13      	ldr	r2, [pc, #76]	; (2000e970 <DMA_CalcBaseAndBitshift+0x68>)
2000e924:	68fb      	ldr	r3, [r7, #12]
2000e926:	4413      	add	r3, r2
2000e928:	781b      	ldrb	r3, [r3, #0]
2000e92a:	461a      	mov	r2, r3
2000e92c:	687b      	ldr	r3, [r7, #4]
2000e92e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
2000e930:	68fb      	ldr	r3, [r7, #12]
2000e932:	2b03      	cmp	r3, #3
2000e934:	d909      	bls.n	2000e94a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
2000e936:	687b      	ldr	r3, [r7, #4]
2000e938:	681b      	ldr	r3, [r3, #0]
2000e93a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
2000e93e:	f023 0303 	bic.w	r3, r3, #3
2000e942:	1d1a      	adds	r2, r3, #4
2000e944:	687b      	ldr	r3, [r7, #4]
2000e946:	659a      	str	r2, [r3, #88]	; 0x58
2000e948:	e007      	b.n	2000e95a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
2000e94a:	687b      	ldr	r3, [r7, #4]
2000e94c:	681b      	ldr	r3, [r3, #0]
2000e94e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
2000e952:	f023 0303 	bic.w	r3, r3, #3
2000e956:	687a      	ldr	r2, [r7, #4]
2000e958:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
2000e95a:	687b      	ldr	r3, [r7, #4]
2000e95c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
2000e95e:	4618      	mov	r0, r3
2000e960:	3714      	adds	r7, #20
2000e962:	46bd      	mov	sp, r7
2000e964:	f85d 7b04 	ldr.w	r7, [sp], #4
2000e968:	4770      	bx	lr
2000e96a:	bf00      	nop
2000e96c:	aaaaaaab 	.word	0xaaaaaaab
2000e970:	200117b0 	.word	0x200117b0

2000e974 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
2000e974:	b480      	push	{r7}
2000e976:	b085      	sub	sp, #20
2000e978:	af00      	add	r7, sp, #0
2000e97a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
2000e97c:	2300      	movs	r3, #0
2000e97e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
2000e980:	687b      	ldr	r3, [r7, #4]
2000e982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
2000e984:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
2000e986:	687b      	ldr	r3, [r7, #4]
2000e988:	699b      	ldr	r3, [r3, #24]
2000e98a:	2b00      	cmp	r3, #0
2000e98c:	d11f      	bne.n	2000e9ce <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
2000e98e:	68bb      	ldr	r3, [r7, #8]
2000e990:	2b03      	cmp	r3, #3
2000e992:	d855      	bhi.n	2000ea40 <DMA_CheckFifoParam+0xcc>
2000e994:	a201      	add	r2, pc, #4	; (adr r2, 2000e99c <DMA_CheckFifoParam+0x28>)
2000e996:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
2000e99a:	bf00      	nop
2000e99c:	2000e9ad 	.word	0x2000e9ad
2000e9a0:	2000e9bf 	.word	0x2000e9bf
2000e9a4:	2000e9ad 	.word	0x2000e9ad
2000e9a8:	2000ea41 	.word	0x2000ea41
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
2000e9ac:	687b      	ldr	r3, [r7, #4]
2000e9ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2000e9b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
2000e9b4:	2b00      	cmp	r3, #0
2000e9b6:	d045      	beq.n	2000ea44 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
2000e9b8:	2301      	movs	r3, #1
2000e9ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
2000e9bc:	e042      	b.n	2000ea44 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
2000e9be:	687b      	ldr	r3, [r7, #4]
2000e9c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2000e9c2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
2000e9c6:	d13f      	bne.n	2000ea48 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
2000e9c8:	2301      	movs	r3, #1
2000e9ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
2000e9cc:	e03c      	b.n	2000ea48 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
2000e9ce:	687b      	ldr	r3, [r7, #4]
2000e9d0:	699b      	ldr	r3, [r3, #24]
2000e9d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
2000e9d6:	d121      	bne.n	2000ea1c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
2000e9d8:	68bb      	ldr	r3, [r7, #8]
2000e9da:	2b03      	cmp	r3, #3
2000e9dc:	d836      	bhi.n	2000ea4c <DMA_CheckFifoParam+0xd8>
2000e9de:	a201      	add	r2, pc, #4	; (adr r2, 2000e9e4 <DMA_CheckFifoParam+0x70>)
2000e9e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
2000e9e4:	2000e9f5 	.word	0x2000e9f5
2000e9e8:	2000e9fb 	.word	0x2000e9fb
2000e9ec:	2000e9f5 	.word	0x2000e9f5
2000e9f0:	2000ea0d 	.word	0x2000ea0d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
2000e9f4:	2301      	movs	r3, #1
2000e9f6:	73fb      	strb	r3, [r7, #15]
      break;
2000e9f8:	e02f      	b.n	2000ea5a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
2000e9fa:	687b      	ldr	r3, [r7, #4]
2000e9fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2000e9fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
2000ea02:	2b00      	cmp	r3, #0
2000ea04:	d024      	beq.n	2000ea50 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
2000ea06:	2301      	movs	r3, #1
2000ea08:	73fb      	strb	r3, [r7, #15]
      }
      break;
2000ea0a:	e021      	b.n	2000ea50 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
2000ea0c:	687b      	ldr	r3, [r7, #4]
2000ea0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2000ea10:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
2000ea14:	d11e      	bne.n	2000ea54 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
2000ea16:	2301      	movs	r3, #1
2000ea18:	73fb      	strb	r3, [r7, #15]
      }
      break;   
2000ea1a:	e01b      	b.n	2000ea54 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
2000ea1c:	68bb      	ldr	r3, [r7, #8]
2000ea1e:	2b02      	cmp	r3, #2
2000ea20:	d902      	bls.n	2000ea28 <DMA_CheckFifoParam+0xb4>
2000ea22:	2b03      	cmp	r3, #3
2000ea24:	d003      	beq.n	2000ea2e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
2000ea26:	e018      	b.n	2000ea5a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
2000ea28:	2301      	movs	r3, #1
2000ea2a:	73fb      	strb	r3, [r7, #15]
      break;
2000ea2c:	e015      	b.n	2000ea5a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
2000ea2e:	687b      	ldr	r3, [r7, #4]
2000ea30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2000ea32:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
2000ea36:	2b00      	cmp	r3, #0
2000ea38:	d00e      	beq.n	2000ea58 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
2000ea3a:	2301      	movs	r3, #1
2000ea3c:	73fb      	strb	r3, [r7, #15]
      break;
2000ea3e:	e00b      	b.n	2000ea58 <DMA_CheckFifoParam+0xe4>
      break;
2000ea40:	bf00      	nop
2000ea42:	e00a      	b.n	2000ea5a <DMA_CheckFifoParam+0xe6>
      break;
2000ea44:	bf00      	nop
2000ea46:	e008      	b.n	2000ea5a <DMA_CheckFifoParam+0xe6>
      break;
2000ea48:	bf00      	nop
2000ea4a:	e006      	b.n	2000ea5a <DMA_CheckFifoParam+0xe6>
      break;
2000ea4c:	bf00      	nop
2000ea4e:	e004      	b.n	2000ea5a <DMA_CheckFifoParam+0xe6>
      break;
2000ea50:	bf00      	nop
2000ea52:	e002      	b.n	2000ea5a <DMA_CheckFifoParam+0xe6>
      break;   
2000ea54:	bf00      	nop
2000ea56:	e000      	b.n	2000ea5a <DMA_CheckFifoParam+0xe6>
      break;
2000ea58:	bf00      	nop
    }
  } 
  
  return status; 
2000ea5a:	7bfb      	ldrb	r3, [r7, #15]
}
2000ea5c:	4618      	mov	r0, r3
2000ea5e:	3714      	adds	r7, #20
2000ea60:	46bd      	mov	sp, r7
2000ea62:	f85d 7b04 	ldr.w	r7, [sp], #4
2000ea66:	4770      	bx	lr

2000ea68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
2000ea68:	b480      	push	{r7}
2000ea6a:	b089      	sub	sp, #36	; 0x24
2000ea6c:	af00      	add	r7, sp, #0
2000ea6e:	6078      	str	r0, [r7, #4]
2000ea70:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
2000ea72:	2300      	movs	r3, #0
2000ea74:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
2000ea76:	2300      	movs	r3, #0
2000ea78:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
2000ea7a:	2300      	movs	r3, #0
2000ea7c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
2000ea7e:	2300      	movs	r3, #0
2000ea80:	61fb      	str	r3, [r7, #28]
2000ea82:	e16b      	b.n	2000ed5c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
2000ea84:	2201      	movs	r2, #1
2000ea86:	69fb      	ldr	r3, [r7, #28]
2000ea88:	fa02 f303 	lsl.w	r3, r2, r3
2000ea8c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
2000ea8e:	683b      	ldr	r3, [r7, #0]
2000ea90:	681b      	ldr	r3, [r3, #0]
2000ea92:	697a      	ldr	r2, [r7, #20]
2000ea94:	4013      	ands	r3, r2
2000ea96:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
2000ea98:	693a      	ldr	r2, [r7, #16]
2000ea9a:	697b      	ldr	r3, [r7, #20]
2000ea9c:	429a      	cmp	r2, r3
2000ea9e:	f040 815a 	bne.w	2000ed56 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
2000eaa2:	683b      	ldr	r3, [r7, #0]
2000eaa4:	685b      	ldr	r3, [r3, #4]
2000eaa6:	2b01      	cmp	r3, #1
2000eaa8:	d00b      	beq.n	2000eac2 <HAL_GPIO_Init+0x5a>
2000eaaa:	683b      	ldr	r3, [r7, #0]
2000eaac:	685b      	ldr	r3, [r3, #4]
2000eaae:	2b02      	cmp	r3, #2
2000eab0:	d007      	beq.n	2000eac2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
2000eab2:	683b      	ldr	r3, [r7, #0]
2000eab4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
2000eab6:	2b11      	cmp	r3, #17
2000eab8:	d003      	beq.n	2000eac2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
2000eaba:	683b      	ldr	r3, [r7, #0]
2000eabc:	685b      	ldr	r3, [r3, #4]
2000eabe:	2b12      	cmp	r3, #18
2000eac0:	d130      	bne.n	2000eb24 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
2000eac2:	687b      	ldr	r3, [r7, #4]
2000eac4:	689b      	ldr	r3, [r3, #8]
2000eac6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
2000eac8:	69fb      	ldr	r3, [r7, #28]
2000eaca:	005b      	lsls	r3, r3, #1
2000eacc:	2203      	movs	r2, #3
2000eace:	fa02 f303 	lsl.w	r3, r2, r3
2000ead2:	43db      	mvns	r3, r3
2000ead4:	69ba      	ldr	r2, [r7, #24]
2000ead6:	4013      	ands	r3, r2
2000ead8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
2000eada:	683b      	ldr	r3, [r7, #0]
2000eadc:	68da      	ldr	r2, [r3, #12]
2000eade:	69fb      	ldr	r3, [r7, #28]
2000eae0:	005b      	lsls	r3, r3, #1
2000eae2:	fa02 f303 	lsl.w	r3, r2, r3
2000eae6:	69ba      	ldr	r2, [r7, #24]
2000eae8:	4313      	orrs	r3, r2
2000eaea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
2000eaec:	687b      	ldr	r3, [r7, #4]
2000eaee:	69ba      	ldr	r2, [r7, #24]
2000eaf0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
2000eaf2:	687b      	ldr	r3, [r7, #4]
2000eaf4:	685b      	ldr	r3, [r3, #4]
2000eaf6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
2000eaf8:	2201      	movs	r2, #1
2000eafa:	69fb      	ldr	r3, [r7, #28]
2000eafc:	fa02 f303 	lsl.w	r3, r2, r3
2000eb00:	43db      	mvns	r3, r3
2000eb02:	69ba      	ldr	r2, [r7, #24]
2000eb04:	4013      	ands	r3, r2
2000eb06:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
2000eb08:	683b      	ldr	r3, [r7, #0]
2000eb0a:	685b      	ldr	r3, [r3, #4]
2000eb0c:	091b      	lsrs	r3, r3, #4
2000eb0e:	f003 0201 	and.w	r2, r3, #1
2000eb12:	69fb      	ldr	r3, [r7, #28]
2000eb14:	fa02 f303 	lsl.w	r3, r2, r3
2000eb18:	69ba      	ldr	r2, [r7, #24]
2000eb1a:	4313      	orrs	r3, r2
2000eb1c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
2000eb1e:	687b      	ldr	r3, [r7, #4]
2000eb20:	69ba      	ldr	r2, [r7, #24]
2000eb22:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
2000eb24:	687b      	ldr	r3, [r7, #4]
2000eb26:	68db      	ldr	r3, [r3, #12]
2000eb28:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
2000eb2a:	69fb      	ldr	r3, [r7, #28]
2000eb2c:	005b      	lsls	r3, r3, #1
2000eb2e:	2203      	movs	r2, #3
2000eb30:	fa02 f303 	lsl.w	r3, r2, r3
2000eb34:	43db      	mvns	r3, r3
2000eb36:	69ba      	ldr	r2, [r7, #24]
2000eb38:	4013      	ands	r3, r2
2000eb3a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
2000eb3c:	683b      	ldr	r3, [r7, #0]
2000eb3e:	689a      	ldr	r2, [r3, #8]
2000eb40:	69fb      	ldr	r3, [r7, #28]
2000eb42:	005b      	lsls	r3, r3, #1
2000eb44:	fa02 f303 	lsl.w	r3, r2, r3
2000eb48:	69ba      	ldr	r2, [r7, #24]
2000eb4a:	4313      	orrs	r3, r2
2000eb4c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
2000eb4e:	687b      	ldr	r3, [r7, #4]
2000eb50:	69ba      	ldr	r2, [r7, #24]
2000eb52:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
2000eb54:	683b      	ldr	r3, [r7, #0]
2000eb56:	685b      	ldr	r3, [r3, #4]
2000eb58:	2b02      	cmp	r3, #2
2000eb5a:	d003      	beq.n	2000eb64 <HAL_GPIO_Init+0xfc>
2000eb5c:	683b      	ldr	r3, [r7, #0]
2000eb5e:	685b      	ldr	r3, [r3, #4]
2000eb60:	2b12      	cmp	r3, #18
2000eb62:	d123      	bne.n	2000ebac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
2000eb64:	69fb      	ldr	r3, [r7, #28]
2000eb66:	08da      	lsrs	r2, r3, #3
2000eb68:	687b      	ldr	r3, [r7, #4]
2000eb6a:	3208      	adds	r2, #8
2000eb6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
2000eb70:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
2000eb72:	69fb      	ldr	r3, [r7, #28]
2000eb74:	f003 0307 	and.w	r3, r3, #7
2000eb78:	009b      	lsls	r3, r3, #2
2000eb7a:	220f      	movs	r2, #15
2000eb7c:	fa02 f303 	lsl.w	r3, r2, r3
2000eb80:	43db      	mvns	r3, r3
2000eb82:	69ba      	ldr	r2, [r7, #24]
2000eb84:	4013      	ands	r3, r2
2000eb86:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
2000eb88:	683b      	ldr	r3, [r7, #0]
2000eb8a:	691a      	ldr	r2, [r3, #16]
2000eb8c:	69fb      	ldr	r3, [r7, #28]
2000eb8e:	f003 0307 	and.w	r3, r3, #7
2000eb92:	009b      	lsls	r3, r3, #2
2000eb94:	fa02 f303 	lsl.w	r3, r2, r3
2000eb98:	69ba      	ldr	r2, [r7, #24]
2000eb9a:	4313      	orrs	r3, r2
2000eb9c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
2000eb9e:	69fb      	ldr	r3, [r7, #28]
2000eba0:	08da      	lsrs	r2, r3, #3
2000eba2:	687b      	ldr	r3, [r7, #4]
2000eba4:	3208      	adds	r2, #8
2000eba6:	69b9      	ldr	r1, [r7, #24]
2000eba8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
2000ebac:	687b      	ldr	r3, [r7, #4]
2000ebae:	681b      	ldr	r3, [r3, #0]
2000ebb0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
2000ebb2:	69fb      	ldr	r3, [r7, #28]
2000ebb4:	005b      	lsls	r3, r3, #1
2000ebb6:	2203      	movs	r2, #3
2000ebb8:	fa02 f303 	lsl.w	r3, r2, r3
2000ebbc:	43db      	mvns	r3, r3
2000ebbe:	69ba      	ldr	r2, [r7, #24]
2000ebc0:	4013      	ands	r3, r2
2000ebc2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
2000ebc4:	683b      	ldr	r3, [r7, #0]
2000ebc6:	685b      	ldr	r3, [r3, #4]
2000ebc8:	f003 0203 	and.w	r2, r3, #3
2000ebcc:	69fb      	ldr	r3, [r7, #28]
2000ebce:	005b      	lsls	r3, r3, #1
2000ebd0:	fa02 f303 	lsl.w	r3, r2, r3
2000ebd4:	69ba      	ldr	r2, [r7, #24]
2000ebd6:	4313      	orrs	r3, r2
2000ebd8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
2000ebda:	687b      	ldr	r3, [r7, #4]
2000ebdc:	69ba      	ldr	r2, [r7, #24]
2000ebde:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
2000ebe0:	683b      	ldr	r3, [r7, #0]
2000ebe2:	685b      	ldr	r3, [r3, #4]
2000ebe4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
2000ebe8:	2b00      	cmp	r3, #0
2000ebea:	f000 80b4 	beq.w	2000ed56 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
2000ebee:	2300      	movs	r3, #0
2000ebf0:	60fb      	str	r3, [r7, #12]
2000ebf2:	4b5f      	ldr	r3, [pc, #380]	; (2000ed70 <HAL_GPIO_Init+0x308>)
2000ebf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2000ebf6:	4a5e      	ldr	r2, [pc, #376]	; (2000ed70 <HAL_GPIO_Init+0x308>)
2000ebf8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
2000ebfc:	6453      	str	r3, [r2, #68]	; 0x44
2000ebfe:	4b5c      	ldr	r3, [pc, #368]	; (2000ed70 <HAL_GPIO_Init+0x308>)
2000ec00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2000ec02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
2000ec06:	60fb      	str	r3, [r7, #12]
2000ec08:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
2000ec0a:	4a5a      	ldr	r2, [pc, #360]	; (2000ed74 <HAL_GPIO_Init+0x30c>)
2000ec0c:	69fb      	ldr	r3, [r7, #28]
2000ec0e:	089b      	lsrs	r3, r3, #2
2000ec10:	3302      	adds	r3, #2
2000ec12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
2000ec16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
2000ec18:	69fb      	ldr	r3, [r7, #28]
2000ec1a:	f003 0303 	and.w	r3, r3, #3
2000ec1e:	009b      	lsls	r3, r3, #2
2000ec20:	220f      	movs	r2, #15
2000ec22:	fa02 f303 	lsl.w	r3, r2, r3
2000ec26:	43db      	mvns	r3, r3
2000ec28:	69ba      	ldr	r2, [r7, #24]
2000ec2a:	4013      	ands	r3, r2
2000ec2c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
2000ec2e:	687b      	ldr	r3, [r7, #4]
2000ec30:	4a51      	ldr	r2, [pc, #324]	; (2000ed78 <HAL_GPIO_Init+0x310>)
2000ec32:	4293      	cmp	r3, r2
2000ec34:	d02b      	beq.n	2000ec8e <HAL_GPIO_Init+0x226>
2000ec36:	687b      	ldr	r3, [r7, #4]
2000ec38:	4a50      	ldr	r2, [pc, #320]	; (2000ed7c <HAL_GPIO_Init+0x314>)
2000ec3a:	4293      	cmp	r3, r2
2000ec3c:	d025      	beq.n	2000ec8a <HAL_GPIO_Init+0x222>
2000ec3e:	687b      	ldr	r3, [r7, #4]
2000ec40:	4a4f      	ldr	r2, [pc, #316]	; (2000ed80 <HAL_GPIO_Init+0x318>)
2000ec42:	4293      	cmp	r3, r2
2000ec44:	d01f      	beq.n	2000ec86 <HAL_GPIO_Init+0x21e>
2000ec46:	687b      	ldr	r3, [r7, #4]
2000ec48:	4a4e      	ldr	r2, [pc, #312]	; (2000ed84 <HAL_GPIO_Init+0x31c>)
2000ec4a:	4293      	cmp	r3, r2
2000ec4c:	d019      	beq.n	2000ec82 <HAL_GPIO_Init+0x21a>
2000ec4e:	687b      	ldr	r3, [r7, #4]
2000ec50:	4a4d      	ldr	r2, [pc, #308]	; (2000ed88 <HAL_GPIO_Init+0x320>)
2000ec52:	4293      	cmp	r3, r2
2000ec54:	d013      	beq.n	2000ec7e <HAL_GPIO_Init+0x216>
2000ec56:	687b      	ldr	r3, [r7, #4]
2000ec58:	4a4c      	ldr	r2, [pc, #304]	; (2000ed8c <HAL_GPIO_Init+0x324>)
2000ec5a:	4293      	cmp	r3, r2
2000ec5c:	d00d      	beq.n	2000ec7a <HAL_GPIO_Init+0x212>
2000ec5e:	687b      	ldr	r3, [r7, #4]
2000ec60:	4a4b      	ldr	r2, [pc, #300]	; (2000ed90 <HAL_GPIO_Init+0x328>)
2000ec62:	4293      	cmp	r3, r2
2000ec64:	d007      	beq.n	2000ec76 <HAL_GPIO_Init+0x20e>
2000ec66:	687b      	ldr	r3, [r7, #4]
2000ec68:	4a4a      	ldr	r2, [pc, #296]	; (2000ed94 <HAL_GPIO_Init+0x32c>)
2000ec6a:	4293      	cmp	r3, r2
2000ec6c:	d101      	bne.n	2000ec72 <HAL_GPIO_Init+0x20a>
2000ec6e:	2307      	movs	r3, #7
2000ec70:	e00e      	b.n	2000ec90 <HAL_GPIO_Init+0x228>
2000ec72:	2308      	movs	r3, #8
2000ec74:	e00c      	b.n	2000ec90 <HAL_GPIO_Init+0x228>
2000ec76:	2306      	movs	r3, #6
2000ec78:	e00a      	b.n	2000ec90 <HAL_GPIO_Init+0x228>
2000ec7a:	2305      	movs	r3, #5
2000ec7c:	e008      	b.n	2000ec90 <HAL_GPIO_Init+0x228>
2000ec7e:	2304      	movs	r3, #4
2000ec80:	e006      	b.n	2000ec90 <HAL_GPIO_Init+0x228>
2000ec82:	2303      	movs	r3, #3
2000ec84:	e004      	b.n	2000ec90 <HAL_GPIO_Init+0x228>
2000ec86:	2302      	movs	r3, #2
2000ec88:	e002      	b.n	2000ec90 <HAL_GPIO_Init+0x228>
2000ec8a:	2301      	movs	r3, #1
2000ec8c:	e000      	b.n	2000ec90 <HAL_GPIO_Init+0x228>
2000ec8e:	2300      	movs	r3, #0
2000ec90:	69fa      	ldr	r2, [r7, #28]
2000ec92:	f002 0203 	and.w	r2, r2, #3
2000ec96:	0092      	lsls	r2, r2, #2
2000ec98:	4093      	lsls	r3, r2
2000ec9a:	69ba      	ldr	r2, [r7, #24]
2000ec9c:	4313      	orrs	r3, r2
2000ec9e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
2000eca0:	4934      	ldr	r1, [pc, #208]	; (2000ed74 <HAL_GPIO_Init+0x30c>)
2000eca2:	69fb      	ldr	r3, [r7, #28]
2000eca4:	089b      	lsrs	r3, r3, #2
2000eca6:	3302      	adds	r3, #2
2000eca8:	69ba      	ldr	r2, [r7, #24]
2000ecaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
2000ecae:	4b3a      	ldr	r3, [pc, #232]	; (2000ed98 <HAL_GPIO_Init+0x330>)
2000ecb0:	681b      	ldr	r3, [r3, #0]
2000ecb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
2000ecb4:	693b      	ldr	r3, [r7, #16]
2000ecb6:	43db      	mvns	r3, r3
2000ecb8:	69ba      	ldr	r2, [r7, #24]
2000ecba:	4013      	ands	r3, r2
2000ecbc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
2000ecbe:	683b      	ldr	r3, [r7, #0]
2000ecc0:	685b      	ldr	r3, [r3, #4]
2000ecc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
2000ecc6:	2b00      	cmp	r3, #0
2000ecc8:	d003      	beq.n	2000ecd2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
2000ecca:	69ba      	ldr	r2, [r7, #24]
2000eccc:	693b      	ldr	r3, [r7, #16]
2000ecce:	4313      	orrs	r3, r2
2000ecd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
2000ecd2:	4a31      	ldr	r2, [pc, #196]	; (2000ed98 <HAL_GPIO_Init+0x330>)
2000ecd4:	69bb      	ldr	r3, [r7, #24]
2000ecd6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
2000ecd8:	4b2f      	ldr	r3, [pc, #188]	; (2000ed98 <HAL_GPIO_Init+0x330>)
2000ecda:	685b      	ldr	r3, [r3, #4]
2000ecdc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
2000ecde:	693b      	ldr	r3, [r7, #16]
2000ece0:	43db      	mvns	r3, r3
2000ece2:	69ba      	ldr	r2, [r7, #24]
2000ece4:	4013      	ands	r3, r2
2000ece6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
2000ece8:	683b      	ldr	r3, [r7, #0]
2000ecea:	685b      	ldr	r3, [r3, #4]
2000ecec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
2000ecf0:	2b00      	cmp	r3, #0
2000ecf2:	d003      	beq.n	2000ecfc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
2000ecf4:	69ba      	ldr	r2, [r7, #24]
2000ecf6:	693b      	ldr	r3, [r7, #16]
2000ecf8:	4313      	orrs	r3, r2
2000ecfa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
2000ecfc:	4a26      	ldr	r2, [pc, #152]	; (2000ed98 <HAL_GPIO_Init+0x330>)
2000ecfe:	69bb      	ldr	r3, [r7, #24]
2000ed00:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
2000ed02:	4b25      	ldr	r3, [pc, #148]	; (2000ed98 <HAL_GPIO_Init+0x330>)
2000ed04:	689b      	ldr	r3, [r3, #8]
2000ed06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
2000ed08:	693b      	ldr	r3, [r7, #16]
2000ed0a:	43db      	mvns	r3, r3
2000ed0c:	69ba      	ldr	r2, [r7, #24]
2000ed0e:	4013      	ands	r3, r2
2000ed10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
2000ed12:	683b      	ldr	r3, [r7, #0]
2000ed14:	685b      	ldr	r3, [r3, #4]
2000ed16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
2000ed1a:	2b00      	cmp	r3, #0
2000ed1c:	d003      	beq.n	2000ed26 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
2000ed1e:	69ba      	ldr	r2, [r7, #24]
2000ed20:	693b      	ldr	r3, [r7, #16]
2000ed22:	4313      	orrs	r3, r2
2000ed24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
2000ed26:	4a1c      	ldr	r2, [pc, #112]	; (2000ed98 <HAL_GPIO_Init+0x330>)
2000ed28:	69bb      	ldr	r3, [r7, #24]
2000ed2a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
2000ed2c:	4b1a      	ldr	r3, [pc, #104]	; (2000ed98 <HAL_GPIO_Init+0x330>)
2000ed2e:	68db      	ldr	r3, [r3, #12]
2000ed30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
2000ed32:	693b      	ldr	r3, [r7, #16]
2000ed34:	43db      	mvns	r3, r3
2000ed36:	69ba      	ldr	r2, [r7, #24]
2000ed38:	4013      	ands	r3, r2
2000ed3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
2000ed3c:	683b      	ldr	r3, [r7, #0]
2000ed3e:	685b      	ldr	r3, [r3, #4]
2000ed40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
2000ed44:	2b00      	cmp	r3, #0
2000ed46:	d003      	beq.n	2000ed50 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
2000ed48:	69ba      	ldr	r2, [r7, #24]
2000ed4a:	693b      	ldr	r3, [r7, #16]
2000ed4c:	4313      	orrs	r3, r2
2000ed4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
2000ed50:	4a11      	ldr	r2, [pc, #68]	; (2000ed98 <HAL_GPIO_Init+0x330>)
2000ed52:	69bb      	ldr	r3, [r7, #24]
2000ed54:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
2000ed56:	69fb      	ldr	r3, [r7, #28]
2000ed58:	3301      	adds	r3, #1
2000ed5a:	61fb      	str	r3, [r7, #28]
2000ed5c:	69fb      	ldr	r3, [r7, #28]
2000ed5e:	2b0f      	cmp	r3, #15
2000ed60:	f67f ae90 	bls.w	2000ea84 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
2000ed64:	bf00      	nop
2000ed66:	3724      	adds	r7, #36	; 0x24
2000ed68:	46bd      	mov	sp, r7
2000ed6a:	f85d 7b04 	ldr.w	r7, [sp], #4
2000ed6e:	4770      	bx	lr
2000ed70:	40023800 	.word	0x40023800
2000ed74:	40013800 	.word	0x40013800
2000ed78:	40020000 	.word	0x40020000
2000ed7c:	40020400 	.word	0x40020400
2000ed80:	40020800 	.word	0x40020800
2000ed84:	40020c00 	.word	0x40020c00
2000ed88:	40021000 	.word	0x40021000
2000ed8c:	40021400 	.word	0x40021400
2000ed90:	40021800 	.word	0x40021800
2000ed94:	40021c00 	.word	0x40021c00
2000ed98:	40013c00 	.word	0x40013c00

2000ed9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
2000ed9c:	b480      	push	{r7}
2000ed9e:	b083      	sub	sp, #12
2000eda0:	af00      	add	r7, sp, #0
2000eda2:	6078      	str	r0, [r7, #4]
2000eda4:	460b      	mov	r3, r1
2000eda6:	807b      	strh	r3, [r7, #2]
2000eda8:	4613      	mov	r3, r2
2000edaa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
2000edac:	787b      	ldrb	r3, [r7, #1]
2000edae:	2b00      	cmp	r3, #0
2000edb0:	d003      	beq.n	2000edba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
2000edb2:	887a      	ldrh	r2, [r7, #2]
2000edb4:	687b      	ldr	r3, [r7, #4]
2000edb6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
2000edb8:	e003      	b.n	2000edc2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
2000edba:	887b      	ldrh	r3, [r7, #2]
2000edbc:	041a      	lsls	r2, r3, #16
2000edbe:	687b      	ldr	r3, [r7, #4]
2000edc0:	619a      	str	r2, [r3, #24]
}
2000edc2:	bf00      	nop
2000edc4:	370c      	adds	r7, #12
2000edc6:	46bd      	mov	sp, r7
2000edc8:	f85d 7b04 	ldr.w	r7, [sp], #4
2000edcc:	4770      	bx	lr

2000edce <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
2000edce:	b580      	push	{r7, lr}
2000edd0:	b084      	sub	sp, #16
2000edd2:	af00      	add	r7, sp, #0
2000edd4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
2000edd6:	687b      	ldr	r3, [r7, #4]
2000edd8:	2b00      	cmp	r3, #0
2000edda:	d101      	bne.n	2000ede0 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
2000eddc:	2301      	movs	r3, #1
2000edde:	e02b      	b.n	2000ee38 <HAL_IWDG_Init+0x6a>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
2000ede0:	687b      	ldr	r3, [r7, #4]
2000ede2:	681b      	ldr	r3, [r3, #0]
2000ede4:	f64c 42cc 	movw	r2, #52428	; 0xcccc
2000ede8:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
2000edea:	687b      	ldr	r3, [r7, #4]
2000edec:	681b      	ldr	r3, [r3, #0]
2000edee:	f245 5255 	movw	r2, #21845	; 0x5555
2000edf2:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
2000edf4:	687b      	ldr	r3, [r7, #4]
2000edf6:	681b      	ldr	r3, [r3, #0]
2000edf8:	687a      	ldr	r2, [r7, #4]
2000edfa:	6852      	ldr	r2, [r2, #4]
2000edfc:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
2000edfe:	687b      	ldr	r3, [r7, #4]
2000ee00:	681b      	ldr	r3, [r3, #0]
2000ee02:	687a      	ldr	r2, [r7, #4]
2000ee04:	6892      	ldr	r2, [r2, #8]
2000ee06:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
2000ee08:	f7ff f980 	bl	2000e10c <HAL_GetTick>
2000ee0c:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while (hiwdg->Instance->SR != 0x00u)
2000ee0e:	e008      	b.n	2000ee22 <HAL_IWDG_Init+0x54>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
2000ee10:	f7ff f97c 	bl	2000e10c <HAL_GetTick>
2000ee14:	4602      	mov	r2, r0
2000ee16:	68fb      	ldr	r3, [r7, #12]
2000ee18:	1ad3      	subs	r3, r2, r3
2000ee1a:	2b30      	cmp	r3, #48	; 0x30
2000ee1c:	d901      	bls.n	2000ee22 <HAL_IWDG_Init+0x54>
    {
      return HAL_TIMEOUT;
2000ee1e:	2303      	movs	r3, #3
2000ee20:	e00a      	b.n	2000ee38 <HAL_IWDG_Init+0x6a>
  while (hiwdg->Instance->SR != 0x00u)
2000ee22:	687b      	ldr	r3, [r7, #4]
2000ee24:	681b      	ldr	r3, [r3, #0]
2000ee26:	68db      	ldr	r3, [r3, #12]
2000ee28:	2b00      	cmp	r3, #0
2000ee2a:	d1f1      	bne.n	2000ee10 <HAL_IWDG_Init+0x42>
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
2000ee2c:	687b      	ldr	r3, [r7, #4]
2000ee2e:	681b      	ldr	r3, [r3, #0]
2000ee30:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
2000ee34:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
2000ee36:	2300      	movs	r3, #0
}
2000ee38:	4618      	mov	r0, r3
2000ee3a:	3710      	adds	r7, #16
2000ee3c:	46bd      	mov	sp, r7
2000ee3e:	bd80      	pop	{r7, pc}

2000ee40 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
2000ee40:	b580      	push	{r7, lr}
2000ee42:	b086      	sub	sp, #24
2000ee44:	af00      	add	r7, sp, #0
2000ee46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
2000ee48:	687b      	ldr	r3, [r7, #4]
2000ee4a:	2b00      	cmp	r3, #0
2000ee4c:	d101      	bne.n	2000ee52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
2000ee4e:	2301      	movs	r3, #1
2000ee50:	e25b      	b.n	2000f30a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
2000ee52:	687b      	ldr	r3, [r7, #4]
2000ee54:	681b      	ldr	r3, [r3, #0]
2000ee56:	f003 0301 	and.w	r3, r3, #1
2000ee5a:	2b00      	cmp	r3, #0
2000ee5c:	d075      	beq.n	2000ef4a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
2000ee5e:	4ba3      	ldr	r3, [pc, #652]	; (2000f0ec <HAL_RCC_OscConfig+0x2ac>)
2000ee60:	689b      	ldr	r3, [r3, #8]
2000ee62:	f003 030c 	and.w	r3, r3, #12
2000ee66:	2b04      	cmp	r3, #4
2000ee68:	d00c      	beq.n	2000ee84 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
2000ee6a:	4ba0      	ldr	r3, [pc, #640]	; (2000f0ec <HAL_RCC_OscConfig+0x2ac>)
2000ee6c:	689b      	ldr	r3, [r3, #8]
2000ee6e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
2000ee72:	2b08      	cmp	r3, #8
2000ee74:	d112      	bne.n	2000ee9c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
2000ee76:	4b9d      	ldr	r3, [pc, #628]	; (2000f0ec <HAL_RCC_OscConfig+0x2ac>)
2000ee78:	685b      	ldr	r3, [r3, #4]
2000ee7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
2000ee7e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
2000ee82:	d10b      	bne.n	2000ee9c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
2000ee84:	4b99      	ldr	r3, [pc, #612]	; (2000f0ec <HAL_RCC_OscConfig+0x2ac>)
2000ee86:	681b      	ldr	r3, [r3, #0]
2000ee88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
2000ee8c:	2b00      	cmp	r3, #0
2000ee8e:	d05b      	beq.n	2000ef48 <HAL_RCC_OscConfig+0x108>
2000ee90:	687b      	ldr	r3, [r7, #4]
2000ee92:	685b      	ldr	r3, [r3, #4]
2000ee94:	2b00      	cmp	r3, #0
2000ee96:	d157      	bne.n	2000ef48 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
2000ee98:	2301      	movs	r3, #1
2000ee9a:	e236      	b.n	2000f30a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
2000ee9c:	687b      	ldr	r3, [r7, #4]
2000ee9e:	685b      	ldr	r3, [r3, #4]
2000eea0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
2000eea4:	d106      	bne.n	2000eeb4 <HAL_RCC_OscConfig+0x74>
2000eea6:	4b91      	ldr	r3, [pc, #580]	; (2000f0ec <HAL_RCC_OscConfig+0x2ac>)
2000eea8:	681b      	ldr	r3, [r3, #0]
2000eeaa:	4a90      	ldr	r2, [pc, #576]	; (2000f0ec <HAL_RCC_OscConfig+0x2ac>)
2000eeac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
2000eeb0:	6013      	str	r3, [r2, #0]
2000eeb2:	e01d      	b.n	2000eef0 <HAL_RCC_OscConfig+0xb0>
2000eeb4:	687b      	ldr	r3, [r7, #4]
2000eeb6:	685b      	ldr	r3, [r3, #4]
2000eeb8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
2000eebc:	d10c      	bne.n	2000eed8 <HAL_RCC_OscConfig+0x98>
2000eebe:	4b8b      	ldr	r3, [pc, #556]	; (2000f0ec <HAL_RCC_OscConfig+0x2ac>)
2000eec0:	681b      	ldr	r3, [r3, #0]
2000eec2:	4a8a      	ldr	r2, [pc, #552]	; (2000f0ec <HAL_RCC_OscConfig+0x2ac>)
2000eec4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
2000eec8:	6013      	str	r3, [r2, #0]
2000eeca:	4b88      	ldr	r3, [pc, #544]	; (2000f0ec <HAL_RCC_OscConfig+0x2ac>)
2000eecc:	681b      	ldr	r3, [r3, #0]
2000eece:	4a87      	ldr	r2, [pc, #540]	; (2000f0ec <HAL_RCC_OscConfig+0x2ac>)
2000eed0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
2000eed4:	6013      	str	r3, [r2, #0]
2000eed6:	e00b      	b.n	2000eef0 <HAL_RCC_OscConfig+0xb0>
2000eed8:	4b84      	ldr	r3, [pc, #528]	; (2000f0ec <HAL_RCC_OscConfig+0x2ac>)
2000eeda:	681b      	ldr	r3, [r3, #0]
2000eedc:	4a83      	ldr	r2, [pc, #524]	; (2000f0ec <HAL_RCC_OscConfig+0x2ac>)
2000eede:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
2000eee2:	6013      	str	r3, [r2, #0]
2000eee4:	4b81      	ldr	r3, [pc, #516]	; (2000f0ec <HAL_RCC_OscConfig+0x2ac>)
2000eee6:	681b      	ldr	r3, [r3, #0]
2000eee8:	4a80      	ldr	r2, [pc, #512]	; (2000f0ec <HAL_RCC_OscConfig+0x2ac>)
2000eeea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
2000eeee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
2000eef0:	687b      	ldr	r3, [r7, #4]
2000eef2:	685b      	ldr	r3, [r3, #4]
2000eef4:	2b00      	cmp	r3, #0
2000eef6:	d013      	beq.n	2000ef20 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
2000eef8:	f7ff f908 	bl	2000e10c <HAL_GetTick>
2000eefc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
2000eefe:	e008      	b.n	2000ef12 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
2000ef00:	f7ff f904 	bl	2000e10c <HAL_GetTick>
2000ef04:	4602      	mov	r2, r0
2000ef06:	693b      	ldr	r3, [r7, #16]
2000ef08:	1ad3      	subs	r3, r2, r3
2000ef0a:	2b64      	cmp	r3, #100	; 0x64
2000ef0c:	d901      	bls.n	2000ef12 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
2000ef0e:	2303      	movs	r3, #3
2000ef10:	e1fb      	b.n	2000f30a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
2000ef12:	4b76      	ldr	r3, [pc, #472]	; (2000f0ec <HAL_RCC_OscConfig+0x2ac>)
2000ef14:	681b      	ldr	r3, [r3, #0]
2000ef16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
2000ef1a:	2b00      	cmp	r3, #0
2000ef1c:	d0f0      	beq.n	2000ef00 <HAL_RCC_OscConfig+0xc0>
2000ef1e:	e014      	b.n	2000ef4a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
2000ef20:	f7ff f8f4 	bl	2000e10c <HAL_GetTick>
2000ef24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
2000ef26:	e008      	b.n	2000ef3a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
2000ef28:	f7ff f8f0 	bl	2000e10c <HAL_GetTick>
2000ef2c:	4602      	mov	r2, r0
2000ef2e:	693b      	ldr	r3, [r7, #16]
2000ef30:	1ad3      	subs	r3, r2, r3
2000ef32:	2b64      	cmp	r3, #100	; 0x64
2000ef34:	d901      	bls.n	2000ef3a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
2000ef36:	2303      	movs	r3, #3
2000ef38:	e1e7      	b.n	2000f30a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
2000ef3a:	4b6c      	ldr	r3, [pc, #432]	; (2000f0ec <HAL_RCC_OscConfig+0x2ac>)
2000ef3c:	681b      	ldr	r3, [r3, #0]
2000ef3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
2000ef42:	2b00      	cmp	r3, #0
2000ef44:	d1f0      	bne.n	2000ef28 <HAL_RCC_OscConfig+0xe8>
2000ef46:	e000      	b.n	2000ef4a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
2000ef48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
2000ef4a:	687b      	ldr	r3, [r7, #4]
2000ef4c:	681b      	ldr	r3, [r3, #0]
2000ef4e:	f003 0302 	and.w	r3, r3, #2
2000ef52:	2b00      	cmp	r3, #0
2000ef54:	d063      	beq.n	2000f01e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
2000ef56:	4b65      	ldr	r3, [pc, #404]	; (2000f0ec <HAL_RCC_OscConfig+0x2ac>)
2000ef58:	689b      	ldr	r3, [r3, #8]
2000ef5a:	f003 030c 	and.w	r3, r3, #12
2000ef5e:	2b00      	cmp	r3, #0
2000ef60:	d00b      	beq.n	2000ef7a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
2000ef62:	4b62      	ldr	r3, [pc, #392]	; (2000f0ec <HAL_RCC_OscConfig+0x2ac>)
2000ef64:	689b      	ldr	r3, [r3, #8]
2000ef66:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
2000ef6a:	2b08      	cmp	r3, #8
2000ef6c:	d11c      	bne.n	2000efa8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
2000ef6e:	4b5f      	ldr	r3, [pc, #380]	; (2000f0ec <HAL_RCC_OscConfig+0x2ac>)
2000ef70:	685b      	ldr	r3, [r3, #4]
2000ef72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
2000ef76:	2b00      	cmp	r3, #0
2000ef78:	d116      	bne.n	2000efa8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
2000ef7a:	4b5c      	ldr	r3, [pc, #368]	; (2000f0ec <HAL_RCC_OscConfig+0x2ac>)
2000ef7c:	681b      	ldr	r3, [r3, #0]
2000ef7e:	f003 0302 	and.w	r3, r3, #2
2000ef82:	2b00      	cmp	r3, #0
2000ef84:	d005      	beq.n	2000ef92 <HAL_RCC_OscConfig+0x152>
2000ef86:	687b      	ldr	r3, [r7, #4]
2000ef88:	68db      	ldr	r3, [r3, #12]
2000ef8a:	2b01      	cmp	r3, #1
2000ef8c:	d001      	beq.n	2000ef92 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
2000ef8e:	2301      	movs	r3, #1
2000ef90:	e1bb      	b.n	2000f30a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
2000ef92:	4b56      	ldr	r3, [pc, #344]	; (2000f0ec <HAL_RCC_OscConfig+0x2ac>)
2000ef94:	681b      	ldr	r3, [r3, #0]
2000ef96:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
2000ef9a:	687b      	ldr	r3, [r7, #4]
2000ef9c:	691b      	ldr	r3, [r3, #16]
2000ef9e:	00db      	lsls	r3, r3, #3
2000efa0:	4952      	ldr	r1, [pc, #328]	; (2000f0ec <HAL_RCC_OscConfig+0x2ac>)
2000efa2:	4313      	orrs	r3, r2
2000efa4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
2000efa6:	e03a      	b.n	2000f01e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
2000efa8:	687b      	ldr	r3, [r7, #4]
2000efaa:	68db      	ldr	r3, [r3, #12]
2000efac:	2b00      	cmp	r3, #0
2000efae:	d020      	beq.n	2000eff2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
2000efb0:	4b4f      	ldr	r3, [pc, #316]	; (2000f0f0 <HAL_RCC_OscConfig+0x2b0>)
2000efb2:	2201      	movs	r2, #1
2000efb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
2000efb6:	f7ff f8a9 	bl	2000e10c <HAL_GetTick>
2000efba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
2000efbc:	e008      	b.n	2000efd0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
2000efbe:	f7ff f8a5 	bl	2000e10c <HAL_GetTick>
2000efc2:	4602      	mov	r2, r0
2000efc4:	693b      	ldr	r3, [r7, #16]
2000efc6:	1ad3      	subs	r3, r2, r3
2000efc8:	2b02      	cmp	r3, #2
2000efca:	d901      	bls.n	2000efd0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
2000efcc:	2303      	movs	r3, #3
2000efce:	e19c      	b.n	2000f30a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
2000efd0:	4b46      	ldr	r3, [pc, #280]	; (2000f0ec <HAL_RCC_OscConfig+0x2ac>)
2000efd2:	681b      	ldr	r3, [r3, #0]
2000efd4:	f003 0302 	and.w	r3, r3, #2
2000efd8:	2b00      	cmp	r3, #0
2000efda:	d0f0      	beq.n	2000efbe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
2000efdc:	4b43      	ldr	r3, [pc, #268]	; (2000f0ec <HAL_RCC_OscConfig+0x2ac>)
2000efde:	681b      	ldr	r3, [r3, #0]
2000efe0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
2000efe4:	687b      	ldr	r3, [r7, #4]
2000efe6:	691b      	ldr	r3, [r3, #16]
2000efe8:	00db      	lsls	r3, r3, #3
2000efea:	4940      	ldr	r1, [pc, #256]	; (2000f0ec <HAL_RCC_OscConfig+0x2ac>)
2000efec:	4313      	orrs	r3, r2
2000efee:	600b      	str	r3, [r1, #0]
2000eff0:	e015      	b.n	2000f01e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
2000eff2:	4b3f      	ldr	r3, [pc, #252]	; (2000f0f0 <HAL_RCC_OscConfig+0x2b0>)
2000eff4:	2200      	movs	r2, #0
2000eff6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
2000eff8:	f7ff f888 	bl	2000e10c <HAL_GetTick>
2000effc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
2000effe:	e008      	b.n	2000f012 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
2000f000:	f7ff f884 	bl	2000e10c <HAL_GetTick>
2000f004:	4602      	mov	r2, r0
2000f006:	693b      	ldr	r3, [r7, #16]
2000f008:	1ad3      	subs	r3, r2, r3
2000f00a:	2b02      	cmp	r3, #2
2000f00c:	d901      	bls.n	2000f012 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
2000f00e:	2303      	movs	r3, #3
2000f010:	e17b      	b.n	2000f30a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
2000f012:	4b36      	ldr	r3, [pc, #216]	; (2000f0ec <HAL_RCC_OscConfig+0x2ac>)
2000f014:	681b      	ldr	r3, [r3, #0]
2000f016:	f003 0302 	and.w	r3, r3, #2
2000f01a:	2b00      	cmp	r3, #0
2000f01c:	d1f0      	bne.n	2000f000 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
2000f01e:	687b      	ldr	r3, [r7, #4]
2000f020:	681b      	ldr	r3, [r3, #0]
2000f022:	f003 0308 	and.w	r3, r3, #8
2000f026:	2b00      	cmp	r3, #0
2000f028:	d030      	beq.n	2000f08c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
2000f02a:	687b      	ldr	r3, [r7, #4]
2000f02c:	695b      	ldr	r3, [r3, #20]
2000f02e:	2b00      	cmp	r3, #0
2000f030:	d016      	beq.n	2000f060 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
2000f032:	4b30      	ldr	r3, [pc, #192]	; (2000f0f4 <HAL_RCC_OscConfig+0x2b4>)
2000f034:	2201      	movs	r2, #1
2000f036:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
2000f038:	f7ff f868 	bl	2000e10c <HAL_GetTick>
2000f03c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
2000f03e:	e008      	b.n	2000f052 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
2000f040:	f7ff f864 	bl	2000e10c <HAL_GetTick>
2000f044:	4602      	mov	r2, r0
2000f046:	693b      	ldr	r3, [r7, #16]
2000f048:	1ad3      	subs	r3, r2, r3
2000f04a:	2b02      	cmp	r3, #2
2000f04c:	d901      	bls.n	2000f052 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
2000f04e:	2303      	movs	r3, #3
2000f050:	e15b      	b.n	2000f30a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
2000f052:	4b26      	ldr	r3, [pc, #152]	; (2000f0ec <HAL_RCC_OscConfig+0x2ac>)
2000f054:	6f5b      	ldr	r3, [r3, #116]	; 0x74
2000f056:	f003 0302 	and.w	r3, r3, #2
2000f05a:	2b00      	cmp	r3, #0
2000f05c:	d0f0      	beq.n	2000f040 <HAL_RCC_OscConfig+0x200>
2000f05e:	e015      	b.n	2000f08c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
2000f060:	4b24      	ldr	r3, [pc, #144]	; (2000f0f4 <HAL_RCC_OscConfig+0x2b4>)
2000f062:	2200      	movs	r2, #0
2000f064:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
2000f066:	f7ff f851 	bl	2000e10c <HAL_GetTick>
2000f06a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
2000f06c:	e008      	b.n	2000f080 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
2000f06e:	f7ff f84d 	bl	2000e10c <HAL_GetTick>
2000f072:	4602      	mov	r2, r0
2000f074:	693b      	ldr	r3, [r7, #16]
2000f076:	1ad3      	subs	r3, r2, r3
2000f078:	2b02      	cmp	r3, #2
2000f07a:	d901      	bls.n	2000f080 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
2000f07c:	2303      	movs	r3, #3
2000f07e:	e144      	b.n	2000f30a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
2000f080:	4b1a      	ldr	r3, [pc, #104]	; (2000f0ec <HAL_RCC_OscConfig+0x2ac>)
2000f082:	6f5b      	ldr	r3, [r3, #116]	; 0x74
2000f084:	f003 0302 	and.w	r3, r3, #2
2000f088:	2b00      	cmp	r3, #0
2000f08a:	d1f0      	bne.n	2000f06e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
2000f08c:	687b      	ldr	r3, [r7, #4]
2000f08e:	681b      	ldr	r3, [r3, #0]
2000f090:	f003 0304 	and.w	r3, r3, #4
2000f094:	2b00      	cmp	r3, #0
2000f096:	f000 80a0 	beq.w	2000f1da <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
2000f09a:	2300      	movs	r3, #0
2000f09c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
2000f09e:	4b13      	ldr	r3, [pc, #76]	; (2000f0ec <HAL_RCC_OscConfig+0x2ac>)
2000f0a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2000f0a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
2000f0a6:	2b00      	cmp	r3, #0
2000f0a8:	d10f      	bne.n	2000f0ca <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
2000f0aa:	2300      	movs	r3, #0
2000f0ac:	60bb      	str	r3, [r7, #8]
2000f0ae:	4b0f      	ldr	r3, [pc, #60]	; (2000f0ec <HAL_RCC_OscConfig+0x2ac>)
2000f0b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2000f0b2:	4a0e      	ldr	r2, [pc, #56]	; (2000f0ec <HAL_RCC_OscConfig+0x2ac>)
2000f0b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
2000f0b8:	6413      	str	r3, [r2, #64]	; 0x40
2000f0ba:	4b0c      	ldr	r3, [pc, #48]	; (2000f0ec <HAL_RCC_OscConfig+0x2ac>)
2000f0bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2000f0be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
2000f0c2:	60bb      	str	r3, [r7, #8]
2000f0c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
2000f0c6:	2301      	movs	r3, #1
2000f0c8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
2000f0ca:	4b0b      	ldr	r3, [pc, #44]	; (2000f0f8 <HAL_RCC_OscConfig+0x2b8>)
2000f0cc:	681b      	ldr	r3, [r3, #0]
2000f0ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
2000f0d2:	2b00      	cmp	r3, #0
2000f0d4:	d121      	bne.n	2000f11a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
2000f0d6:	4b08      	ldr	r3, [pc, #32]	; (2000f0f8 <HAL_RCC_OscConfig+0x2b8>)
2000f0d8:	681b      	ldr	r3, [r3, #0]
2000f0da:	4a07      	ldr	r2, [pc, #28]	; (2000f0f8 <HAL_RCC_OscConfig+0x2b8>)
2000f0dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
2000f0e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
2000f0e2:	f7ff f813 	bl	2000e10c <HAL_GetTick>
2000f0e6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
2000f0e8:	e011      	b.n	2000f10e <HAL_RCC_OscConfig+0x2ce>
2000f0ea:	bf00      	nop
2000f0ec:	40023800 	.word	0x40023800
2000f0f0:	42470000 	.word	0x42470000
2000f0f4:	42470e80 	.word	0x42470e80
2000f0f8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
2000f0fc:	f7ff f806 	bl	2000e10c <HAL_GetTick>
2000f100:	4602      	mov	r2, r0
2000f102:	693b      	ldr	r3, [r7, #16]
2000f104:	1ad3      	subs	r3, r2, r3
2000f106:	2b02      	cmp	r3, #2
2000f108:	d901      	bls.n	2000f10e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
2000f10a:	2303      	movs	r3, #3
2000f10c:	e0fd      	b.n	2000f30a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
2000f10e:	4b81      	ldr	r3, [pc, #516]	; (2000f314 <HAL_RCC_OscConfig+0x4d4>)
2000f110:	681b      	ldr	r3, [r3, #0]
2000f112:	f403 7380 	and.w	r3, r3, #256	; 0x100
2000f116:	2b00      	cmp	r3, #0
2000f118:	d0f0      	beq.n	2000f0fc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
2000f11a:	687b      	ldr	r3, [r7, #4]
2000f11c:	689b      	ldr	r3, [r3, #8]
2000f11e:	2b01      	cmp	r3, #1
2000f120:	d106      	bne.n	2000f130 <HAL_RCC_OscConfig+0x2f0>
2000f122:	4b7d      	ldr	r3, [pc, #500]	; (2000f318 <HAL_RCC_OscConfig+0x4d8>)
2000f124:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2000f126:	4a7c      	ldr	r2, [pc, #496]	; (2000f318 <HAL_RCC_OscConfig+0x4d8>)
2000f128:	f043 0301 	orr.w	r3, r3, #1
2000f12c:	6713      	str	r3, [r2, #112]	; 0x70
2000f12e:	e01c      	b.n	2000f16a <HAL_RCC_OscConfig+0x32a>
2000f130:	687b      	ldr	r3, [r7, #4]
2000f132:	689b      	ldr	r3, [r3, #8]
2000f134:	2b05      	cmp	r3, #5
2000f136:	d10c      	bne.n	2000f152 <HAL_RCC_OscConfig+0x312>
2000f138:	4b77      	ldr	r3, [pc, #476]	; (2000f318 <HAL_RCC_OscConfig+0x4d8>)
2000f13a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2000f13c:	4a76      	ldr	r2, [pc, #472]	; (2000f318 <HAL_RCC_OscConfig+0x4d8>)
2000f13e:	f043 0304 	orr.w	r3, r3, #4
2000f142:	6713      	str	r3, [r2, #112]	; 0x70
2000f144:	4b74      	ldr	r3, [pc, #464]	; (2000f318 <HAL_RCC_OscConfig+0x4d8>)
2000f146:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2000f148:	4a73      	ldr	r2, [pc, #460]	; (2000f318 <HAL_RCC_OscConfig+0x4d8>)
2000f14a:	f043 0301 	orr.w	r3, r3, #1
2000f14e:	6713      	str	r3, [r2, #112]	; 0x70
2000f150:	e00b      	b.n	2000f16a <HAL_RCC_OscConfig+0x32a>
2000f152:	4b71      	ldr	r3, [pc, #452]	; (2000f318 <HAL_RCC_OscConfig+0x4d8>)
2000f154:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2000f156:	4a70      	ldr	r2, [pc, #448]	; (2000f318 <HAL_RCC_OscConfig+0x4d8>)
2000f158:	f023 0301 	bic.w	r3, r3, #1
2000f15c:	6713      	str	r3, [r2, #112]	; 0x70
2000f15e:	4b6e      	ldr	r3, [pc, #440]	; (2000f318 <HAL_RCC_OscConfig+0x4d8>)
2000f160:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2000f162:	4a6d      	ldr	r2, [pc, #436]	; (2000f318 <HAL_RCC_OscConfig+0x4d8>)
2000f164:	f023 0304 	bic.w	r3, r3, #4
2000f168:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
2000f16a:	687b      	ldr	r3, [r7, #4]
2000f16c:	689b      	ldr	r3, [r3, #8]
2000f16e:	2b00      	cmp	r3, #0
2000f170:	d015      	beq.n	2000f19e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
2000f172:	f7fe ffcb 	bl	2000e10c <HAL_GetTick>
2000f176:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
2000f178:	e00a      	b.n	2000f190 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
2000f17a:	f7fe ffc7 	bl	2000e10c <HAL_GetTick>
2000f17e:	4602      	mov	r2, r0
2000f180:	693b      	ldr	r3, [r7, #16]
2000f182:	1ad3      	subs	r3, r2, r3
2000f184:	f241 3288 	movw	r2, #5000	; 0x1388
2000f188:	4293      	cmp	r3, r2
2000f18a:	d901      	bls.n	2000f190 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
2000f18c:	2303      	movs	r3, #3
2000f18e:	e0bc      	b.n	2000f30a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
2000f190:	4b61      	ldr	r3, [pc, #388]	; (2000f318 <HAL_RCC_OscConfig+0x4d8>)
2000f192:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2000f194:	f003 0302 	and.w	r3, r3, #2
2000f198:	2b00      	cmp	r3, #0
2000f19a:	d0ee      	beq.n	2000f17a <HAL_RCC_OscConfig+0x33a>
2000f19c:	e014      	b.n	2000f1c8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
2000f19e:	f7fe ffb5 	bl	2000e10c <HAL_GetTick>
2000f1a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
2000f1a4:	e00a      	b.n	2000f1bc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
2000f1a6:	f7fe ffb1 	bl	2000e10c <HAL_GetTick>
2000f1aa:	4602      	mov	r2, r0
2000f1ac:	693b      	ldr	r3, [r7, #16]
2000f1ae:	1ad3      	subs	r3, r2, r3
2000f1b0:	f241 3288 	movw	r2, #5000	; 0x1388
2000f1b4:	4293      	cmp	r3, r2
2000f1b6:	d901      	bls.n	2000f1bc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
2000f1b8:	2303      	movs	r3, #3
2000f1ba:	e0a6      	b.n	2000f30a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
2000f1bc:	4b56      	ldr	r3, [pc, #344]	; (2000f318 <HAL_RCC_OscConfig+0x4d8>)
2000f1be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2000f1c0:	f003 0302 	and.w	r3, r3, #2
2000f1c4:	2b00      	cmp	r3, #0
2000f1c6:	d1ee      	bne.n	2000f1a6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
2000f1c8:	7dfb      	ldrb	r3, [r7, #23]
2000f1ca:	2b01      	cmp	r3, #1
2000f1cc:	d105      	bne.n	2000f1da <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
2000f1ce:	4b52      	ldr	r3, [pc, #328]	; (2000f318 <HAL_RCC_OscConfig+0x4d8>)
2000f1d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2000f1d2:	4a51      	ldr	r2, [pc, #324]	; (2000f318 <HAL_RCC_OscConfig+0x4d8>)
2000f1d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
2000f1d8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
2000f1da:	687b      	ldr	r3, [r7, #4]
2000f1dc:	699b      	ldr	r3, [r3, #24]
2000f1de:	2b00      	cmp	r3, #0
2000f1e0:	f000 8092 	beq.w	2000f308 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
2000f1e4:	4b4c      	ldr	r3, [pc, #304]	; (2000f318 <HAL_RCC_OscConfig+0x4d8>)
2000f1e6:	689b      	ldr	r3, [r3, #8]
2000f1e8:	f003 030c 	and.w	r3, r3, #12
2000f1ec:	2b08      	cmp	r3, #8
2000f1ee:	d05c      	beq.n	2000f2aa <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
2000f1f0:	687b      	ldr	r3, [r7, #4]
2000f1f2:	699b      	ldr	r3, [r3, #24]
2000f1f4:	2b02      	cmp	r3, #2
2000f1f6:	d141      	bne.n	2000f27c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
2000f1f8:	4b48      	ldr	r3, [pc, #288]	; (2000f31c <HAL_RCC_OscConfig+0x4dc>)
2000f1fa:	2200      	movs	r2, #0
2000f1fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
2000f1fe:	f7fe ff85 	bl	2000e10c <HAL_GetTick>
2000f202:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
2000f204:	e008      	b.n	2000f218 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
2000f206:	f7fe ff81 	bl	2000e10c <HAL_GetTick>
2000f20a:	4602      	mov	r2, r0
2000f20c:	693b      	ldr	r3, [r7, #16]
2000f20e:	1ad3      	subs	r3, r2, r3
2000f210:	2b02      	cmp	r3, #2
2000f212:	d901      	bls.n	2000f218 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
2000f214:	2303      	movs	r3, #3
2000f216:	e078      	b.n	2000f30a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
2000f218:	4b3f      	ldr	r3, [pc, #252]	; (2000f318 <HAL_RCC_OscConfig+0x4d8>)
2000f21a:	681b      	ldr	r3, [r3, #0]
2000f21c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
2000f220:	2b00      	cmp	r3, #0
2000f222:	d1f0      	bne.n	2000f206 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
2000f224:	687b      	ldr	r3, [r7, #4]
2000f226:	69da      	ldr	r2, [r3, #28]
2000f228:	687b      	ldr	r3, [r7, #4]
2000f22a:	6a1b      	ldr	r3, [r3, #32]
2000f22c:	431a      	orrs	r2, r3
2000f22e:	687b      	ldr	r3, [r7, #4]
2000f230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2000f232:	019b      	lsls	r3, r3, #6
2000f234:	431a      	orrs	r2, r3
2000f236:	687b      	ldr	r3, [r7, #4]
2000f238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
2000f23a:	085b      	lsrs	r3, r3, #1
2000f23c:	3b01      	subs	r3, #1
2000f23e:	041b      	lsls	r3, r3, #16
2000f240:	431a      	orrs	r2, r3
2000f242:	687b      	ldr	r3, [r7, #4]
2000f244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2000f246:	061b      	lsls	r3, r3, #24
2000f248:	4933      	ldr	r1, [pc, #204]	; (2000f318 <HAL_RCC_OscConfig+0x4d8>)
2000f24a:	4313      	orrs	r3, r2
2000f24c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
2000f24e:	4b33      	ldr	r3, [pc, #204]	; (2000f31c <HAL_RCC_OscConfig+0x4dc>)
2000f250:	2201      	movs	r2, #1
2000f252:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
2000f254:	f7fe ff5a 	bl	2000e10c <HAL_GetTick>
2000f258:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
2000f25a:	e008      	b.n	2000f26e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
2000f25c:	f7fe ff56 	bl	2000e10c <HAL_GetTick>
2000f260:	4602      	mov	r2, r0
2000f262:	693b      	ldr	r3, [r7, #16]
2000f264:	1ad3      	subs	r3, r2, r3
2000f266:	2b02      	cmp	r3, #2
2000f268:	d901      	bls.n	2000f26e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
2000f26a:	2303      	movs	r3, #3
2000f26c:	e04d      	b.n	2000f30a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
2000f26e:	4b2a      	ldr	r3, [pc, #168]	; (2000f318 <HAL_RCC_OscConfig+0x4d8>)
2000f270:	681b      	ldr	r3, [r3, #0]
2000f272:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
2000f276:	2b00      	cmp	r3, #0
2000f278:	d0f0      	beq.n	2000f25c <HAL_RCC_OscConfig+0x41c>
2000f27a:	e045      	b.n	2000f308 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
2000f27c:	4b27      	ldr	r3, [pc, #156]	; (2000f31c <HAL_RCC_OscConfig+0x4dc>)
2000f27e:	2200      	movs	r2, #0
2000f280:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
2000f282:	f7fe ff43 	bl	2000e10c <HAL_GetTick>
2000f286:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
2000f288:	e008      	b.n	2000f29c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
2000f28a:	f7fe ff3f 	bl	2000e10c <HAL_GetTick>
2000f28e:	4602      	mov	r2, r0
2000f290:	693b      	ldr	r3, [r7, #16]
2000f292:	1ad3      	subs	r3, r2, r3
2000f294:	2b02      	cmp	r3, #2
2000f296:	d901      	bls.n	2000f29c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
2000f298:	2303      	movs	r3, #3
2000f29a:	e036      	b.n	2000f30a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
2000f29c:	4b1e      	ldr	r3, [pc, #120]	; (2000f318 <HAL_RCC_OscConfig+0x4d8>)
2000f29e:	681b      	ldr	r3, [r3, #0]
2000f2a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
2000f2a4:	2b00      	cmp	r3, #0
2000f2a6:	d1f0      	bne.n	2000f28a <HAL_RCC_OscConfig+0x44a>
2000f2a8:	e02e      	b.n	2000f308 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
2000f2aa:	687b      	ldr	r3, [r7, #4]
2000f2ac:	699b      	ldr	r3, [r3, #24]
2000f2ae:	2b01      	cmp	r3, #1
2000f2b0:	d101      	bne.n	2000f2b6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
2000f2b2:	2301      	movs	r3, #1
2000f2b4:	e029      	b.n	2000f30a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
2000f2b6:	4b18      	ldr	r3, [pc, #96]	; (2000f318 <HAL_RCC_OscConfig+0x4d8>)
2000f2b8:	685b      	ldr	r3, [r3, #4]
2000f2ba:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
2000f2bc:	68fb      	ldr	r3, [r7, #12]
2000f2be:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
2000f2c2:	687b      	ldr	r3, [r7, #4]
2000f2c4:	69db      	ldr	r3, [r3, #28]
2000f2c6:	429a      	cmp	r2, r3
2000f2c8:	d11c      	bne.n	2000f304 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
2000f2ca:	68fb      	ldr	r3, [r7, #12]
2000f2cc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
2000f2d0:	687b      	ldr	r3, [r7, #4]
2000f2d2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
2000f2d4:	429a      	cmp	r2, r3
2000f2d6:	d115      	bne.n	2000f304 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
2000f2d8:	68fa      	ldr	r2, [r7, #12]
2000f2da:	f647 73c0 	movw	r3, #32704	; 0x7fc0
2000f2de:	4013      	ands	r3, r2
2000f2e0:	687a      	ldr	r2, [r7, #4]
2000f2e2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
2000f2e4:	4293      	cmp	r3, r2
2000f2e6:	d10d      	bne.n	2000f304 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
2000f2e8:	68fb      	ldr	r3, [r7, #12]
2000f2ea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
2000f2ee:	687b      	ldr	r3, [r7, #4]
2000f2f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
2000f2f2:	429a      	cmp	r2, r3
2000f2f4:	d106      	bne.n	2000f304 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
2000f2f6:	68fb      	ldr	r3, [r7, #12]
2000f2f8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
2000f2fc:	687b      	ldr	r3, [r7, #4]
2000f2fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
2000f300:	429a      	cmp	r2, r3
2000f302:	d001      	beq.n	2000f308 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
2000f304:	2301      	movs	r3, #1
2000f306:	e000      	b.n	2000f30a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
2000f308:	2300      	movs	r3, #0
}
2000f30a:	4618      	mov	r0, r3
2000f30c:	3718      	adds	r7, #24
2000f30e:	46bd      	mov	sp, r7
2000f310:	bd80      	pop	{r7, pc}
2000f312:	bf00      	nop
2000f314:	40007000 	.word	0x40007000
2000f318:	40023800 	.word	0x40023800
2000f31c:	42470060 	.word	0x42470060

2000f320 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
2000f320:	b580      	push	{r7, lr}
2000f322:	b084      	sub	sp, #16
2000f324:	af00      	add	r7, sp, #0
2000f326:	6078      	str	r0, [r7, #4]
2000f328:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
2000f32a:	687b      	ldr	r3, [r7, #4]
2000f32c:	2b00      	cmp	r3, #0
2000f32e:	d101      	bne.n	2000f334 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
2000f330:	2301      	movs	r3, #1
2000f332:	e0cc      	b.n	2000f4ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
2000f334:	4b68      	ldr	r3, [pc, #416]	; (2000f4d8 <HAL_RCC_ClockConfig+0x1b8>)
2000f336:	681b      	ldr	r3, [r3, #0]
2000f338:	f003 030f 	and.w	r3, r3, #15
2000f33c:	683a      	ldr	r2, [r7, #0]
2000f33e:	429a      	cmp	r2, r3
2000f340:	d90c      	bls.n	2000f35c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
2000f342:	4b65      	ldr	r3, [pc, #404]	; (2000f4d8 <HAL_RCC_ClockConfig+0x1b8>)
2000f344:	683a      	ldr	r2, [r7, #0]
2000f346:	b2d2      	uxtb	r2, r2
2000f348:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
2000f34a:	4b63      	ldr	r3, [pc, #396]	; (2000f4d8 <HAL_RCC_ClockConfig+0x1b8>)
2000f34c:	681b      	ldr	r3, [r3, #0]
2000f34e:	f003 030f 	and.w	r3, r3, #15
2000f352:	683a      	ldr	r2, [r7, #0]
2000f354:	429a      	cmp	r2, r3
2000f356:	d001      	beq.n	2000f35c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
2000f358:	2301      	movs	r3, #1
2000f35a:	e0b8      	b.n	2000f4ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
2000f35c:	687b      	ldr	r3, [r7, #4]
2000f35e:	681b      	ldr	r3, [r3, #0]
2000f360:	f003 0302 	and.w	r3, r3, #2
2000f364:	2b00      	cmp	r3, #0
2000f366:	d020      	beq.n	2000f3aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
2000f368:	687b      	ldr	r3, [r7, #4]
2000f36a:	681b      	ldr	r3, [r3, #0]
2000f36c:	f003 0304 	and.w	r3, r3, #4
2000f370:	2b00      	cmp	r3, #0
2000f372:	d005      	beq.n	2000f380 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
2000f374:	4b59      	ldr	r3, [pc, #356]	; (2000f4dc <HAL_RCC_ClockConfig+0x1bc>)
2000f376:	689b      	ldr	r3, [r3, #8]
2000f378:	4a58      	ldr	r2, [pc, #352]	; (2000f4dc <HAL_RCC_ClockConfig+0x1bc>)
2000f37a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
2000f37e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
2000f380:	687b      	ldr	r3, [r7, #4]
2000f382:	681b      	ldr	r3, [r3, #0]
2000f384:	f003 0308 	and.w	r3, r3, #8
2000f388:	2b00      	cmp	r3, #0
2000f38a:	d005      	beq.n	2000f398 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
2000f38c:	4b53      	ldr	r3, [pc, #332]	; (2000f4dc <HAL_RCC_ClockConfig+0x1bc>)
2000f38e:	689b      	ldr	r3, [r3, #8]
2000f390:	4a52      	ldr	r2, [pc, #328]	; (2000f4dc <HAL_RCC_ClockConfig+0x1bc>)
2000f392:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
2000f396:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
2000f398:	4b50      	ldr	r3, [pc, #320]	; (2000f4dc <HAL_RCC_ClockConfig+0x1bc>)
2000f39a:	689b      	ldr	r3, [r3, #8]
2000f39c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
2000f3a0:	687b      	ldr	r3, [r7, #4]
2000f3a2:	689b      	ldr	r3, [r3, #8]
2000f3a4:	494d      	ldr	r1, [pc, #308]	; (2000f4dc <HAL_RCC_ClockConfig+0x1bc>)
2000f3a6:	4313      	orrs	r3, r2
2000f3a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
2000f3aa:	687b      	ldr	r3, [r7, #4]
2000f3ac:	681b      	ldr	r3, [r3, #0]
2000f3ae:	f003 0301 	and.w	r3, r3, #1
2000f3b2:	2b00      	cmp	r3, #0
2000f3b4:	d044      	beq.n	2000f440 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
2000f3b6:	687b      	ldr	r3, [r7, #4]
2000f3b8:	685b      	ldr	r3, [r3, #4]
2000f3ba:	2b01      	cmp	r3, #1
2000f3bc:	d107      	bne.n	2000f3ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
2000f3be:	4b47      	ldr	r3, [pc, #284]	; (2000f4dc <HAL_RCC_ClockConfig+0x1bc>)
2000f3c0:	681b      	ldr	r3, [r3, #0]
2000f3c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
2000f3c6:	2b00      	cmp	r3, #0
2000f3c8:	d119      	bne.n	2000f3fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
2000f3ca:	2301      	movs	r3, #1
2000f3cc:	e07f      	b.n	2000f4ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
2000f3ce:	687b      	ldr	r3, [r7, #4]
2000f3d0:	685b      	ldr	r3, [r3, #4]
2000f3d2:	2b02      	cmp	r3, #2
2000f3d4:	d003      	beq.n	2000f3de <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
2000f3d6:	687b      	ldr	r3, [r7, #4]
2000f3d8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
2000f3da:	2b03      	cmp	r3, #3
2000f3dc:	d107      	bne.n	2000f3ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
2000f3de:	4b3f      	ldr	r3, [pc, #252]	; (2000f4dc <HAL_RCC_ClockConfig+0x1bc>)
2000f3e0:	681b      	ldr	r3, [r3, #0]
2000f3e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
2000f3e6:	2b00      	cmp	r3, #0
2000f3e8:	d109      	bne.n	2000f3fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
2000f3ea:	2301      	movs	r3, #1
2000f3ec:	e06f      	b.n	2000f4ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
2000f3ee:	4b3b      	ldr	r3, [pc, #236]	; (2000f4dc <HAL_RCC_ClockConfig+0x1bc>)
2000f3f0:	681b      	ldr	r3, [r3, #0]
2000f3f2:	f003 0302 	and.w	r3, r3, #2
2000f3f6:	2b00      	cmp	r3, #0
2000f3f8:	d101      	bne.n	2000f3fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
2000f3fa:	2301      	movs	r3, #1
2000f3fc:	e067      	b.n	2000f4ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
2000f3fe:	4b37      	ldr	r3, [pc, #220]	; (2000f4dc <HAL_RCC_ClockConfig+0x1bc>)
2000f400:	689b      	ldr	r3, [r3, #8]
2000f402:	f023 0203 	bic.w	r2, r3, #3
2000f406:	687b      	ldr	r3, [r7, #4]
2000f408:	685b      	ldr	r3, [r3, #4]
2000f40a:	4934      	ldr	r1, [pc, #208]	; (2000f4dc <HAL_RCC_ClockConfig+0x1bc>)
2000f40c:	4313      	orrs	r3, r2
2000f40e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
2000f410:	f7fe fe7c 	bl	2000e10c <HAL_GetTick>
2000f414:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
2000f416:	e00a      	b.n	2000f42e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
2000f418:	f7fe fe78 	bl	2000e10c <HAL_GetTick>
2000f41c:	4602      	mov	r2, r0
2000f41e:	68fb      	ldr	r3, [r7, #12]
2000f420:	1ad3      	subs	r3, r2, r3
2000f422:	f241 3288 	movw	r2, #5000	; 0x1388
2000f426:	4293      	cmp	r3, r2
2000f428:	d901      	bls.n	2000f42e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
2000f42a:	2303      	movs	r3, #3
2000f42c:	e04f      	b.n	2000f4ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
2000f42e:	4b2b      	ldr	r3, [pc, #172]	; (2000f4dc <HAL_RCC_ClockConfig+0x1bc>)
2000f430:	689b      	ldr	r3, [r3, #8]
2000f432:	f003 020c 	and.w	r2, r3, #12
2000f436:	687b      	ldr	r3, [r7, #4]
2000f438:	685b      	ldr	r3, [r3, #4]
2000f43a:	009b      	lsls	r3, r3, #2
2000f43c:	429a      	cmp	r2, r3
2000f43e:	d1eb      	bne.n	2000f418 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
2000f440:	4b25      	ldr	r3, [pc, #148]	; (2000f4d8 <HAL_RCC_ClockConfig+0x1b8>)
2000f442:	681b      	ldr	r3, [r3, #0]
2000f444:	f003 030f 	and.w	r3, r3, #15
2000f448:	683a      	ldr	r2, [r7, #0]
2000f44a:	429a      	cmp	r2, r3
2000f44c:	d20c      	bcs.n	2000f468 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
2000f44e:	4b22      	ldr	r3, [pc, #136]	; (2000f4d8 <HAL_RCC_ClockConfig+0x1b8>)
2000f450:	683a      	ldr	r2, [r7, #0]
2000f452:	b2d2      	uxtb	r2, r2
2000f454:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
2000f456:	4b20      	ldr	r3, [pc, #128]	; (2000f4d8 <HAL_RCC_ClockConfig+0x1b8>)
2000f458:	681b      	ldr	r3, [r3, #0]
2000f45a:	f003 030f 	and.w	r3, r3, #15
2000f45e:	683a      	ldr	r2, [r7, #0]
2000f460:	429a      	cmp	r2, r3
2000f462:	d001      	beq.n	2000f468 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
2000f464:	2301      	movs	r3, #1
2000f466:	e032      	b.n	2000f4ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
2000f468:	687b      	ldr	r3, [r7, #4]
2000f46a:	681b      	ldr	r3, [r3, #0]
2000f46c:	f003 0304 	and.w	r3, r3, #4
2000f470:	2b00      	cmp	r3, #0
2000f472:	d008      	beq.n	2000f486 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
2000f474:	4b19      	ldr	r3, [pc, #100]	; (2000f4dc <HAL_RCC_ClockConfig+0x1bc>)
2000f476:	689b      	ldr	r3, [r3, #8]
2000f478:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
2000f47c:	687b      	ldr	r3, [r7, #4]
2000f47e:	68db      	ldr	r3, [r3, #12]
2000f480:	4916      	ldr	r1, [pc, #88]	; (2000f4dc <HAL_RCC_ClockConfig+0x1bc>)
2000f482:	4313      	orrs	r3, r2
2000f484:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
2000f486:	687b      	ldr	r3, [r7, #4]
2000f488:	681b      	ldr	r3, [r3, #0]
2000f48a:	f003 0308 	and.w	r3, r3, #8
2000f48e:	2b00      	cmp	r3, #0
2000f490:	d009      	beq.n	2000f4a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
2000f492:	4b12      	ldr	r3, [pc, #72]	; (2000f4dc <HAL_RCC_ClockConfig+0x1bc>)
2000f494:	689b      	ldr	r3, [r3, #8]
2000f496:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
2000f49a:	687b      	ldr	r3, [r7, #4]
2000f49c:	691b      	ldr	r3, [r3, #16]
2000f49e:	00db      	lsls	r3, r3, #3
2000f4a0:	490e      	ldr	r1, [pc, #56]	; (2000f4dc <HAL_RCC_ClockConfig+0x1bc>)
2000f4a2:	4313      	orrs	r3, r2
2000f4a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
2000f4a6:	f000 f821 	bl	2000f4ec <HAL_RCC_GetSysClockFreq>
2000f4aa:	4601      	mov	r1, r0
2000f4ac:	4b0b      	ldr	r3, [pc, #44]	; (2000f4dc <HAL_RCC_ClockConfig+0x1bc>)
2000f4ae:	689b      	ldr	r3, [r3, #8]
2000f4b0:	091b      	lsrs	r3, r3, #4
2000f4b2:	f003 030f 	and.w	r3, r3, #15
2000f4b6:	4a0a      	ldr	r2, [pc, #40]	; (2000f4e0 <HAL_RCC_ClockConfig+0x1c0>)
2000f4b8:	5cd3      	ldrb	r3, [r2, r3]
2000f4ba:	fa21 f303 	lsr.w	r3, r1, r3
2000f4be:	4a09      	ldr	r2, [pc, #36]	; (2000f4e4 <HAL_RCC_ClockConfig+0x1c4>)
2000f4c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
2000f4c2:	4b09      	ldr	r3, [pc, #36]	; (2000f4e8 <HAL_RCC_ClockConfig+0x1c8>)
2000f4c4:	681b      	ldr	r3, [r3, #0]
2000f4c6:	4618      	mov	r0, r3
2000f4c8:	f7fe fddc 	bl	2000e084 <HAL_InitTick>

  return HAL_OK;
2000f4cc:	2300      	movs	r3, #0
}
2000f4ce:	4618      	mov	r0, r3
2000f4d0:	3710      	adds	r7, #16
2000f4d2:	46bd      	mov	sp, r7
2000f4d4:	bd80      	pop	{r7, pc}
2000f4d6:	bf00      	nop
2000f4d8:	40023c00 	.word	0x40023c00
2000f4dc:	40023800 	.word	0x40023800
2000f4e0:	20011798 	.word	0x20011798
2000f4e4:	200117fc 	.word	0x200117fc
2000f4e8:	20011810 	.word	0x20011810

2000f4ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
2000f4ec:	b5f0      	push	{r4, r5, r6, r7, lr}
2000f4ee:	b085      	sub	sp, #20
2000f4f0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
2000f4f2:	2300      	movs	r3, #0
2000f4f4:	607b      	str	r3, [r7, #4]
2000f4f6:	2300      	movs	r3, #0
2000f4f8:	60fb      	str	r3, [r7, #12]
2000f4fa:	2300      	movs	r3, #0
2000f4fc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
2000f4fe:	2300      	movs	r3, #0
2000f500:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
2000f502:	4b50      	ldr	r3, [pc, #320]	; (2000f644 <HAL_RCC_GetSysClockFreq+0x158>)
2000f504:	689b      	ldr	r3, [r3, #8]
2000f506:	f003 030c 	and.w	r3, r3, #12
2000f50a:	2b04      	cmp	r3, #4
2000f50c:	d007      	beq.n	2000f51e <HAL_RCC_GetSysClockFreq+0x32>
2000f50e:	2b08      	cmp	r3, #8
2000f510:	d008      	beq.n	2000f524 <HAL_RCC_GetSysClockFreq+0x38>
2000f512:	2b00      	cmp	r3, #0
2000f514:	f040 808d 	bne.w	2000f632 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
2000f518:	4b4b      	ldr	r3, [pc, #300]	; (2000f648 <HAL_RCC_GetSysClockFreq+0x15c>)
2000f51a:	60bb      	str	r3, [r7, #8]
       break;
2000f51c:	e08c      	b.n	2000f638 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
2000f51e:	4b4b      	ldr	r3, [pc, #300]	; (2000f64c <HAL_RCC_GetSysClockFreq+0x160>)
2000f520:	60bb      	str	r3, [r7, #8]
      break;
2000f522:	e089      	b.n	2000f638 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
2000f524:	4b47      	ldr	r3, [pc, #284]	; (2000f644 <HAL_RCC_GetSysClockFreq+0x158>)
2000f526:	685b      	ldr	r3, [r3, #4]
2000f528:	f003 033f 	and.w	r3, r3, #63	; 0x3f
2000f52c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
2000f52e:	4b45      	ldr	r3, [pc, #276]	; (2000f644 <HAL_RCC_GetSysClockFreq+0x158>)
2000f530:	685b      	ldr	r3, [r3, #4]
2000f532:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
2000f536:	2b00      	cmp	r3, #0
2000f538:	d023      	beq.n	2000f582 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
2000f53a:	4b42      	ldr	r3, [pc, #264]	; (2000f644 <HAL_RCC_GetSysClockFreq+0x158>)
2000f53c:	685b      	ldr	r3, [r3, #4]
2000f53e:	099b      	lsrs	r3, r3, #6
2000f540:	f04f 0400 	mov.w	r4, #0
2000f544:	f240 11ff 	movw	r1, #511	; 0x1ff
2000f548:	f04f 0200 	mov.w	r2, #0
2000f54c:	ea03 0501 	and.w	r5, r3, r1
2000f550:	ea04 0602 	and.w	r6, r4, r2
2000f554:	4a3d      	ldr	r2, [pc, #244]	; (2000f64c <HAL_RCC_GetSysClockFreq+0x160>)
2000f556:	fb02 f106 	mul.w	r1, r2, r6
2000f55a:	2200      	movs	r2, #0
2000f55c:	fb02 f205 	mul.w	r2, r2, r5
2000f560:	440a      	add	r2, r1
2000f562:	493a      	ldr	r1, [pc, #232]	; (2000f64c <HAL_RCC_GetSysClockFreq+0x160>)
2000f564:	fba5 0101 	umull	r0, r1, r5, r1
2000f568:	1853      	adds	r3, r2, r1
2000f56a:	4619      	mov	r1, r3
2000f56c:	687b      	ldr	r3, [r7, #4]
2000f56e:	f04f 0400 	mov.w	r4, #0
2000f572:	461a      	mov	r2, r3
2000f574:	4623      	mov	r3, r4
2000f576:	f7fd fe83 	bl	2000d280 <__aeabi_uldivmod>
2000f57a:	4603      	mov	r3, r0
2000f57c:	460c      	mov	r4, r1
2000f57e:	60fb      	str	r3, [r7, #12]
2000f580:	e049      	b.n	2000f616 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
2000f582:	4b30      	ldr	r3, [pc, #192]	; (2000f644 <HAL_RCC_GetSysClockFreq+0x158>)
2000f584:	685b      	ldr	r3, [r3, #4]
2000f586:	099b      	lsrs	r3, r3, #6
2000f588:	f04f 0400 	mov.w	r4, #0
2000f58c:	f240 11ff 	movw	r1, #511	; 0x1ff
2000f590:	f04f 0200 	mov.w	r2, #0
2000f594:	ea03 0501 	and.w	r5, r3, r1
2000f598:	ea04 0602 	and.w	r6, r4, r2
2000f59c:	4629      	mov	r1, r5
2000f59e:	4632      	mov	r2, r6
2000f5a0:	f04f 0300 	mov.w	r3, #0
2000f5a4:	f04f 0400 	mov.w	r4, #0
2000f5a8:	0154      	lsls	r4, r2, #5
2000f5aa:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
2000f5ae:	014b      	lsls	r3, r1, #5
2000f5b0:	4619      	mov	r1, r3
2000f5b2:	4622      	mov	r2, r4
2000f5b4:	1b49      	subs	r1, r1, r5
2000f5b6:	eb62 0206 	sbc.w	r2, r2, r6
2000f5ba:	f04f 0300 	mov.w	r3, #0
2000f5be:	f04f 0400 	mov.w	r4, #0
2000f5c2:	0194      	lsls	r4, r2, #6
2000f5c4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
2000f5c8:	018b      	lsls	r3, r1, #6
2000f5ca:	1a5b      	subs	r3, r3, r1
2000f5cc:	eb64 0402 	sbc.w	r4, r4, r2
2000f5d0:	f04f 0100 	mov.w	r1, #0
2000f5d4:	f04f 0200 	mov.w	r2, #0
2000f5d8:	00e2      	lsls	r2, r4, #3
2000f5da:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
2000f5de:	00d9      	lsls	r1, r3, #3
2000f5e0:	460b      	mov	r3, r1
2000f5e2:	4614      	mov	r4, r2
2000f5e4:	195b      	adds	r3, r3, r5
2000f5e6:	eb44 0406 	adc.w	r4, r4, r6
2000f5ea:	f04f 0100 	mov.w	r1, #0
2000f5ee:	f04f 0200 	mov.w	r2, #0
2000f5f2:	02a2      	lsls	r2, r4, #10
2000f5f4:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
2000f5f8:	0299      	lsls	r1, r3, #10
2000f5fa:	460b      	mov	r3, r1
2000f5fc:	4614      	mov	r4, r2
2000f5fe:	4618      	mov	r0, r3
2000f600:	4621      	mov	r1, r4
2000f602:	687b      	ldr	r3, [r7, #4]
2000f604:	f04f 0400 	mov.w	r4, #0
2000f608:	461a      	mov	r2, r3
2000f60a:	4623      	mov	r3, r4
2000f60c:	f7fd fe38 	bl	2000d280 <__aeabi_uldivmod>
2000f610:	4603      	mov	r3, r0
2000f612:	460c      	mov	r4, r1
2000f614:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
2000f616:	4b0b      	ldr	r3, [pc, #44]	; (2000f644 <HAL_RCC_GetSysClockFreq+0x158>)
2000f618:	685b      	ldr	r3, [r3, #4]
2000f61a:	0c1b      	lsrs	r3, r3, #16
2000f61c:	f003 0303 	and.w	r3, r3, #3
2000f620:	3301      	adds	r3, #1
2000f622:	005b      	lsls	r3, r3, #1
2000f624:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
2000f626:	68fa      	ldr	r2, [r7, #12]
2000f628:	683b      	ldr	r3, [r7, #0]
2000f62a:	fbb2 f3f3 	udiv	r3, r2, r3
2000f62e:	60bb      	str	r3, [r7, #8]
      break;
2000f630:	e002      	b.n	2000f638 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
2000f632:	4b05      	ldr	r3, [pc, #20]	; (2000f648 <HAL_RCC_GetSysClockFreq+0x15c>)
2000f634:	60bb      	str	r3, [r7, #8]
      break;
2000f636:	bf00      	nop
    }
  }
  return sysclockfreq;
2000f638:	68bb      	ldr	r3, [r7, #8]
}
2000f63a:	4618      	mov	r0, r3
2000f63c:	3714      	adds	r7, #20
2000f63e:	46bd      	mov	sp, r7
2000f640:	bdf0      	pop	{r4, r5, r6, r7, pc}
2000f642:	bf00      	nop
2000f644:	40023800 	.word	0x40023800
2000f648:	00f42400 	.word	0x00f42400
2000f64c:	017d7840 	.word	0x017d7840

2000f650 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
2000f650:	b480      	push	{r7}
2000f652:	af00      	add	r7, sp, #0
  return SystemCoreClock;
2000f654:	4b03      	ldr	r3, [pc, #12]	; (2000f664 <HAL_RCC_GetHCLKFreq+0x14>)
2000f656:	681b      	ldr	r3, [r3, #0]
}
2000f658:	4618      	mov	r0, r3
2000f65a:	46bd      	mov	sp, r7
2000f65c:	f85d 7b04 	ldr.w	r7, [sp], #4
2000f660:	4770      	bx	lr
2000f662:	bf00      	nop
2000f664:	200117fc 	.word	0x200117fc

2000f668 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
2000f668:	b580      	push	{r7, lr}
2000f66a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
2000f66c:	f7ff fff0 	bl	2000f650 <HAL_RCC_GetHCLKFreq>
2000f670:	4601      	mov	r1, r0
2000f672:	4b05      	ldr	r3, [pc, #20]	; (2000f688 <HAL_RCC_GetPCLK1Freq+0x20>)
2000f674:	689b      	ldr	r3, [r3, #8]
2000f676:	0a9b      	lsrs	r3, r3, #10
2000f678:	f003 0307 	and.w	r3, r3, #7
2000f67c:	4a03      	ldr	r2, [pc, #12]	; (2000f68c <HAL_RCC_GetPCLK1Freq+0x24>)
2000f67e:	5cd3      	ldrb	r3, [r2, r3]
2000f680:	fa21 f303 	lsr.w	r3, r1, r3
}
2000f684:	4618      	mov	r0, r3
2000f686:	bd80      	pop	{r7, pc}
2000f688:	40023800 	.word	0x40023800
2000f68c:	200117a8 	.word	0x200117a8

2000f690 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
2000f690:	b580      	push	{r7, lr}
2000f692:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
2000f694:	f7ff ffdc 	bl	2000f650 <HAL_RCC_GetHCLKFreq>
2000f698:	4601      	mov	r1, r0
2000f69a:	4b05      	ldr	r3, [pc, #20]	; (2000f6b0 <HAL_RCC_GetPCLK2Freq+0x20>)
2000f69c:	689b      	ldr	r3, [r3, #8]
2000f69e:	0b5b      	lsrs	r3, r3, #13
2000f6a0:	f003 0307 	and.w	r3, r3, #7
2000f6a4:	4a03      	ldr	r2, [pc, #12]	; (2000f6b4 <HAL_RCC_GetPCLK2Freq+0x24>)
2000f6a6:	5cd3      	ldrb	r3, [r2, r3]
2000f6a8:	fa21 f303 	lsr.w	r3, r1, r3
}
2000f6ac:	4618      	mov	r0, r3
2000f6ae:	bd80      	pop	{r7, pc}
2000f6b0:	40023800 	.word	0x40023800
2000f6b4:	200117a8 	.word	0x200117a8

2000f6b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
2000f6b8:	b580      	push	{r7, lr}
2000f6ba:	b082      	sub	sp, #8
2000f6bc:	af00      	add	r7, sp, #0
2000f6be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
2000f6c0:	687b      	ldr	r3, [r7, #4]
2000f6c2:	2b00      	cmp	r3, #0
2000f6c4:	d101      	bne.n	2000f6ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
2000f6c6:	2301      	movs	r3, #1
2000f6c8:	e01d      	b.n	2000f706 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
2000f6ca:	687b      	ldr	r3, [r7, #4]
2000f6cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
2000f6d0:	b2db      	uxtb	r3, r3
2000f6d2:	2b00      	cmp	r3, #0
2000f6d4:	d106      	bne.n	2000f6e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
2000f6d6:	687b      	ldr	r3, [r7, #4]
2000f6d8:	2200      	movs	r2, #0
2000f6da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
2000f6de:	6878      	ldr	r0, [r7, #4]
2000f6e0:	f7fe fa1c 	bl	2000db1c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
2000f6e4:	687b      	ldr	r3, [r7, #4]
2000f6e6:	2202      	movs	r2, #2
2000f6e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
2000f6ec:	687b      	ldr	r3, [r7, #4]
2000f6ee:	681a      	ldr	r2, [r3, #0]
2000f6f0:	687b      	ldr	r3, [r7, #4]
2000f6f2:	3304      	adds	r3, #4
2000f6f4:	4619      	mov	r1, r3
2000f6f6:	4610      	mov	r0, r2
2000f6f8:	f000 f968 	bl	2000f9cc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
2000f6fc:	687b      	ldr	r3, [r7, #4]
2000f6fe:	2201      	movs	r2, #1
2000f700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
2000f704:	2300      	movs	r3, #0
}
2000f706:	4618      	mov	r0, r3
2000f708:	3708      	adds	r7, #8
2000f70a:	46bd      	mov	sp, r7
2000f70c:	bd80      	pop	{r7, pc}

2000f70e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
2000f70e:	b480      	push	{r7}
2000f710:	b085      	sub	sp, #20
2000f712:	af00      	add	r7, sp, #0
2000f714:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
2000f716:	687b      	ldr	r3, [r7, #4]
2000f718:	681b      	ldr	r3, [r3, #0]
2000f71a:	68da      	ldr	r2, [r3, #12]
2000f71c:	687b      	ldr	r3, [r7, #4]
2000f71e:	681b      	ldr	r3, [r3, #0]
2000f720:	f042 0201 	orr.w	r2, r2, #1
2000f724:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
2000f726:	687b      	ldr	r3, [r7, #4]
2000f728:	681b      	ldr	r3, [r3, #0]
2000f72a:	689b      	ldr	r3, [r3, #8]
2000f72c:	f003 0307 	and.w	r3, r3, #7
2000f730:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
2000f732:	68fb      	ldr	r3, [r7, #12]
2000f734:	2b06      	cmp	r3, #6
2000f736:	d007      	beq.n	2000f748 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
2000f738:	687b      	ldr	r3, [r7, #4]
2000f73a:	681b      	ldr	r3, [r3, #0]
2000f73c:	681a      	ldr	r2, [r3, #0]
2000f73e:	687b      	ldr	r3, [r7, #4]
2000f740:	681b      	ldr	r3, [r3, #0]
2000f742:	f042 0201 	orr.w	r2, r2, #1
2000f746:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
2000f748:	2300      	movs	r3, #0
}
2000f74a:	4618      	mov	r0, r3
2000f74c:	3714      	adds	r7, #20
2000f74e:	46bd      	mov	sp, r7
2000f750:	f85d 7b04 	ldr.w	r7, [sp], #4
2000f754:	4770      	bx	lr

2000f756 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
2000f756:	b580      	push	{r7, lr}
2000f758:	b082      	sub	sp, #8
2000f75a:	af00      	add	r7, sp, #0
2000f75c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
2000f75e:	687b      	ldr	r3, [r7, #4]
2000f760:	681b      	ldr	r3, [r3, #0]
2000f762:	691b      	ldr	r3, [r3, #16]
2000f764:	f003 0302 	and.w	r3, r3, #2
2000f768:	2b02      	cmp	r3, #2
2000f76a:	d122      	bne.n	2000f7b2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
2000f76c:	687b      	ldr	r3, [r7, #4]
2000f76e:	681b      	ldr	r3, [r3, #0]
2000f770:	68db      	ldr	r3, [r3, #12]
2000f772:	f003 0302 	and.w	r3, r3, #2
2000f776:	2b02      	cmp	r3, #2
2000f778:	d11b      	bne.n	2000f7b2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
2000f77a:	687b      	ldr	r3, [r7, #4]
2000f77c:	681b      	ldr	r3, [r3, #0]
2000f77e:	f06f 0202 	mvn.w	r2, #2
2000f782:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
2000f784:	687b      	ldr	r3, [r7, #4]
2000f786:	2201      	movs	r2, #1
2000f788:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
2000f78a:	687b      	ldr	r3, [r7, #4]
2000f78c:	681b      	ldr	r3, [r3, #0]
2000f78e:	699b      	ldr	r3, [r3, #24]
2000f790:	f003 0303 	and.w	r3, r3, #3
2000f794:	2b00      	cmp	r3, #0
2000f796:	d003      	beq.n	2000f7a0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
2000f798:	6878      	ldr	r0, [r7, #4]
2000f79a:	f000 f8f8 	bl	2000f98e <HAL_TIM_IC_CaptureCallback>
2000f79e:	e005      	b.n	2000f7ac <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
2000f7a0:	6878      	ldr	r0, [r7, #4]
2000f7a2:	f000 f8ea 	bl	2000f97a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
2000f7a6:	6878      	ldr	r0, [r7, #4]
2000f7a8:	f000 f8fb 	bl	2000f9a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
2000f7ac:	687b      	ldr	r3, [r7, #4]
2000f7ae:	2200      	movs	r2, #0
2000f7b0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
2000f7b2:	687b      	ldr	r3, [r7, #4]
2000f7b4:	681b      	ldr	r3, [r3, #0]
2000f7b6:	691b      	ldr	r3, [r3, #16]
2000f7b8:	f003 0304 	and.w	r3, r3, #4
2000f7bc:	2b04      	cmp	r3, #4
2000f7be:	d122      	bne.n	2000f806 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
2000f7c0:	687b      	ldr	r3, [r7, #4]
2000f7c2:	681b      	ldr	r3, [r3, #0]
2000f7c4:	68db      	ldr	r3, [r3, #12]
2000f7c6:	f003 0304 	and.w	r3, r3, #4
2000f7ca:	2b04      	cmp	r3, #4
2000f7cc:	d11b      	bne.n	2000f806 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
2000f7ce:	687b      	ldr	r3, [r7, #4]
2000f7d0:	681b      	ldr	r3, [r3, #0]
2000f7d2:	f06f 0204 	mvn.w	r2, #4
2000f7d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
2000f7d8:	687b      	ldr	r3, [r7, #4]
2000f7da:	2202      	movs	r2, #2
2000f7dc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
2000f7de:	687b      	ldr	r3, [r7, #4]
2000f7e0:	681b      	ldr	r3, [r3, #0]
2000f7e2:	699b      	ldr	r3, [r3, #24]
2000f7e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
2000f7e8:	2b00      	cmp	r3, #0
2000f7ea:	d003      	beq.n	2000f7f4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
2000f7ec:	6878      	ldr	r0, [r7, #4]
2000f7ee:	f000 f8ce 	bl	2000f98e <HAL_TIM_IC_CaptureCallback>
2000f7f2:	e005      	b.n	2000f800 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
2000f7f4:	6878      	ldr	r0, [r7, #4]
2000f7f6:	f000 f8c0 	bl	2000f97a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
2000f7fa:	6878      	ldr	r0, [r7, #4]
2000f7fc:	f000 f8d1 	bl	2000f9a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
2000f800:	687b      	ldr	r3, [r7, #4]
2000f802:	2200      	movs	r2, #0
2000f804:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
2000f806:	687b      	ldr	r3, [r7, #4]
2000f808:	681b      	ldr	r3, [r3, #0]
2000f80a:	691b      	ldr	r3, [r3, #16]
2000f80c:	f003 0308 	and.w	r3, r3, #8
2000f810:	2b08      	cmp	r3, #8
2000f812:	d122      	bne.n	2000f85a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
2000f814:	687b      	ldr	r3, [r7, #4]
2000f816:	681b      	ldr	r3, [r3, #0]
2000f818:	68db      	ldr	r3, [r3, #12]
2000f81a:	f003 0308 	and.w	r3, r3, #8
2000f81e:	2b08      	cmp	r3, #8
2000f820:	d11b      	bne.n	2000f85a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
2000f822:	687b      	ldr	r3, [r7, #4]
2000f824:	681b      	ldr	r3, [r3, #0]
2000f826:	f06f 0208 	mvn.w	r2, #8
2000f82a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
2000f82c:	687b      	ldr	r3, [r7, #4]
2000f82e:	2204      	movs	r2, #4
2000f830:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
2000f832:	687b      	ldr	r3, [r7, #4]
2000f834:	681b      	ldr	r3, [r3, #0]
2000f836:	69db      	ldr	r3, [r3, #28]
2000f838:	f003 0303 	and.w	r3, r3, #3
2000f83c:	2b00      	cmp	r3, #0
2000f83e:	d003      	beq.n	2000f848 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
2000f840:	6878      	ldr	r0, [r7, #4]
2000f842:	f000 f8a4 	bl	2000f98e <HAL_TIM_IC_CaptureCallback>
2000f846:	e005      	b.n	2000f854 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
2000f848:	6878      	ldr	r0, [r7, #4]
2000f84a:	f000 f896 	bl	2000f97a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
2000f84e:	6878      	ldr	r0, [r7, #4]
2000f850:	f000 f8a7 	bl	2000f9a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
2000f854:	687b      	ldr	r3, [r7, #4]
2000f856:	2200      	movs	r2, #0
2000f858:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
2000f85a:	687b      	ldr	r3, [r7, #4]
2000f85c:	681b      	ldr	r3, [r3, #0]
2000f85e:	691b      	ldr	r3, [r3, #16]
2000f860:	f003 0310 	and.w	r3, r3, #16
2000f864:	2b10      	cmp	r3, #16
2000f866:	d122      	bne.n	2000f8ae <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
2000f868:	687b      	ldr	r3, [r7, #4]
2000f86a:	681b      	ldr	r3, [r3, #0]
2000f86c:	68db      	ldr	r3, [r3, #12]
2000f86e:	f003 0310 	and.w	r3, r3, #16
2000f872:	2b10      	cmp	r3, #16
2000f874:	d11b      	bne.n	2000f8ae <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
2000f876:	687b      	ldr	r3, [r7, #4]
2000f878:	681b      	ldr	r3, [r3, #0]
2000f87a:	f06f 0210 	mvn.w	r2, #16
2000f87e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
2000f880:	687b      	ldr	r3, [r7, #4]
2000f882:	2208      	movs	r2, #8
2000f884:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
2000f886:	687b      	ldr	r3, [r7, #4]
2000f888:	681b      	ldr	r3, [r3, #0]
2000f88a:	69db      	ldr	r3, [r3, #28]
2000f88c:	f403 7340 	and.w	r3, r3, #768	; 0x300
2000f890:	2b00      	cmp	r3, #0
2000f892:	d003      	beq.n	2000f89c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
2000f894:	6878      	ldr	r0, [r7, #4]
2000f896:	f000 f87a 	bl	2000f98e <HAL_TIM_IC_CaptureCallback>
2000f89a:	e005      	b.n	2000f8a8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
2000f89c:	6878      	ldr	r0, [r7, #4]
2000f89e:	f000 f86c 	bl	2000f97a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
2000f8a2:	6878      	ldr	r0, [r7, #4]
2000f8a4:	f000 f87d 	bl	2000f9a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
2000f8a8:	687b      	ldr	r3, [r7, #4]
2000f8aa:	2200      	movs	r2, #0
2000f8ac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
2000f8ae:	687b      	ldr	r3, [r7, #4]
2000f8b0:	681b      	ldr	r3, [r3, #0]
2000f8b2:	691b      	ldr	r3, [r3, #16]
2000f8b4:	f003 0301 	and.w	r3, r3, #1
2000f8b8:	2b01      	cmp	r3, #1
2000f8ba:	d10e      	bne.n	2000f8da <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
2000f8bc:	687b      	ldr	r3, [r7, #4]
2000f8be:	681b      	ldr	r3, [r3, #0]
2000f8c0:	68db      	ldr	r3, [r3, #12]
2000f8c2:	f003 0301 	and.w	r3, r3, #1
2000f8c6:	2b01      	cmp	r3, #1
2000f8c8:	d107      	bne.n	2000f8da <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
2000f8ca:	687b      	ldr	r3, [r7, #4]
2000f8cc:	681b      	ldr	r3, [r3, #0]
2000f8ce:	f06f 0201 	mvn.w	r2, #1
2000f8d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
2000f8d4:	6878      	ldr	r0, [r7, #4]
2000f8d6:	f000 f846 	bl	2000f966 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
2000f8da:	687b      	ldr	r3, [r7, #4]
2000f8dc:	681b      	ldr	r3, [r3, #0]
2000f8de:	691b      	ldr	r3, [r3, #16]
2000f8e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
2000f8e4:	2b80      	cmp	r3, #128	; 0x80
2000f8e6:	d10e      	bne.n	2000f906 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
2000f8e8:	687b      	ldr	r3, [r7, #4]
2000f8ea:	681b      	ldr	r3, [r3, #0]
2000f8ec:	68db      	ldr	r3, [r3, #12]
2000f8ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
2000f8f2:	2b80      	cmp	r3, #128	; 0x80
2000f8f4:	d107      	bne.n	2000f906 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
2000f8f6:	687b      	ldr	r3, [r7, #4]
2000f8f8:	681b      	ldr	r3, [r3, #0]
2000f8fa:	f06f 0280 	mvn.w	r2, #128	; 0x80
2000f8fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
2000f900:	6878      	ldr	r0, [r7, #4]
2000f902:	f000 f90d 	bl	2000fb20 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
2000f906:	687b      	ldr	r3, [r7, #4]
2000f908:	681b      	ldr	r3, [r3, #0]
2000f90a:	691b      	ldr	r3, [r3, #16]
2000f90c:	f003 0340 	and.w	r3, r3, #64	; 0x40
2000f910:	2b40      	cmp	r3, #64	; 0x40
2000f912:	d10e      	bne.n	2000f932 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
2000f914:	687b      	ldr	r3, [r7, #4]
2000f916:	681b      	ldr	r3, [r3, #0]
2000f918:	68db      	ldr	r3, [r3, #12]
2000f91a:	f003 0340 	and.w	r3, r3, #64	; 0x40
2000f91e:	2b40      	cmp	r3, #64	; 0x40
2000f920:	d107      	bne.n	2000f932 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
2000f922:	687b      	ldr	r3, [r7, #4]
2000f924:	681b      	ldr	r3, [r3, #0]
2000f926:	f06f 0240 	mvn.w	r2, #64	; 0x40
2000f92a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
2000f92c:	6878      	ldr	r0, [r7, #4]
2000f92e:	f000 f842 	bl	2000f9b6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
2000f932:	687b      	ldr	r3, [r7, #4]
2000f934:	681b      	ldr	r3, [r3, #0]
2000f936:	691b      	ldr	r3, [r3, #16]
2000f938:	f003 0320 	and.w	r3, r3, #32
2000f93c:	2b20      	cmp	r3, #32
2000f93e:	d10e      	bne.n	2000f95e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
2000f940:	687b      	ldr	r3, [r7, #4]
2000f942:	681b      	ldr	r3, [r3, #0]
2000f944:	68db      	ldr	r3, [r3, #12]
2000f946:	f003 0320 	and.w	r3, r3, #32
2000f94a:	2b20      	cmp	r3, #32
2000f94c:	d107      	bne.n	2000f95e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
2000f94e:	687b      	ldr	r3, [r7, #4]
2000f950:	681b      	ldr	r3, [r3, #0]
2000f952:	f06f 0220 	mvn.w	r2, #32
2000f956:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
2000f958:	6878      	ldr	r0, [r7, #4]
2000f95a:	f000 f8d7 	bl	2000fb0c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
2000f95e:	bf00      	nop
2000f960:	3708      	adds	r7, #8
2000f962:	46bd      	mov	sp, r7
2000f964:	bd80      	pop	{r7, pc}

2000f966 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
2000f966:	b480      	push	{r7}
2000f968:	b083      	sub	sp, #12
2000f96a:	af00      	add	r7, sp, #0
2000f96c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
2000f96e:	bf00      	nop
2000f970:	370c      	adds	r7, #12
2000f972:	46bd      	mov	sp, r7
2000f974:	f85d 7b04 	ldr.w	r7, [sp], #4
2000f978:	4770      	bx	lr

2000f97a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
2000f97a:	b480      	push	{r7}
2000f97c:	b083      	sub	sp, #12
2000f97e:	af00      	add	r7, sp, #0
2000f980:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
2000f982:	bf00      	nop
2000f984:	370c      	adds	r7, #12
2000f986:	46bd      	mov	sp, r7
2000f988:	f85d 7b04 	ldr.w	r7, [sp], #4
2000f98c:	4770      	bx	lr

2000f98e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
2000f98e:	b480      	push	{r7}
2000f990:	b083      	sub	sp, #12
2000f992:	af00      	add	r7, sp, #0
2000f994:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
2000f996:	bf00      	nop
2000f998:	370c      	adds	r7, #12
2000f99a:	46bd      	mov	sp, r7
2000f99c:	f85d 7b04 	ldr.w	r7, [sp], #4
2000f9a0:	4770      	bx	lr

2000f9a2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
2000f9a2:	b480      	push	{r7}
2000f9a4:	b083      	sub	sp, #12
2000f9a6:	af00      	add	r7, sp, #0
2000f9a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
2000f9aa:	bf00      	nop
2000f9ac:	370c      	adds	r7, #12
2000f9ae:	46bd      	mov	sp, r7
2000f9b0:	f85d 7b04 	ldr.w	r7, [sp], #4
2000f9b4:	4770      	bx	lr

2000f9b6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
2000f9b6:	b480      	push	{r7}
2000f9b8:	b083      	sub	sp, #12
2000f9ba:	af00      	add	r7, sp, #0
2000f9bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
2000f9be:	bf00      	nop
2000f9c0:	370c      	adds	r7, #12
2000f9c2:	46bd      	mov	sp, r7
2000f9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
2000f9c8:	4770      	bx	lr
	...

2000f9cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
2000f9cc:	b480      	push	{r7}
2000f9ce:	b085      	sub	sp, #20
2000f9d0:	af00      	add	r7, sp, #0
2000f9d2:	6078      	str	r0, [r7, #4]
2000f9d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
2000f9d6:	687b      	ldr	r3, [r7, #4]
2000f9d8:	681b      	ldr	r3, [r3, #0]
2000f9da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
2000f9dc:	687b      	ldr	r3, [r7, #4]
2000f9de:	4a40      	ldr	r2, [pc, #256]	; (2000fae0 <TIM_Base_SetConfig+0x114>)
2000f9e0:	4293      	cmp	r3, r2
2000f9e2:	d013      	beq.n	2000fa0c <TIM_Base_SetConfig+0x40>
2000f9e4:	687b      	ldr	r3, [r7, #4]
2000f9e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
2000f9ea:	d00f      	beq.n	2000fa0c <TIM_Base_SetConfig+0x40>
2000f9ec:	687b      	ldr	r3, [r7, #4]
2000f9ee:	4a3d      	ldr	r2, [pc, #244]	; (2000fae4 <TIM_Base_SetConfig+0x118>)
2000f9f0:	4293      	cmp	r3, r2
2000f9f2:	d00b      	beq.n	2000fa0c <TIM_Base_SetConfig+0x40>
2000f9f4:	687b      	ldr	r3, [r7, #4]
2000f9f6:	4a3c      	ldr	r2, [pc, #240]	; (2000fae8 <TIM_Base_SetConfig+0x11c>)
2000f9f8:	4293      	cmp	r3, r2
2000f9fa:	d007      	beq.n	2000fa0c <TIM_Base_SetConfig+0x40>
2000f9fc:	687b      	ldr	r3, [r7, #4]
2000f9fe:	4a3b      	ldr	r2, [pc, #236]	; (2000faec <TIM_Base_SetConfig+0x120>)
2000fa00:	4293      	cmp	r3, r2
2000fa02:	d003      	beq.n	2000fa0c <TIM_Base_SetConfig+0x40>
2000fa04:	687b      	ldr	r3, [r7, #4]
2000fa06:	4a3a      	ldr	r2, [pc, #232]	; (2000faf0 <TIM_Base_SetConfig+0x124>)
2000fa08:	4293      	cmp	r3, r2
2000fa0a:	d108      	bne.n	2000fa1e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
2000fa0c:	68fb      	ldr	r3, [r7, #12]
2000fa0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
2000fa12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
2000fa14:	683b      	ldr	r3, [r7, #0]
2000fa16:	685b      	ldr	r3, [r3, #4]
2000fa18:	68fa      	ldr	r2, [r7, #12]
2000fa1a:	4313      	orrs	r3, r2
2000fa1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
2000fa1e:	687b      	ldr	r3, [r7, #4]
2000fa20:	4a2f      	ldr	r2, [pc, #188]	; (2000fae0 <TIM_Base_SetConfig+0x114>)
2000fa22:	4293      	cmp	r3, r2
2000fa24:	d02b      	beq.n	2000fa7e <TIM_Base_SetConfig+0xb2>
2000fa26:	687b      	ldr	r3, [r7, #4]
2000fa28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
2000fa2c:	d027      	beq.n	2000fa7e <TIM_Base_SetConfig+0xb2>
2000fa2e:	687b      	ldr	r3, [r7, #4]
2000fa30:	4a2c      	ldr	r2, [pc, #176]	; (2000fae4 <TIM_Base_SetConfig+0x118>)
2000fa32:	4293      	cmp	r3, r2
2000fa34:	d023      	beq.n	2000fa7e <TIM_Base_SetConfig+0xb2>
2000fa36:	687b      	ldr	r3, [r7, #4]
2000fa38:	4a2b      	ldr	r2, [pc, #172]	; (2000fae8 <TIM_Base_SetConfig+0x11c>)
2000fa3a:	4293      	cmp	r3, r2
2000fa3c:	d01f      	beq.n	2000fa7e <TIM_Base_SetConfig+0xb2>
2000fa3e:	687b      	ldr	r3, [r7, #4]
2000fa40:	4a2a      	ldr	r2, [pc, #168]	; (2000faec <TIM_Base_SetConfig+0x120>)
2000fa42:	4293      	cmp	r3, r2
2000fa44:	d01b      	beq.n	2000fa7e <TIM_Base_SetConfig+0xb2>
2000fa46:	687b      	ldr	r3, [r7, #4]
2000fa48:	4a29      	ldr	r2, [pc, #164]	; (2000faf0 <TIM_Base_SetConfig+0x124>)
2000fa4a:	4293      	cmp	r3, r2
2000fa4c:	d017      	beq.n	2000fa7e <TIM_Base_SetConfig+0xb2>
2000fa4e:	687b      	ldr	r3, [r7, #4]
2000fa50:	4a28      	ldr	r2, [pc, #160]	; (2000faf4 <TIM_Base_SetConfig+0x128>)
2000fa52:	4293      	cmp	r3, r2
2000fa54:	d013      	beq.n	2000fa7e <TIM_Base_SetConfig+0xb2>
2000fa56:	687b      	ldr	r3, [r7, #4]
2000fa58:	4a27      	ldr	r2, [pc, #156]	; (2000faf8 <TIM_Base_SetConfig+0x12c>)
2000fa5a:	4293      	cmp	r3, r2
2000fa5c:	d00f      	beq.n	2000fa7e <TIM_Base_SetConfig+0xb2>
2000fa5e:	687b      	ldr	r3, [r7, #4]
2000fa60:	4a26      	ldr	r2, [pc, #152]	; (2000fafc <TIM_Base_SetConfig+0x130>)
2000fa62:	4293      	cmp	r3, r2
2000fa64:	d00b      	beq.n	2000fa7e <TIM_Base_SetConfig+0xb2>
2000fa66:	687b      	ldr	r3, [r7, #4]
2000fa68:	4a25      	ldr	r2, [pc, #148]	; (2000fb00 <TIM_Base_SetConfig+0x134>)
2000fa6a:	4293      	cmp	r3, r2
2000fa6c:	d007      	beq.n	2000fa7e <TIM_Base_SetConfig+0xb2>
2000fa6e:	687b      	ldr	r3, [r7, #4]
2000fa70:	4a24      	ldr	r2, [pc, #144]	; (2000fb04 <TIM_Base_SetConfig+0x138>)
2000fa72:	4293      	cmp	r3, r2
2000fa74:	d003      	beq.n	2000fa7e <TIM_Base_SetConfig+0xb2>
2000fa76:	687b      	ldr	r3, [r7, #4]
2000fa78:	4a23      	ldr	r2, [pc, #140]	; (2000fb08 <TIM_Base_SetConfig+0x13c>)
2000fa7a:	4293      	cmp	r3, r2
2000fa7c:	d108      	bne.n	2000fa90 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
2000fa7e:	68fb      	ldr	r3, [r7, #12]
2000fa80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
2000fa84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
2000fa86:	683b      	ldr	r3, [r7, #0]
2000fa88:	68db      	ldr	r3, [r3, #12]
2000fa8a:	68fa      	ldr	r2, [r7, #12]
2000fa8c:	4313      	orrs	r3, r2
2000fa8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
2000fa90:	68fb      	ldr	r3, [r7, #12]
2000fa92:	f023 0280 	bic.w	r2, r3, #128	; 0x80
2000fa96:	683b      	ldr	r3, [r7, #0]
2000fa98:	695b      	ldr	r3, [r3, #20]
2000fa9a:	4313      	orrs	r3, r2
2000fa9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
2000fa9e:	687b      	ldr	r3, [r7, #4]
2000faa0:	68fa      	ldr	r2, [r7, #12]
2000faa2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
2000faa4:	683b      	ldr	r3, [r7, #0]
2000faa6:	689a      	ldr	r2, [r3, #8]
2000faa8:	687b      	ldr	r3, [r7, #4]
2000faaa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
2000faac:	683b      	ldr	r3, [r7, #0]
2000faae:	681a      	ldr	r2, [r3, #0]
2000fab0:	687b      	ldr	r3, [r7, #4]
2000fab2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
2000fab4:	687b      	ldr	r3, [r7, #4]
2000fab6:	4a0a      	ldr	r2, [pc, #40]	; (2000fae0 <TIM_Base_SetConfig+0x114>)
2000fab8:	4293      	cmp	r3, r2
2000faba:	d003      	beq.n	2000fac4 <TIM_Base_SetConfig+0xf8>
2000fabc:	687b      	ldr	r3, [r7, #4]
2000fabe:	4a0c      	ldr	r2, [pc, #48]	; (2000faf0 <TIM_Base_SetConfig+0x124>)
2000fac0:	4293      	cmp	r3, r2
2000fac2:	d103      	bne.n	2000facc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
2000fac4:	683b      	ldr	r3, [r7, #0]
2000fac6:	691a      	ldr	r2, [r3, #16]
2000fac8:	687b      	ldr	r3, [r7, #4]
2000faca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
2000facc:	687b      	ldr	r3, [r7, #4]
2000face:	2201      	movs	r2, #1
2000fad0:	615a      	str	r2, [r3, #20]
}
2000fad2:	bf00      	nop
2000fad4:	3714      	adds	r7, #20
2000fad6:	46bd      	mov	sp, r7
2000fad8:	f85d 7b04 	ldr.w	r7, [sp], #4
2000fadc:	4770      	bx	lr
2000fade:	bf00      	nop
2000fae0:	40010000 	.word	0x40010000
2000fae4:	40000400 	.word	0x40000400
2000fae8:	40000800 	.word	0x40000800
2000faec:	40000c00 	.word	0x40000c00
2000faf0:	40010400 	.word	0x40010400
2000faf4:	40014000 	.word	0x40014000
2000faf8:	40014400 	.word	0x40014400
2000fafc:	40014800 	.word	0x40014800
2000fb00:	40001800 	.word	0x40001800
2000fb04:	40001c00 	.word	0x40001c00
2000fb08:	40002000 	.word	0x40002000

2000fb0c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
2000fb0c:	b480      	push	{r7}
2000fb0e:	b083      	sub	sp, #12
2000fb10:	af00      	add	r7, sp, #0
2000fb12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
2000fb14:	bf00      	nop
2000fb16:	370c      	adds	r7, #12
2000fb18:	46bd      	mov	sp, r7
2000fb1a:	f85d 7b04 	ldr.w	r7, [sp], #4
2000fb1e:	4770      	bx	lr

2000fb20 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
2000fb20:	b480      	push	{r7}
2000fb22:	b083      	sub	sp, #12
2000fb24:	af00      	add	r7, sp, #0
2000fb26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
2000fb28:	bf00      	nop
2000fb2a:	370c      	adds	r7, #12
2000fb2c:	46bd      	mov	sp, r7
2000fb2e:	f85d 7b04 	ldr.w	r7, [sp], #4
2000fb32:	4770      	bx	lr

2000fb34 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
2000fb34:	b580      	push	{r7, lr}
2000fb36:	b082      	sub	sp, #8
2000fb38:	af00      	add	r7, sp, #0
2000fb3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
2000fb3c:	687b      	ldr	r3, [r7, #4]
2000fb3e:	2b00      	cmp	r3, #0
2000fb40:	d101      	bne.n	2000fb46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
2000fb42:	2301      	movs	r3, #1
2000fb44:	e03f      	b.n	2000fbc6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
2000fb46:	687b      	ldr	r3, [r7, #4]
2000fb48:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
2000fb4c:	b2db      	uxtb	r3, r3
2000fb4e:	2b00      	cmp	r3, #0
2000fb50:	d106      	bne.n	2000fb60 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
2000fb52:	687b      	ldr	r3, [r7, #4]
2000fb54:	2200      	movs	r2, #0
2000fb56:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
2000fb5a:	6878      	ldr	r0, [r7, #4]
2000fb5c:	f7fe f95c 	bl	2000de18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
2000fb60:	687b      	ldr	r3, [r7, #4]
2000fb62:	2224      	movs	r2, #36	; 0x24
2000fb64:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
2000fb68:	687b      	ldr	r3, [r7, #4]
2000fb6a:	681b      	ldr	r3, [r3, #0]
2000fb6c:	68da      	ldr	r2, [r3, #12]
2000fb6e:	687b      	ldr	r3, [r7, #4]
2000fb70:	681b      	ldr	r3, [r3, #0]
2000fb72:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
2000fb76:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
2000fb78:	6878      	ldr	r0, [r7, #4]
2000fb7a:	f000 fc37 	bl	200103ec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
2000fb7e:	687b      	ldr	r3, [r7, #4]
2000fb80:	681b      	ldr	r3, [r3, #0]
2000fb82:	691a      	ldr	r2, [r3, #16]
2000fb84:	687b      	ldr	r3, [r7, #4]
2000fb86:	681b      	ldr	r3, [r3, #0]
2000fb88:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
2000fb8c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
2000fb8e:	687b      	ldr	r3, [r7, #4]
2000fb90:	681b      	ldr	r3, [r3, #0]
2000fb92:	695a      	ldr	r2, [r3, #20]
2000fb94:	687b      	ldr	r3, [r7, #4]
2000fb96:	681b      	ldr	r3, [r3, #0]
2000fb98:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
2000fb9c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
2000fb9e:	687b      	ldr	r3, [r7, #4]
2000fba0:	681b      	ldr	r3, [r3, #0]
2000fba2:	68da      	ldr	r2, [r3, #12]
2000fba4:	687b      	ldr	r3, [r7, #4]
2000fba6:	681b      	ldr	r3, [r3, #0]
2000fba8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
2000fbac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
2000fbae:	687b      	ldr	r3, [r7, #4]
2000fbb0:	2200      	movs	r2, #0
2000fbb2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
2000fbb4:	687b      	ldr	r3, [r7, #4]
2000fbb6:	2220      	movs	r2, #32
2000fbb8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
2000fbbc:	687b      	ldr	r3, [r7, #4]
2000fbbe:	2220      	movs	r2, #32
2000fbc0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
2000fbc4:	2300      	movs	r3, #0
}
2000fbc6:	4618      	mov	r0, r3
2000fbc8:	3708      	adds	r7, #8
2000fbca:	46bd      	mov	sp, r7
2000fbcc:	bd80      	pop	{r7, pc}
	...

2000fbd0 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
2000fbd0:	b580      	push	{r7, lr}
2000fbd2:	b086      	sub	sp, #24
2000fbd4:	af00      	add	r7, sp, #0
2000fbd6:	60f8      	str	r0, [r7, #12]
2000fbd8:	60b9      	str	r1, [r7, #8]
2000fbda:	4613      	mov	r3, r2
2000fbdc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
2000fbde:	68fb      	ldr	r3, [r7, #12]
2000fbe0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
2000fbe4:	b2db      	uxtb	r3, r3
2000fbe6:	2b20      	cmp	r3, #32
2000fbe8:	d153      	bne.n	2000fc92 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
2000fbea:	68bb      	ldr	r3, [r7, #8]
2000fbec:	2b00      	cmp	r3, #0
2000fbee:	d002      	beq.n	2000fbf6 <HAL_UART_Transmit_DMA+0x26>
2000fbf0:	88fb      	ldrh	r3, [r7, #6]
2000fbf2:	2b00      	cmp	r3, #0
2000fbf4:	d101      	bne.n	2000fbfa <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
2000fbf6:	2301      	movs	r3, #1
2000fbf8:	e04c      	b.n	2000fc94 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
2000fbfa:	68fb      	ldr	r3, [r7, #12]
2000fbfc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
2000fc00:	2b01      	cmp	r3, #1
2000fc02:	d101      	bne.n	2000fc08 <HAL_UART_Transmit_DMA+0x38>
2000fc04:	2302      	movs	r3, #2
2000fc06:	e045      	b.n	2000fc94 <HAL_UART_Transmit_DMA+0xc4>
2000fc08:	68fb      	ldr	r3, [r7, #12]
2000fc0a:	2201      	movs	r2, #1
2000fc0c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
2000fc10:	68ba      	ldr	r2, [r7, #8]
2000fc12:	68fb      	ldr	r3, [r7, #12]
2000fc14:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
2000fc16:	68fb      	ldr	r3, [r7, #12]
2000fc18:	88fa      	ldrh	r2, [r7, #6]
2000fc1a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
2000fc1c:	68fb      	ldr	r3, [r7, #12]
2000fc1e:	88fa      	ldrh	r2, [r7, #6]
2000fc20:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
2000fc22:	68fb      	ldr	r3, [r7, #12]
2000fc24:	2200      	movs	r2, #0
2000fc26:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
2000fc28:	68fb      	ldr	r3, [r7, #12]
2000fc2a:	2221      	movs	r2, #33	; 0x21
2000fc2c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
2000fc30:	68fb      	ldr	r3, [r7, #12]
2000fc32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2000fc34:	4a19      	ldr	r2, [pc, #100]	; (2000fc9c <HAL_UART_Transmit_DMA+0xcc>)
2000fc36:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
2000fc38:	68fb      	ldr	r3, [r7, #12]
2000fc3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2000fc3c:	4a18      	ldr	r2, [pc, #96]	; (2000fca0 <HAL_UART_Transmit_DMA+0xd0>)
2000fc3e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
2000fc40:	68fb      	ldr	r3, [r7, #12]
2000fc42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2000fc44:	4a17      	ldr	r2, [pc, #92]	; (2000fca4 <HAL_UART_Transmit_DMA+0xd4>)
2000fc46:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
2000fc48:	68fb      	ldr	r3, [r7, #12]
2000fc4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2000fc4c:	2200      	movs	r2, #0
2000fc4e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
2000fc50:	f107 0308 	add.w	r3, r7, #8
2000fc54:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
2000fc56:	68fb      	ldr	r3, [r7, #12]
2000fc58:	6b18      	ldr	r0, [r3, #48]	; 0x30
2000fc5a:	697b      	ldr	r3, [r7, #20]
2000fc5c:	6819      	ldr	r1, [r3, #0]
2000fc5e:	68fb      	ldr	r3, [r7, #12]
2000fc60:	681b      	ldr	r3, [r3, #0]
2000fc62:	3304      	adds	r3, #4
2000fc64:	461a      	mov	r2, r3
2000fc66:	88fb      	ldrh	r3, [r7, #6]
2000fc68:	f7fe fc1c 	bl	2000e4a4 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
2000fc6c:	68fb      	ldr	r3, [r7, #12]
2000fc6e:	681b      	ldr	r3, [r3, #0]
2000fc70:	f06f 0240 	mvn.w	r2, #64	; 0x40
2000fc74:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
2000fc76:	68fb      	ldr	r3, [r7, #12]
2000fc78:	2200      	movs	r2, #0
2000fc7a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
2000fc7e:	68fb      	ldr	r3, [r7, #12]
2000fc80:	681b      	ldr	r3, [r3, #0]
2000fc82:	695a      	ldr	r2, [r3, #20]
2000fc84:	68fb      	ldr	r3, [r7, #12]
2000fc86:	681b      	ldr	r3, [r3, #0]
2000fc88:	f042 0280 	orr.w	r2, r2, #128	; 0x80
2000fc8c:	615a      	str	r2, [r3, #20]

    return HAL_OK;
2000fc8e:	2300      	movs	r3, #0
2000fc90:	e000      	b.n	2000fc94 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
2000fc92:	2302      	movs	r3, #2
  }
}
2000fc94:	4618      	mov	r0, r3
2000fc96:	3718      	adds	r7, #24
2000fc98:	46bd      	mov	sp, r7
2000fc9a:	bd80      	pop	{r7, pc}
2000fc9c:	2000fff9 	.word	0x2000fff9
2000fca0:	2001004b 	.word	0x2001004b
2000fca4:	200100eb 	.word	0x200100eb

2000fca8 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
2000fca8:	b580      	push	{r7, lr}
2000fcaa:	b086      	sub	sp, #24
2000fcac:	af00      	add	r7, sp, #0
2000fcae:	60f8      	str	r0, [r7, #12]
2000fcb0:	60b9      	str	r1, [r7, #8]
2000fcb2:	4613      	mov	r3, r2
2000fcb4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
2000fcb6:	68fb      	ldr	r3, [r7, #12]
2000fcb8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
2000fcbc:	b2db      	uxtb	r3, r3
2000fcbe:	2b20      	cmp	r3, #32
2000fcc0:	d166      	bne.n	2000fd90 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
2000fcc2:	68bb      	ldr	r3, [r7, #8]
2000fcc4:	2b00      	cmp	r3, #0
2000fcc6:	d002      	beq.n	2000fcce <HAL_UART_Receive_DMA+0x26>
2000fcc8:	88fb      	ldrh	r3, [r7, #6]
2000fcca:	2b00      	cmp	r3, #0
2000fccc:	d101      	bne.n	2000fcd2 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
2000fcce:	2301      	movs	r3, #1
2000fcd0:	e05f      	b.n	2000fd92 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
2000fcd2:	68fb      	ldr	r3, [r7, #12]
2000fcd4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
2000fcd8:	2b01      	cmp	r3, #1
2000fcda:	d101      	bne.n	2000fce0 <HAL_UART_Receive_DMA+0x38>
2000fcdc:	2302      	movs	r3, #2
2000fcde:	e058      	b.n	2000fd92 <HAL_UART_Receive_DMA+0xea>
2000fce0:	68fb      	ldr	r3, [r7, #12]
2000fce2:	2201      	movs	r2, #1
2000fce4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
2000fce8:	68ba      	ldr	r2, [r7, #8]
2000fcea:	68fb      	ldr	r3, [r7, #12]
2000fcec:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
2000fcee:	68fb      	ldr	r3, [r7, #12]
2000fcf0:	88fa      	ldrh	r2, [r7, #6]
2000fcf2:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
2000fcf4:	68fb      	ldr	r3, [r7, #12]
2000fcf6:	2200      	movs	r2, #0
2000fcf8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
2000fcfa:	68fb      	ldr	r3, [r7, #12]
2000fcfc:	2222      	movs	r2, #34	; 0x22
2000fcfe:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
2000fd02:	68fb      	ldr	r3, [r7, #12]
2000fd04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
2000fd06:	4a25      	ldr	r2, [pc, #148]	; (2000fd9c <HAL_UART_Receive_DMA+0xf4>)
2000fd08:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
2000fd0a:	68fb      	ldr	r3, [r7, #12]
2000fd0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
2000fd0e:	4a24      	ldr	r2, [pc, #144]	; (2000fda0 <HAL_UART_Receive_DMA+0xf8>)
2000fd10:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
2000fd12:	68fb      	ldr	r3, [r7, #12]
2000fd14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
2000fd16:	4a23      	ldr	r2, [pc, #140]	; (2000fda4 <HAL_UART_Receive_DMA+0xfc>)
2000fd18:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
2000fd1a:	68fb      	ldr	r3, [r7, #12]
2000fd1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
2000fd1e:	2200      	movs	r2, #0
2000fd20:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
2000fd22:	f107 0308 	add.w	r3, r7, #8
2000fd26:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
2000fd28:	68fb      	ldr	r3, [r7, #12]
2000fd2a:	6b58      	ldr	r0, [r3, #52]	; 0x34
2000fd2c:	68fb      	ldr	r3, [r7, #12]
2000fd2e:	681b      	ldr	r3, [r3, #0]
2000fd30:	3304      	adds	r3, #4
2000fd32:	4619      	mov	r1, r3
2000fd34:	697b      	ldr	r3, [r7, #20]
2000fd36:	681a      	ldr	r2, [r3, #0]
2000fd38:	88fb      	ldrh	r3, [r7, #6]
2000fd3a:	f7fe fbb3 	bl	2000e4a4 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
2000fd3e:	2300      	movs	r3, #0
2000fd40:	613b      	str	r3, [r7, #16]
2000fd42:	68fb      	ldr	r3, [r7, #12]
2000fd44:	681b      	ldr	r3, [r3, #0]
2000fd46:	681b      	ldr	r3, [r3, #0]
2000fd48:	613b      	str	r3, [r7, #16]
2000fd4a:	68fb      	ldr	r3, [r7, #12]
2000fd4c:	681b      	ldr	r3, [r3, #0]
2000fd4e:	685b      	ldr	r3, [r3, #4]
2000fd50:	613b      	str	r3, [r7, #16]
2000fd52:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
2000fd54:	68fb      	ldr	r3, [r7, #12]
2000fd56:	2200      	movs	r2, #0
2000fd58:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
2000fd5c:	68fb      	ldr	r3, [r7, #12]
2000fd5e:	681b      	ldr	r3, [r3, #0]
2000fd60:	68da      	ldr	r2, [r3, #12]
2000fd62:	68fb      	ldr	r3, [r7, #12]
2000fd64:	681b      	ldr	r3, [r3, #0]
2000fd66:	f442 7280 	orr.w	r2, r2, #256	; 0x100
2000fd6a:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
2000fd6c:	68fb      	ldr	r3, [r7, #12]
2000fd6e:	681b      	ldr	r3, [r3, #0]
2000fd70:	695a      	ldr	r2, [r3, #20]
2000fd72:	68fb      	ldr	r3, [r7, #12]
2000fd74:	681b      	ldr	r3, [r3, #0]
2000fd76:	f042 0201 	orr.w	r2, r2, #1
2000fd7a:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
2000fd7c:	68fb      	ldr	r3, [r7, #12]
2000fd7e:	681b      	ldr	r3, [r3, #0]
2000fd80:	695a      	ldr	r2, [r3, #20]
2000fd82:	68fb      	ldr	r3, [r7, #12]
2000fd84:	681b      	ldr	r3, [r3, #0]
2000fd86:	f042 0240 	orr.w	r2, r2, #64	; 0x40
2000fd8a:	615a      	str	r2, [r3, #20]

    return HAL_OK;
2000fd8c:	2300      	movs	r3, #0
2000fd8e:	e000      	b.n	2000fd92 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
2000fd90:	2302      	movs	r3, #2
  }
}
2000fd92:	4618      	mov	r0, r3
2000fd94:	3718      	adds	r7, #24
2000fd96:	46bd      	mov	sp, r7
2000fd98:	bd80      	pop	{r7, pc}
2000fd9a:	bf00      	nop
2000fd9c:	20010067 	.word	0x20010067
2000fda0:	200100cf 	.word	0x200100cf
2000fda4:	200100eb 	.word	0x200100eb

2000fda8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
2000fda8:	b580      	push	{r7, lr}
2000fdaa:	b088      	sub	sp, #32
2000fdac:	af00      	add	r7, sp, #0
2000fdae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
2000fdb0:	687b      	ldr	r3, [r7, #4]
2000fdb2:	681b      	ldr	r3, [r3, #0]
2000fdb4:	681b      	ldr	r3, [r3, #0]
2000fdb6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
2000fdb8:	687b      	ldr	r3, [r7, #4]
2000fdba:	681b      	ldr	r3, [r3, #0]
2000fdbc:	68db      	ldr	r3, [r3, #12]
2000fdbe:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
2000fdc0:	687b      	ldr	r3, [r7, #4]
2000fdc2:	681b      	ldr	r3, [r3, #0]
2000fdc4:	695b      	ldr	r3, [r3, #20]
2000fdc6:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
2000fdc8:	2300      	movs	r3, #0
2000fdca:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
2000fdcc:	2300      	movs	r3, #0
2000fdce:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
2000fdd0:	69fb      	ldr	r3, [r7, #28]
2000fdd2:	f003 030f 	and.w	r3, r3, #15
2000fdd6:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
2000fdd8:	693b      	ldr	r3, [r7, #16]
2000fdda:	2b00      	cmp	r3, #0
2000fddc:	d10d      	bne.n	2000fdfa <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
2000fdde:	69fb      	ldr	r3, [r7, #28]
2000fde0:	f003 0320 	and.w	r3, r3, #32
2000fde4:	2b00      	cmp	r3, #0
2000fde6:	d008      	beq.n	2000fdfa <HAL_UART_IRQHandler+0x52>
2000fde8:	69bb      	ldr	r3, [r7, #24]
2000fdea:	f003 0320 	and.w	r3, r3, #32
2000fdee:	2b00      	cmp	r3, #0
2000fdf0:	d003      	beq.n	2000fdfa <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
2000fdf2:	6878      	ldr	r0, [r7, #4]
2000fdf4:	f000 fa79 	bl	200102ea <UART_Receive_IT>
      return;
2000fdf8:	e0d1      	b.n	2000ff9e <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
2000fdfa:	693b      	ldr	r3, [r7, #16]
2000fdfc:	2b00      	cmp	r3, #0
2000fdfe:	f000 80b0 	beq.w	2000ff62 <HAL_UART_IRQHandler+0x1ba>
2000fe02:	697b      	ldr	r3, [r7, #20]
2000fe04:	f003 0301 	and.w	r3, r3, #1
2000fe08:	2b00      	cmp	r3, #0
2000fe0a:	d105      	bne.n	2000fe18 <HAL_UART_IRQHandler+0x70>
2000fe0c:	69bb      	ldr	r3, [r7, #24]
2000fe0e:	f403 7390 	and.w	r3, r3, #288	; 0x120
2000fe12:	2b00      	cmp	r3, #0
2000fe14:	f000 80a5 	beq.w	2000ff62 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
2000fe18:	69fb      	ldr	r3, [r7, #28]
2000fe1a:	f003 0301 	and.w	r3, r3, #1
2000fe1e:	2b00      	cmp	r3, #0
2000fe20:	d00a      	beq.n	2000fe38 <HAL_UART_IRQHandler+0x90>
2000fe22:	69bb      	ldr	r3, [r7, #24]
2000fe24:	f403 7380 	and.w	r3, r3, #256	; 0x100
2000fe28:	2b00      	cmp	r3, #0
2000fe2a:	d005      	beq.n	2000fe38 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
2000fe2c:	687b      	ldr	r3, [r7, #4]
2000fe2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2000fe30:	f043 0201 	orr.w	r2, r3, #1
2000fe34:	687b      	ldr	r3, [r7, #4]
2000fe36:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
2000fe38:	69fb      	ldr	r3, [r7, #28]
2000fe3a:	f003 0304 	and.w	r3, r3, #4
2000fe3e:	2b00      	cmp	r3, #0
2000fe40:	d00a      	beq.n	2000fe58 <HAL_UART_IRQHandler+0xb0>
2000fe42:	697b      	ldr	r3, [r7, #20]
2000fe44:	f003 0301 	and.w	r3, r3, #1
2000fe48:	2b00      	cmp	r3, #0
2000fe4a:	d005      	beq.n	2000fe58 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
2000fe4c:	687b      	ldr	r3, [r7, #4]
2000fe4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2000fe50:	f043 0202 	orr.w	r2, r3, #2
2000fe54:	687b      	ldr	r3, [r7, #4]
2000fe56:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
2000fe58:	69fb      	ldr	r3, [r7, #28]
2000fe5a:	f003 0302 	and.w	r3, r3, #2
2000fe5e:	2b00      	cmp	r3, #0
2000fe60:	d00a      	beq.n	2000fe78 <HAL_UART_IRQHandler+0xd0>
2000fe62:	697b      	ldr	r3, [r7, #20]
2000fe64:	f003 0301 	and.w	r3, r3, #1
2000fe68:	2b00      	cmp	r3, #0
2000fe6a:	d005      	beq.n	2000fe78 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
2000fe6c:	687b      	ldr	r3, [r7, #4]
2000fe6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2000fe70:	f043 0204 	orr.w	r2, r3, #4
2000fe74:	687b      	ldr	r3, [r7, #4]
2000fe76:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
2000fe78:	69fb      	ldr	r3, [r7, #28]
2000fe7a:	f003 0308 	and.w	r3, r3, #8
2000fe7e:	2b00      	cmp	r3, #0
2000fe80:	d00f      	beq.n	2000fea2 <HAL_UART_IRQHandler+0xfa>
2000fe82:	69bb      	ldr	r3, [r7, #24]
2000fe84:	f003 0320 	and.w	r3, r3, #32
2000fe88:	2b00      	cmp	r3, #0
2000fe8a:	d104      	bne.n	2000fe96 <HAL_UART_IRQHandler+0xee>
2000fe8c:	697b      	ldr	r3, [r7, #20]
2000fe8e:	f003 0301 	and.w	r3, r3, #1
2000fe92:	2b00      	cmp	r3, #0
2000fe94:	d005      	beq.n	2000fea2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
2000fe96:	687b      	ldr	r3, [r7, #4]
2000fe98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2000fe9a:	f043 0208 	orr.w	r2, r3, #8
2000fe9e:	687b      	ldr	r3, [r7, #4]
2000fea0:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
2000fea2:	687b      	ldr	r3, [r7, #4]
2000fea4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2000fea6:	2b00      	cmp	r3, #0
2000fea8:	d078      	beq.n	2000ff9c <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
2000feaa:	69fb      	ldr	r3, [r7, #28]
2000feac:	f003 0320 	and.w	r3, r3, #32
2000feb0:	2b00      	cmp	r3, #0
2000feb2:	d007      	beq.n	2000fec4 <HAL_UART_IRQHandler+0x11c>
2000feb4:	69bb      	ldr	r3, [r7, #24]
2000feb6:	f003 0320 	and.w	r3, r3, #32
2000feba:	2b00      	cmp	r3, #0
2000febc:	d002      	beq.n	2000fec4 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
2000febe:	6878      	ldr	r0, [r7, #4]
2000fec0:	f000 fa13 	bl	200102ea <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
2000fec4:	687b      	ldr	r3, [r7, #4]
2000fec6:	681b      	ldr	r3, [r3, #0]
2000fec8:	695b      	ldr	r3, [r3, #20]
2000feca:	f003 0340 	and.w	r3, r3, #64	; 0x40
2000fece:	2b40      	cmp	r3, #64	; 0x40
2000fed0:	bf0c      	ite	eq
2000fed2:	2301      	moveq	r3, #1
2000fed4:	2300      	movne	r3, #0
2000fed6:	b2db      	uxtb	r3, r3
2000fed8:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
2000feda:	687b      	ldr	r3, [r7, #4]
2000fedc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2000fede:	f003 0308 	and.w	r3, r3, #8
2000fee2:	2b00      	cmp	r3, #0
2000fee4:	d102      	bne.n	2000feec <HAL_UART_IRQHandler+0x144>
2000fee6:	68fb      	ldr	r3, [r7, #12]
2000fee8:	2b00      	cmp	r3, #0
2000feea:	d031      	beq.n	2000ff50 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
2000feec:	6878      	ldr	r0, [r7, #4]
2000feee:	f000 f95c 	bl	200101aa <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
2000fef2:	687b      	ldr	r3, [r7, #4]
2000fef4:	681b      	ldr	r3, [r3, #0]
2000fef6:	695b      	ldr	r3, [r3, #20]
2000fef8:	f003 0340 	and.w	r3, r3, #64	; 0x40
2000fefc:	2b40      	cmp	r3, #64	; 0x40
2000fefe:	d123      	bne.n	2000ff48 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
2000ff00:	687b      	ldr	r3, [r7, #4]
2000ff02:	681b      	ldr	r3, [r3, #0]
2000ff04:	695a      	ldr	r2, [r3, #20]
2000ff06:	687b      	ldr	r3, [r7, #4]
2000ff08:	681b      	ldr	r3, [r3, #0]
2000ff0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
2000ff0e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
2000ff10:	687b      	ldr	r3, [r7, #4]
2000ff12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
2000ff14:	2b00      	cmp	r3, #0
2000ff16:	d013      	beq.n	2000ff40 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
2000ff18:	687b      	ldr	r3, [r7, #4]
2000ff1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
2000ff1c:	4a21      	ldr	r2, [pc, #132]	; (2000ffa4 <HAL_UART_IRQHandler+0x1fc>)
2000ff1e:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
2000ff20:	687b      	ldr	r3, [r7, #4]
2000ff22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
2000ff24:	4618      	mov	r0, r3
2000ff26:	f7fe fb15 	bl	2000e554 <HAL_DMA_Abort_IT>
2000ff2a:	4603      	mov	r3, r0
2000ff2c:	2b00      	cmp	r3, #0
2000ff2e:	d016      	beq.n	2000ff5e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
2000ff30:	687b      	ldr	r3, [r7, #4]
2000ff32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
2000ff34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2000ff36:	687a      	ldr	r2, [r7, #4]
2000ff38:	6b52      	ldr	r2, [r2, #52]	; 0x34
2000ff3a:	4610      	mov	r0, r2
2000ff3c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
2000ff3e:	e00e      	b.n	2000ff5e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
2000ff40:	6878      	ldr	r0, [r7, #4]
2000ff42:	f000 f84f 	bl	2000ffe4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
2000ff46:	e00a      	b.n	2000ff5e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
2000ff48:	6878      	ldr	r0, [r7, #4]
2000ff4a:	f000 f84b 	bl	2000ffe4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
2000ff4e:	e006      	b.n	2000ff5e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
2000ff50:	6878      	ldr	r0, [r7, #4]
2000ff52:	f000 f847 	bl	2000ffe4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
2000ff56:	687b      	ldr	r3, [r7, #4]
2000ff58:	2200      	movs	r2, #0
2000ff5a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
2000ff5c:	e01e      	b.n	2000ff9c <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
2000ff5e:	bf00      	nop
    return;
2000ff60:	e01c      	b.n	2000ff9c <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
2000ff62:	69fb      	ldr	r3, [r7, #28]
2000ff64:	f003 0380 	and.w	r3, r3, #128	; 0x80
2000ff68:	2b00      	cmp	r3, #0
2000ff6a:	d008      	beq.n	2000ff7e <HAL_UART_IRQHandler+0x1d6>
2000ff6c:	69bb      	ldr	r3, [r7, #24]
2000ff6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
2000ff72:	2b00      	cmp	r3, #0
2000ff74:	d003      	beq.n	2000ff7e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
2000ff76:	6878      	ldr	r0, [r7, #4]
2000ff78:	f000 f949 	bl	2001020e <UART_Transmit_IT>
    return;
2000ff7c:	e00f      	b.n	2000ff9e <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
2000ff7e:	69fb      	ldr	r3, [r7, #28]
2000ff80:	f003 0340 	and.w	r3, r3, #64	; 0x40
2000ff84:	2b00      	cmp	r3, #0
2000ff86:	d00a      	beq.n	2000ff9e <HAL_UART_IRQHandler+0x1f6>
2000ff88:	69bb      	ldr	r3, [r7, #24]
2000ff8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
2000ff8e:	2b00      	cmp	r3, #0
2000ff90:	d005      	beq.n	2000ff9e <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
2000ff92:	6878      	ldr	r0, [r7, #4]
2000ff94:	f000 f991 	bl	200102ba <UART_EndTransmit_IT>
    return;
2000ff98:	bf00      	nop
2000ff9a:	e000      	b.n	2000ff9e <HAL_UART_IRQHandler+0x1f6>
    return;
2000ff9c:	bf00      	nop
  }
}
2000ff9e:	3720      	adds	r7, #32
2000ffa0:	46bd      	mov	sp, r7
2000ffa2:	bd80      	pop	{r7, pc}
2000ffa4:	200101e7 	.word	0x200101e7

2000ffa8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
2000ffa8:	b480      	push	{r7}
2000ffaa:	b083      	sub	sp, #12
2000ffac:	af00      	add	r7, sp, #0
2000ffae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
2000ffb0:	bf00      	nop
2000ffb2:	370c      	adds	r7, #12
2000ffb4:	46bd      	mov	sp, r7
2000ffb6:	f85d 7b04 	ldr.w	r7, [sp], #4
2000ffba:	4770      	bx	lr

2000ffbc <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
2000ffbc:	b480      	push	{r7}
2000ffbe:	b083      	sub	sp, #12
2000ffc0:	af00      	add	r7, sp, #0
2000ffc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
2000ffc4:	bf00      	nop
2000ffc6:	370c      	adds	r7, #12
2000ffc8:	46bd      	mov	sp, r7
2000ffca:	f85d 7b04 	ldr.w	r7, [sp], #4
2000ffce:	4770      	bx	lr

2000ffd0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
2000ffd0:	b480      	push	{r7}
2000ffd2:	b083      	sub	sp, #12
2000ffd4:	af00      	add	r7, sp, #0
2000ffd6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
2000ffd8:	bf00      	nop
2000ffda:	370c      	adds	r7, #12
2000ffdc:	46bd      	mov	sp, r7
2000ffde:	f85d 7b04 	ldr.w	r7, [sp], #4
2000ffe2:	4770      	bx	lr

2000ffe4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
2000ffe4:	b480      	push	{r7}
2000ffe6:	b083      	sub	sp, #12
2000ffe8:	af00      	add	r7, sp, #0
2000ffea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
2000ffec:	bf00      	nop
2000ffee:	370c      	adds	r7, #12
2000fff0:	46bd      	mov	sp, r7
2000fff2:	f85d 7b04 	ldr.w	r7, [sp], #4
2000fff6:	4770      	bx	lr

2000fff8 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
2000fff8:	b580      	push	{r7, lr}
2000fffa:	b084      	sub	sp, #16
2000fffc:	af00      	add	r7, sp, #0
2000fffe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
20010000:	687b      	ldr	r3, [r7, #4]
20010002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20010004:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
20010006:	687b      	ldr	r3, [r7, #4]
20010008:	681b      	ldr	r3, [r3, #0]
2001000a:	681b      	ldr	r3, [r3, #0]
2001000c:	f403 7380 	and.w	r3, r3, #256	; 0x100
20010010:	2b00      	cmp	r3, #0
20010012:	d113      	bne.n	2001003c <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
20010014:	68fb      	ldr	r3, [r7, #12]
20010016:	2200      	movs	r2, #0
20010018:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
2001001a:	68fb      	ldr	r3, [r7, #12]
2001001c:	681b      	ldr	r3, [r3, #0]
2001001e:	695a      	ldr	r2, [r3, #20]
20010020:	68fb      	ldr	r3, [r7, #12]
20010022:	681b      	ldr	r3, [r3, #0]
20010024:	f022 0280 	bic.w	r2, r2, #128	; 0x80
20010028:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
2001002a:	68fb      	ldr	r3, [r7, #12]
2001002c:	681b      	ldr	r3, [r3, #0]
2001002e:	68da      	ldr	r2, [r3, #12]
20010030:	68fb      	ldr	r3, [r7, #12]
20010032:	681b      	ldr	r3, [r3, #0]
20010034:	f042 0240 	orr.w	r2, r2, #64	; 0x40
20010038:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
2001003a:	e002      	b.n	20010042 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
2001003c:	68f8      	ldr	r0, [r7, #12]
2001003e:	f7ff ffb3 	bl	2000ffa8 <HAL_UART_TxCpltCallback>
}
20010042:	bf00      	nop
20010044:	3710      	adds	r7, #16
20010046:	46bd      	mov	sp, r7
20010048:	bd80      	pop	{r7, pc}

2001004a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
2001004a:	b580      	push	{r7, lr}
2001004c:	b084      	sub	sp, #16
2001004e:	af00      	add	r7, sp, #0
20010050:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
20010052:	687b      	ldr	r3, [r7, #4]
20010054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20010056:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
20010058:	68f8      	ldr	r0, [r7, #12]
2001005a:	f7ff ffaf 	bl	2000ffbc <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
2001005e:	bf00      	nop
20010060:	3710      	adds	r7, #16
20010062:	46bd      	mov	sp, r7
20010064:	bd80      	pop	{r7, pc}

20010066 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
20010066:	b580      	push	{r7, lr}
20010068:	b084      	sub	sp, #16
2001006a:	af00      	add	r7, sp, #0
2001006c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
2001006e:	687b      	ldr	r3, [r7, #4]
20010070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20010072:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
20010074:	687b      	ldr	r3, [r7, #4]
20010076:	681b      	ldr	r3, [r3, #0]
20010078:	681b      	ldr	r3, [r3, #0]
2001007a:	f403 7380 	and.w	r3, r3, #256	; 0x100
2001007e:	2b00      	cmp	r3, #0
20010080:	d11e      	bne.n	200100c0 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
20010082:	68fb      	ldr	r3, [r7, #12]
20010084:	2200      	movs	r2, #0
20010086:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
20010088:	68fb      	ldr	r3, [r7, #12]
2001008a:	681b      	ldr	r3, [r3, #0]
2001008c:	68da      	ldr	r2, [r3, #12]
2001008e:	68fb      	ldr	r3, [r7, #12]
20010090:	681b      	ldr	r3, [r3, #0]
20010092:	f422 7280 	bic.w	r2, r2, #256	; 0x100
20010096:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
20010098:	68fb      	ldr	r3, [r7, #12]
2001009a:	681b      	ldr	r3, [r3, #0]
2001009c:	695a      	ldr	r2, [r3, #20]
2001009e:	68fb      	ldr	r3, [r7, #12]
200100a0:	681b      	ldr	r3, [r3, #0]
200100a2:	f022 0201 	bic.w	r2, r2, #1
200100a6:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
200100a8:	68fb      	ldr	r3, [r7, #12]
200100aa:	681b      	ldr	r3, [r3, #0]
200100ac:	695a      	ldr	r2, [r3, #20]
200100ae:	68fb      	ldr	r3, [r7, #12]
200100b0:	681b      	ldr	r3, [r3, #0]
200100b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
200100b6:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
200100b8:	68fb      	ldr	r3, [r7, #12]
200100ba:	2220      	movs	r2, #32
200100bc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
200100c0:	68f8      	ldr	r0, [r7, #12]
200100c2:	f7fd fb39 	bl	2000d738 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
200100c6:	bf00      	nop
200100c8:	3710      	adds	r7, #16
200100ca:	46bd      	mov	sp, r7
200100cc:	bd80      	pop	{r7, pc}

200100ce <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
200100ce:	b580      	push	{r7, lr}
200100d0:	b084      	sub	sp, #16
200100d2:	af00      	add	r7, sp, #0
200100d4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
200100d6:	687b      	ldr	r3, [r7, #4]
200100d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
200100da:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
200100dc:	68f8      	ldr	r0, [r7, #12]
200100de:	f7ff ff77 	bl	2000ffd0 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
200100e2:	bf00      	nop
200100e4:	3710      	adds	r7, #16
200100e6:	46bd      	mov	sp, r7
200100e8:	bd80      	pop	{r7, pc}

200100ea <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
200100ea:	b580      	push	{r7, lr}
200100ec:	b084      	sub	sp, #16
200100ee:	af00      	add	r7, sp, #0
200100f0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
200100f2:	2300      	movs	r3, #0
200100f4:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
200100f6:	687b      	ldr	r3, [r7, #4]
200100f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
200100fa:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
200100fc:	68bb      	ldr	r3, [r7, #8]
200100fe:	681b      	ldr	r3, [r3, #0]
20010100:	695b      	ldr	r3, [r3, #20]
20010102:	f003 0380 	and.w	r3, r3, #128	; 0x80
20010106:	2b80      	cmp	r3, #128	; 0x80
20010108:	bf0c      	ite	eq
2001010a:	2301      	moveq	r3, #1
2001010c:	2300      	movne	r3, #0
2001010e:	b2db      	uxtb	r3, r3
20010110:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
20010112:	68bb      	ldr	r3, [r7, #8]
20010114:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
20010118:	b2db      	uxtb	r3, r3
2001011a:	2b21      	cmp	r3, #33	; 0x21
2001011c:	d108      	bne.n	20010130 <UART_DMAError+0x46>
2001011e:	68fb      	ldr	r3, [r7, #12]
20010120:	2b00      	cmp	r3, #0
20010122:	d005      	beq.n	20010130 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
20010124:	68bb      	ldr	r3, [r7, #8]
20010126:	2200      	movs	r2, #0
20010128:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
2001012a:	68b8      	ldr	r0, [r7, #8]
2001012c:	f000 f827 	bl	2001017e <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
20010130:	68bb      	ldr	r3, [r7, #8]
20010132:	681b      	ldr	r3, [r3, #0]
20010134:	695b      	ldr	r3, [r3, #20]
20010136:	f003 0340 	and.w	r3, r3, #64	; 0x40
2001013a:	2b40      	cmp	r3, #64	; 0x40
2001013c:	bf0c      	ite	eq
2001013e:	2301      	moveq	r3, #1
20010140:	2300      	movne	r3, #0
20010142:	b2db      	uxtb	r3, r3
20010144:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
20010146:	68bb      	ldr	r3, [r7, #8]
20010148:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
2001014c:	b2db      	uxtb	r3, r3
2001014e:	2b22      	cmp	r3, #34	; 0x22
20010150:	d108      	bne.n	20010164 <UART_DMAError+0x7a>
20010152:	68fb      	ldr	r3, [r7, #12]
20010154:	2b00      	cmp	r3, #0
20010156:	d005      	beq.n	20010164 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
20010158:	68bb      	ldr	r3, [r7, #8]
2001015a:	2200      	movs	r2, #0
2001015c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
2001015e:	68b8      	ldr	r0, [r7, #8]
20010160:	f000 f823 	bl	200101aa <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
20010164:	68bb      	ldr	r3, [r7, #8]
20010166:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
20010168:	f043 0210 	orr.w	r2, r3, #16
2001016c:	68bb      	ldr	r3, [r7, #8]
2001016e:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
20010170:	68b8      	ldr	r0, [r7, #8]
20010172:	f7ff ff37 	bl	2000ffe4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
20010176:	bf00      	nop
20010178:	3710      	adds	r7, #16
2001017a:	46bd      	mov	sp, r7
2001017c:	bd80      	pop	{r7, pc}

2001017e <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
2001017e:	b480      	push	{r7}
20010180:	b083      	sub	sp, #12
20010182:	af00      	add	r7, sp, #0
20010184:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
20010186:	687b      	ldr	r3, [r7, #4]
20010188:	681b      	ldr	r3, [r3, #0]
2001018a:	68da      	ldr	r2, [r3, #12]
2001018c:	687b      	ldr	r3, [r7, #4]
2001018e:	681b      	ldr	r3, [r3, #0]
20010190:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
20010194:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
20010196:	687b      	ldr	r3, [r7, #4]
20010198:	2220      	movs	r2, #32
2001019a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
2001019e:	bf00      	nop
200101a0:	370c      	adds	r7, #12
200101a2:	46bd      	mov	sp, r7
200101a4:	f85d 7b04 	ldr.w	r7, [sp], #4
200101a8:	4770      	bx	lr

200101aa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
200101aa:	b480      	push	{r7}
200101ac:	b083      	sub	sp, #12
200101ae:	af00      	add	r7, sp, #0
200101b0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
200101b2:	687b      	ldr	r3, [r7, #4]
200101b4:	681b      	ldr	r3, [r3, #0]
200101b6:	68da      	ldr	r2, [r3, #12]
200101b8:	687b      	ldr	r3, [r7, #4]
200101ba:	681b      	ldr	r3, [r3, #0]
200101bc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
200101c0:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
200101c2:	687b      	ldr	r3, [r7, #4]
200101c4:	681b      	ldr	r3, [r3, #0]
200101c6:	695a      	ldr	r2, [r3, #20]
200101c8:	687b      	ldr	r3, [r7, #4]
200101ca:	681b      	ldr	r3, [r3, #0]
200101cc:	f022 0201 	bic.w	r2, r2, #1
200101d0:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
200101d2:	687b      	ldr	r3, [r7, #4]
200101d4:	2220      	movs	r2, #32
200101d6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
200101da:	bf00      	nop
200101dc:	370c      	adds	r7, #12
200101de:	46bd      	mov	sp, r7
200101e0:	f85d 7b04 	ldr.w	r7, [sp], #4
200101e4:	4770      	bx	lr

200101e6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
200101e6:	b580      	push	{r7, lr}
200101e8:	b084      	sub	sp, #16
200101ea:	af00      	add	r7, sp, #0
200101ec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
200101ee:	687b      	ldr	r3, [r7, #4]
200101f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
200101f2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
200101f4:	68fb      	ldr	r3, [r7, #12]
200101f6:	2200      	movs	r2, #0
200101f8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
200101fa:	68fb      	ldr	r3, [r7, #12]
200101fc:	2200      	movs	r2, #0
200101fe:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
20010200:	68f8      	ldr	r0, [r7, #12]
20010202:	f7ff feef 	bl	2000ffe4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
20010206:	bf00      	nop
20010208:	3710      	adds	r7, #16
2001020a:	46bd      	mov	sp, r7
2001020c:	bd80      	pop	{r7, pc}

2001020e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
2001020e:	b480      	push	{r7}
20010210:	b085      	sub	sp, #20
20010212:	af00      	add	r7, sp, #0
20010214:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
20010216:	687b      	ldr	r3, [r7, #4]
20010218:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
2001021c:	b2db      	uxtb	r3, r3
2001021e:	2b21      	cmp	r3, #33	; 0x21
20010220:	d144      	bne.n	200102ac <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
20010222:	687b      	ldr	r3, [r7, #4]
20010224:	689b      	ldr	r3, [r3, #8]
20010226:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
2001022a:	d11a      	bne.n	20010262 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
2001022c:	687b      	ldr	r3, [r7, #4]
2001022e:	6a1b      	ldr	r3, [r3, #32]
20010230:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
20010232:	68fb      	ldr	r3, [r7, #12]
20010234:	881b      	ldrh	r3, [r3, #0]
20010236:	461a      	mov	r2, r3
20010238:	687b      	ldr	r3, [r7, #4]
2001023a:	681b      	ldr	r3, [r3, #0]
2001023c:	f3c2 0208 	ubfx	r2, r2, #0, #9
20010240:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
20010242:	687b      	ldr	r3, [r7, #4]
20010244:	691b      	ldr	r3, [r3, #16]
20010246:	2b00      	cmp	r3, #0
20010248:	d105      	bne.n	20010256 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
2001024a:	687b      	ldr	r3, [r7, #4]
2001024c:	6a1b      	ldr	r3, [r3, #32]
2001024e:	1c9a      	adds	r2, r3, #2
20010250:	687b      	ldr	r3, [r7, #4]
20010252:	621a      	str	r2, [r3, #32]
20010254:	e00e      	b.n	20010274 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
20010256:	687b      	ldr	r3, [r7, #4]
20010258:	6a1b      	ldr	r3, [r3, #32]
2001025a:	1c5a      	adds	r2, r3, #1
2001025c:	687b      	ldr	r3, [r7, #4]
2001025e:	621a      	str	r2, [r3, #32]
20010260:	e008      	b.n	20010274 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
20010262:	687b      	ldr	r3, [r7, #4]
20010264:	6a1b      	ldr	r3, [r3, #32]
20010266:	1c59      	adds	r1, r3, #1
20010268:	687a      	ldr	r2, [r7, #4]
2001026a:	6211      	str	r1, [r2, #32]
2001026c:	781a      	ldrb	r2, [r3, #0]
2001026e:	687b      	ldr	r3, [r7, #4]
20010270:	681b      	ldr	r3, [r3, #0]
20010272:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
20010274:	687b      	ldr	r3, [r7, #4]
20010276:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
20010278:	b29b      	uxth	r3, r3
2001027a:	3b01      	subs	r3, #1
2001027c:	b29b      	uxth	r3, r3
2001027e:	687a      	ldr	r2, [r7, #4]
20010280:	4619      	mov	r1, r3
20010282:	84d1      	strh	r1, [r2, #38]	; 0x26
20010284:	2b00      	cmp	r3, #0
20010286:	d10f      	bne.n	200102a8 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
20010288:	687b      	ldr	r3, [r7, #4]
2001028a:	681b      	ldr	r3, [r3, #0]
2001028c:	68da      	ldr	r2, [r3, #12]
2001028e:	687b      	ldr	r3, [r7, #4]
20010290:	681b      	ldr	r3, [r3, #0]
20010292:	f022 0280 	bic.w	r2, r2, #128	; 0x80
20010296:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
20010298:	687b      	ldr	r3, [r7, #4]
2001029a:	681b      	ldr	r3, [r3, #0]
2001029c:	68da      	ldr	r2, [r3, #12]
2001029e:	687b      	ldr	r3, [r7, #4]
200102a0:	681b      	ldr	r3, [r3, #0]
200102a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
200102a6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
200102a8:	2300      	movs	r3, #0
200102aa:	e000      	b.n	200102ae <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
200102ac:	2302      	movs	r3, #2
  }
}
200102ae:	4618      	mov	r0, r3
200102b0:	3714      	adds	r7, #20
200102b2:	46bd      	mov	sp, r7
200102b4:	f85d 7b04 	ldr.w	r7, [sp], #4
200102b8:	4770      	bx	lr

200102ba <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
200102ba:	b580      	push	{r7, lr}
200102bc:	b082      	sub	sp, #8
200102be:	af00      	add	r7, sp, #0
200102c0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
200102c2:	687b      	ldr	r3, [r7, #4]
200102c4:	681b      	ldr	r3, [r3, #0]
200102c6:	68da      	ldr	r2, [r3, #12]
200102c8:	687b      	ldr	r3, [r7, #4]
200102ca:	681b      	ldr	r3, [r3, #0]
200102cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
200102d0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
200102d2:	687b      	ldr	r3, [r7, #4]
200102d4:	2220      	movs	r2, #32
200102d6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
200102da:	6878      	ldr	r0, [r7, #4]
200102dc:	f7ff fe64 	bl	2000ffa8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
200102e0:	2300      	movs	r3, #0
}
200102e2:	4618      	mov	r0, r3
200102e4:	3708      	adds	r7, #8
200102e6:	46bd      	mov	sp, r7
200102e8:	bd80      	pop	{r7, pc}

200102ea <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
200102ea:	b580      	push	{r7, lr}
200102ec:	b084      	sub	sp, #16
200102ee:	af00      	add	r7, sp, #0
200102f0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
200102f2:	687b      	ldr	r3, [r7, #4]
200102f4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
200102f8:	b2db      	uxtb	r3, r3
200102fa:	2b22      	cmp	r3, #34	; 0x22
200102fc:	d171      	bne.n	200103e2 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
200102fe:	687b      	ldr	r3, [r7, #4]
20010300:	689b      	ldr	r3, [r3, #8]
20010302:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
20010306:	d123      	bne.n	20010350 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
20010308:	687b      	ldr	r3, [r7, #4]
2001030a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
2001030c:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
2001030e:	687b      	ldr	r3, [r7, #4]
20010310:	691b      	ldr	r3, [r3, #16]
20010312:	2b00      	cmp	r3, #0
20010314:	d10e      	bne.n	20010334 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
20010316:	687b      	ldr	r3, [r7, #4]
20010318:	681b      	ldr	r3, [r3, #0]
2001031a:	685b      	ldr	r3, [r3, #4]
2001031c:	b29b      	uxth	r3, r3
2001031e:	f3c3 0308 	ubfx	r3, r3, #0, #9
20010322:	b29a      	uxth	r2, r3
20010324:	68fb      	ldr	r3, [r7, #12]
20010326:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
20010328:	687b      	ldr	r3, [r7, #4]
2001032a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
2001032c:	1c9a      	adds	r2, r3, #2
2001032e:	687b      	ldr	r3, [r7, #4]
20010330:	629a      	str	r2, [r3, #40]	; 0x28
20010332:	e029      	b.n	20010388 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
20010334:	687b      	ldr	r3, [r7, #4]
20010336:	681b      	ldr	r3, [r3, #0]
20010338:	685b      	ldr	r3, [r3, #4]
2001033a:	b29b      	uxth	r3, r3
2001033c:	b2db      	uxtb	r3, r3
2001033e:	b29a      	uxth	r2, r3
20010340:	68fb      	ldr	r3, [r7, #12]
20010342:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
20010344:	687b      	ldr	r3, [r7, #4]
20010346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
20010348:	1c5a      	adds	r2, r3, #1
2001034a:	687b      	ldr	r3, [r7, #4]
2001034c:	629a      	str	r2, [r3, #40]	; 0x28
2001034e:	e01b      	b.n	20010388 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
20010350:	687b      	ldr	r3, [r7, #4]
20010352:	691b      	ldr	r3, [r3, #16]
20010354:	2b00      	cmp	r3, #0
20010356:	d10a      	bne.n	2001036e <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
20010358:	687b      	ldr	r3, [r7, #4]
2001035a:	681b      	ldr	r3, [r3, #0]
2001035c:	6858      	ldr	r0, [r3, #4]
2001035e:	687b      	ldr	r3, [r7, #4]
20010360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
20010362:	1c59      	adds	r1, r3, #1
20010364:	687a      	ldr	r2, [r7, #4]
20010366:	6291      	str	r1, [r2, #40]	; 0x28
20010368:	b2c2      	uxtb	r2, r0
2001036a:	701a      	strb	r2, [r3, #0]
2001036c:	e00c      	b.n	20010388 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
2001036e:	687b      	ldr	r3, [r7, #4]
20010370:	681b      	ldr	r3, [r3, #0]
20010372:	685b      	ldr	r3, [r3, #4]
20010374:	b2da      	uxtb	r2, r3
20010376:	687b      	ldr	r3, [r7, #4]
20010378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
2001037a:	1c58      	adds	r0, r3, #1
2001037c:	6879      	ldr	r1, [r7, #4]
2001037e:	6288      	str	r0, [r1, #40]	; 0x28
20010380:	f002 027f 	and.w	r2, r2, #127	; 0x7f
20010384:	b2d2      	uxtb	r2, r2
20010386:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
20010388:	687b      	ldr	r3, [r7, #4]
2001038a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
2001038c:	b29b      	uxth	r3, r3
2001038e:	3b01      	subs	r3, #1
20010390:	b29b      	uxth	r3, r3
20010392:	687a      	ldr	r2, [r7, #4]
20010394:	4619      	mov	r1, r3
20010396:	85d1      	strh	r1, [r2, #46]	; 0x2e
20010398:	2b00      	cmp	r3, #0
2001039a:	d120      	bne.n	200103de <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
2001039c:	687b      	ldr	r3, [r7, #4]
2001039e:	681b      	ldr	r3, [r3, #0]
200103a0:	68da      	ldr	r2, [r3, #12]
200103a2:	687b      	ldr	r3, [r7, #4]
200103a4:	681b      	ldr	r3, [r3, #0]
200103a6:	f022 0220 	bic.w	r2, r2, #32
200103aa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
200103ac:	687b      	ldr	r3, [r7, #4]
200103ae:	681b      	ldr	r3, [r3, #0]
200103b0:	68da      	ldr	r2, [r3, #12]
200103b2:	687b      	ldr	r3, [r7, #4]
200103b4:	681b      	ldr	r3, [r3, #0]
200103b6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
200103ba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
200103bc:	687b      	ldr	r3, [r7, #4]
200103be:	681b      	ldr	r3, [r3, #0]
200103c0:	695a      	ldr	r2, [r3, #20]
200103c2:	687b      	ldr	r3, [r7, #4]
200103c4:	681b      	ldr	r3, [r3, #0]
200103c6:	f022 0201 	bic.w	r2, r2, #1
200103ca:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
200103cc:	687b      	ldr	r3, [r7, #4]
200103ce:	2220      	movs	r2, #32
200103d0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
200103d4:	6878      	ldr	r0, [r7, #4]
200103d6:	f7fd f9af 	bl	2000d738 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
200103da:	2300      	movs	r3, #0
200103dc:	e002      	b.n	200103e4 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
200103de:	2300      	movs	r3, #0
200103e0:	e000      	b.n	200103e4 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
200103e2:	2302      	movs	r3, #2
  }
}
200103e4:	4618      	mov	r0, r3
200103e6:	3710      	adds	r7, #16
200103e8:	46bd      	mov	sp, r7
200103ea:	bd80      	pop	{r7, pc}

200103ec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
200103ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
200103f0:	b085      	sub	sp, #20
200103f2:	af00      	add	r7, sp, #0
200103f4:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
200103f6:	687b      	ldr	r3, [r7, #4]
200103f8:	681b      	ldr	r3, [r3, #0]
200103fa:	691b      	ldr	r3, [r3, #16]
200103fc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
20010400:	687b      	ldr	r3, [r7, #4]
20010402:	68da      	ldr	r2, [r3, #12]
20010404:	687b      	ldr	r3, [r7, #4]
20010406:	681b      	ldr	r3, [r3, #0]
20010408:	430a      	orrs	r2, r1
2001040a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
2001040c:	687b      	ldr	r3, [r7, #4]
2001040e:	689a      	ldr	r2, [r3, #8]
20010410:	687b      	ldr	r3, [r7, #4]
20010412:	691b      	ldr	r3, [r3, #16]
20010414:	431a      	orrs	r2, r3
20010416:	687b      	ldr	r3, [r7, #4]
20010418:	695b      	ldr	r3, [r3, #20]
2001041a:	431a      	orrs	r2, r3
2001041c:	687b      	ldr	r3, [r7, #4]
2001041e:	69db      	ldr	r3, [r3, #28]
20010420:	4313      	orrs	r3, r2
20010422:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
20010424:	687b      	ldr	r3, [r7, #4]
20010426:	681b      	ldr	r3, [r3, #0]
20010428:	68db      	ldr	r3, [r3, #12]
2001042a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
2001042e:	f023 030c 	bic.w	r3, r3, #12
20010432:	687a      	ldr	r2, [r7, #4]
20010434:	6812      	ldr	r2, [r2, #0]
20010436:	68f9      	ldr	r1, [r7, #12]
20010438:	430b      	orrs	r3, r1
2001043a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
2001043c:	687b      	ldr	r3, [r7, #4]
2001043e:	681b      	ldr	r3, [r3, #0]
20010440:	695b      	ldr	r3, [r3, #20]
20010442:	f423 7140 	bic.w	r1, r3, #768	; 0x300
20010446:	687b      	ldr	r3, [r7, #4]
20010448:	699a      	ldr	r2, [r3, #24]
2001044a:	687b      	ldr	r3, [r7, #4]
2001044c:	681b      	ldr	r3, [r3, #0]
2001044e:	430a      	orrs	r2, r1
20010450:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
20010452:	687b      	ldr	r3, [r7, #4]
20010454:	69db      	ldr	r3, [r3, #28]
20010456:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
2001045a:	f040 818b 	bne.w	20010774 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
2001045e:	687b      	ldr	r3, [r7, #4]
20010460:	681b      	ldr	r3, [r3, #0]
20010462:	4ac1      	ldr	r2, [pc, #772]	; (20010768 <UART_SetConfig+0x37c>)
20010464:	4293      	cmp	r3, r2
20010466:	d005      	beq.n	20010474 <UART_SetConfig+0x88>
20010468:	687b      	ldr	r3, [r7, #4]
2001046a:	681b      	ldr	r3, [r3, #0]
2001046c:	4abf      	ldr	r2, [pc, #764]	; (2001076c <UART_SetConfig+0x380>)
2001046e:	4293      	cmp	r3, r2
20010470:	f040 80bd 	bne.w	200105ee <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
20010474:	f7ff f90c 	bl	2000f690 <HAL_RCC_GetPCLK2Freq>
20010478:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
2001047a:	68bb      	ldr	r3, [r7, #8]
2001047c:	461d      	mov	r5, r3
2001047e:	f04f 0600 	mov.w	r6, #0
20010482:	46a8      	mov	r8, r5
20010484:	46b1      	mov	r9, r6
20010486:	eb18 0308 	adds.w	r3, r8, r8
2001048a:	eb49 0409 	adc.w	r4, r9, r9
2001048e:	4698      	mov	r8, r3
20010490:	46a1      	mov	r9, r4
20010492:	eb18 0805 	adds.w	r8, r8, r5
20010496:	eb49 0906 	adc.w	r9, r9, r6
2001049a:	f04f 0100 	mov.w	r1, #0
2001049e:	f04f 0200 	mov.w	r2, #0
200104a2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
200104a6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
200104aa:	ea4f 01c8 	mov.w	r1, r8, lsl #3
200104ae:	4688      	mov	r8, r1
200104b0:	4691      	mov	r9, r2
200104b2:	eb18 0005 	adds.w	r0, r8, r5
200104b6:	eb49 0106 	adc.w	r1, r9, r6
200104ba:	687b      	ldr	r3, [r7, #4]
200104bc:	685b      	ldr	r3, [r3, #4]
200104be:	461d      	mov	r5, r3
200104c0:	f04f 0600 	mov.w	r6, #0
200104c4:	196b      	adds	r3, r5, r5
200104c6:	eb46 0406 	adc.w	r4, r6, r6
200104ca:	461a      	mov	r2, r3
200104cc:	4623      	mov	r3, r4
200104ce:	f7fc fed7 	bl	2000d280 <__aeabi_uldivmod>
200104d2:	4603      	mov	r3, r0
200104d4:	460c      	mov	r4, r1
200104d6:	461a      	mov	r2, r3
200104d8:	4ba5      	ldr	r3, [pc, #660]	; (20010770 <UART_SetConfig+0x384>)
200104da:	fba3 2302 	umull	r2, r3, r3, r2
200104de:	095b      	lsrs	r3, r3, #5
200104e0:	ea4f 1803 	mov.w	r8, r3, lsl #4
200104e4:	68bb      	ldr	r3, [r7, #8]
200104e6:	461d      	mov	r5, r3
200104e8:	f04f 0600 	mov.w	r6, #0
200104ec:	46a9      	mov	r9, r5
200104ee:	46b2      	mov	sl, r6
200104f0:	eb19 0309 	adds.w	r3, r9, r9
200104f4:	eb4a 040a 	adc.w	r4, sl, sl
200104f8:	4699      	mov	r9, r3
200104fa:	46a2      	mov	sl, r4
200104fc:	eb19 0905 	adds.w	r9, r9, r5
20010500:	eb4a 0a06 	adc.w	sl, sl, r6
20010504:	f04f 0100 	mov.w	r1, #0
20010508:	f04f 0200 	mov.w	r2, #0
2001050c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
20010510:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
20010514:	ea4f 01c9 	mov.w	r1, r9, lsl #3
20010518:	4689      	mov	r9, r1
2001051a:	4692      	mov	sl, r2
2001051c:	eb19 0005 	adds.w	r0, r9, r5
20010520:	eb4a 0106 	adc.w	r1, sl, r6
20010524:	687b      	ldr	r3, [r7, #4]
20010526:	685b      	ldr	r3, [r3, #4]
20010528:	461d      	mov	r5, r3
2001052a:	f04f 0600 	mov.w	r6, #0
2001052e:	196b      	adds	r3, r5, r5
20010530:	eb46 0406 	adc.w	r4, r6, r6
20010534:	461a      	mov	r2, r3
20010536:	4623      	mov	r3, r4
20010538:	f7fc fea2 	bl	2000d280 <__aeabi_uldivmod>
2001053c:	4603      	mov	r3, r0
2001053e:	460c      	mov	r4, r1
20010540:	461a      	mov	r2, r3
20010542:	4b8b      	ldr	r3, [pc, #556]	; (20010770 <UART_SetConfig+0x384>)
20010544:	fba3 1302 	umull	r1, r3, r3, r2
20010548:	095b      	lsrs	r3, r3, #5
2001054a:	2164      	movs	r1, #100	; 0x64
2001054c:	fb01 f303 	mul.w	r3, r1, r3
20010550:	1ad3      	subs	r3, r2, r3
20010552:	00db      	lsls	r3, r3, #3
20010554:	3332      	adds	r3, #50	; 0x32
20010556:	4a86      	ldr	r2, [pc, #536]	; (20010770 <UART_SetConfig+0x384>)
20010558:	fba2 2303 	umull	r2, r3, r2, r3
2001055c:	095b      	lsrs	r3, r3, #5
2001055e:	005b      	lsls	r3, r3, #1
20010560:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
20010564:	4498      	add	r8, r3
20010566:	68bb      	ldr	r3, [r7, #8]
20010568:	461d      	mov	r5, r3
2001056a:	f04f 0600 	mov.w	r6, #0
2001056e:	46a9      	mov	r9, r5
20010570:	46b2      	mov	sl, r6
20010572:	eb19 0309 	adds.w	r3, r9, r9
20010576:	eb4a 040a 	adc.w	r4, sl, sl
2001057a:	4699      	mov	r9, r3
2001057c:	46a2      	mov	sl, r4
2001057e:	eb19 0905 	adds.w	r9, r9, r5
20010582:	eb4a 0a06 	adc.w	sl, sl, r6
20010586:	f04f 0100 	mov.w	r1, #0
2001058a:	f04f 0200 	mov.w	r2, #0
2001058e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
20010592:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
20010596:	ea4f 01c9 	mov.w	r1, r9, lsl #3
2001059a:	4689      	mov	r9, r1
2001059c:	4692      	mov	sl, r2
2001059e:	eb19 0005 	adds.w	r0, r9, r5
200105a2:	eb4a 0106 	adc.w	r1, sl, r6
200105a6:	687b      	ldr	r3, [r7, #4]
200105a8:	685b      	ldr	r3, [r3, #4]
200105aa:	461d      	mov	r5, r3
200105ac:	f04f 0600 	mov.w	r6, #0
200105b0:	196b      	adds	r3, r5, r5
200105b2:	eb46 0406 	adc.w	r4, r6, r6
200105b6:	461a      	mov	r2, r3
200105b8:	4623      	mov	r3, r4
200105ba:	f7fc fe61 	bl	2000d280 <__aeabi_uldivmod>
200105be:	4603      	mov	r3, r0
200105c0:	460c      	mov	r4, r1
200105c2:	461a      	mov	r2, r3
200105c4:	4b6a      	ldr	r3, [pc, #424]	; (20010770 <UART_SetConfig+0x384>)
200105c6:	fba3 1302 	umull	r1, r3, r3, r2
200105ca:	095b      	lsrs	r3, r3, #5
200105cc:	2164      	movs	r1, #100	; 0x64
200105ce:	fb01 f303 	mul.w	r3, r1, r3
200105d2:	1ad3      	subs	r3, r2, r3
200105d4:	00db      	lsls	r3, r3, #3
200105d6:	3332      	adds	r3, #50	; 0x32
200105d8:	4a65      	ldr	r2, [pc, #404]	; (20010770 <UART_SetConfig+0x384>)
200105da:	fba2 2303 	umull	r2, r3, r2, r3
200105de:	095b      	lsrs	r3, r3, #5
200105e0:	f003 0207 	and.w	r2, r3, #7
200105e4:	687b      	ldr	r3, [r7, #4]
200105e6:	681b      	ldr	r3, [r3, #0]
200105e8:	4442      	add	r2, r8
200105ea:	609a      	str	r2, [r3, #8]
200105ec:	e26f      	b.n	20010ace <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
200105ee:	f7ff f83b 	bl	2000f668 <HAL_RCC_GetPCLK1Freq>
200105f2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
200105f4:	68bb      	ldr	r3, [r7, #8]
200105f6:	461d      	mov	r5, r3
200105f8:	f04f 0600 	mov.w	r6, #0
200105fc:	46a8      	mov	r8, r5
200105fe:	46b1      	mov	r9, r6
20010600:	eb18 0308 	adds.w	r3, r8, r8
20010604:	eb49 0409 	adc.w	r4, r9, r9
20010608:	4698      	mov	r8, r3
2001060a:	46a1      	mov	r9, r4
2001060c:	eb18 0805 	adds.w	r8, r8, r5
20010610:	eb49 0906 	adc.w	r9, r9, r6
20010614:	f04f 0100 	mov.w	r1, #0
20010618:	f04f 0200 	mov.w	r2, #0
2001061c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
20010620:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
20010624:	ea4f 01c8 	mov.w	r1, r8, lsl #3
20010628:	4688      	mov	r8, r1
2001062a:	4691      	mov	r9, r2
2001062c:	eb18 0005 	adds.w	r0, r8, r5
20010630:	eb49 0106 	adc.w	r1, r9, r6
20010634:	687b      	ldr	r3, [r7, #4]
20010636:	685b      	ldr	r3, [r3, #4]
20010638:	461d      	mov	r5, r3
2001063a:	f04f 0600 	mov.w	r6, #0
2001063e:	196b      	adds	r3, r5, r5
20010640:	eb46 0406 	adc.w	r4, r6, r6
20010644:	461a      	mov	r2, r3
20010646:	4623      	mov	r3, r4
20010648:	f7fc fe1a 	bl	2000d280 <__aeabi_uldivmod>
2001064c:	4603      	mov	r3, r0
2001064e:	460c      	mov	r4, r1
20010650:	461a      	mov	r2, r3
20010652:	4b47      	ldr	r3, [pc, #284]	; (20010770 <UART_SetConfig+0x384>)
20010654:	fba3 2302 	umull	r2, r3, r3, r2
20010658:	095b      	lsrs	r3, r3, #5
2001065a:	ea4f 1803 	mov.w	r8, r3, lsl #4
2001065e:	68bb      	ldr	r3, [r7, #8]
20010660:	461d      	mov	r5, r3
20010662:	f04f 0600 	mov.w	r6, #0
20010666:	46a9      	mov	r9, r5
20010668:	46b2      	mov	sl, r6
2001066a:	eb19 0309 	adds.w	r3, r9, r9
2001066e:	eb4a 040a 	adc.w	r4, sl, sl
20010672:	4699      	mov	r9, r3
20010674:	46a2      	mov	sl, r4
20010676:	eb19 0905 	adds.w	r9, r9, r5
2001067a:	eb4a 0a06 	adc.w	sl, sl, r6
2001067e:	f04f 0100 	mov.w	r1, #0
20010682:	f04f 0200 	mov.w	r2, #0
20010686:	ea4f 02ca 	mov.w	r2, sl, lsl #3
2001068a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
2001068e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
20010692:	4689      	mov	r9, r1
20010694:	4692      	mov	sl, r2
20010696:	eb19 0005 	adds.w	r0, r9, r5
2001069a:	eb4a 0106 	adc.w	r1, sl, r6
2001069e:	687b      	ldr	r3, [r7, #4]
200106a0:	685b      	ldr	r3, [r3, #4]
200106a2:	461d      	mov	r5, r3
200106a4:	f04f 0600 	mov.w	r6, #0
200106a8:	196b      	adds	r3, r5, r5
200106aa:	eb46 0406 	adc.w	r4, r6, r6
200106ae:	461a      	mov	r2, r3
200106b0:	4623      	mov	r3, r4
200106b2:	f7fc fde5 	bl	2000d280 <__aeabi_uldivmod>
200106b6:	4603      	mov	r3, r0
200106b8:	460c      	mov	r4, r1
200106ba:	461a      	mov	r2, r3
200106bc:	4b2c      	ldr	r3, [pc, #176]	; (20010770 <UART_SetConfig+0x384>)
200106be:	fba3 1302 	umull	r1, r3, r3, r2
200106c2:	095b      	lsrs	r3, r3, #5
200106c4:	2164      	movs	r1, #100	; 0x64
200106c6:	fb01 f303 	mul.w	r3, r1, r3
200106ca:	1ad3      	subs	r3, r2, r3
200106cc:	00db      	lsls	r3, r3, #3
200106ce:	3332      	adds	r3, #50	; 0x32
200106d0:	4a27      	ldr	r2, [pc, #156]	; (20010770 <UART_SetConfig+0x384>)
200106d2:	fba2 2303 	umull	r2, r3, r2, r3
200106d6:	095b      	lsrs	r3, r3, #5
200106d8:	005b      	lsls	r3, r3, #1
200106da:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
200106de:	4498      	add	r8, r3
200106e0:	68bb      	ldr	r3, [r7, #8]
200106e2:	461d      	mov	r5, r3
200106e4:	f04f 0600 	mov.w	r6, #0
200106e8:	46a9      	mov	r9, r5
200106ea:	46b2      	mov	sl, r6
200106ec:	eb19 0309 	adds.w	r3, r9, r9
200106f0:	eb4a 040a 	adc.w	r4, sl, sl
200106f4:	4699      	mov	r9, r3
200106f6:	46a2      	mov	sl, r4
200106f8:	eb19 0905 	adds.w	r9, r9, r5
200106fc:	eb4a 0a06 	adc.w	sl, sl, r6
20010700:	f04f 0100 	mov.w	r1, #0
20010704:	f04f 0200 	mov.w	r2, #0
20010708:	ea4f 02ca 	mov.w	r2, sl, lsl #3
2001070c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
20010710:	ea4f 01c9 	mov.w	r1, r9, lsl #3
20010714:	4689      	mov	r9, r1
20010716:	4692      	mov	sl, r2
20010718:	eb19 0005 	adds.w	r0, r9, r5
2001071c:	eb4a 0106 	adc.w	r1, sl, r6
20010720:	687b      	ldr	r3, [r7, #4]
20010722:	685b      	ldr	r3, [r3, #4]
20010724:	461d      	mov	r5, r3
20010726:	f04f 0600 	mov.w	r6, #0
2001072a:	196b      	adds	r3, r5, r5
2001072c:	eb46 0406 	adc.w	r4, r6, r6
20010730:	461a      	mov	r2, r3
20010732:	4623      	mov	r3, r4
20010734:	f7fc fda4 	bl	2000d280 <__aeabi_uldivmod>
20010738:	4603      	mov	r3, r0
2001073a:	460c      	mov	r4, r1
2001073c:	461a      	mov	r2, r3
2001073e:	4b0c      	ldr	r3, [pc, #48]	; (20010770 <UART_SetConfig+0x384>)
20010740:	fba3 1302 	umull	r1, r3, r3, r2
20010744:	095b      	lsrs	r3, r3, #5
20010746:	2164      	movs	r1, #100	; 0x64
20010748:	fb01 f303 	mul.w	r3, r1, r3
2001074c:	1ad3      	subs	r3, r2, r3
2001074e:	00db      	lsls	r3, r3, #3
20010750:	3332      	adds	r3, #50	; 0x32
20010752:	4a07      	ldr	r2, [pc, #28]	; (20010770 <UART_SetConfig+0x384>)
20010754:	fba2 2303 	umull	r2, r3, r2, r3
20010758:	095b      	lsrs	r3, r3, #5
2001075a:	f003 0207 	and.w	r2, r3, #7
2001075e:	687b      	ldr	r3, [r7, #4]
20010760:	681b      	ldr	r3, [r3, #0]
20010762:	4442      	add	r2, r8
20010764:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
20010766:	e1b2      	b.n	20010ace <UART_SetConfig+0x6e2>
20010768:	40011000 	.word	0x40011000
2001076c:	40011400 	.word	0x40011400
20010770:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
20010774:	687b      	ldr	r3, [r7, #4]
20010776:	681b      	ldr	r3, [r3, #0]
20010778:	4ad7      	ldr	r2, [pc, #860]	; (20010ad8 <UART_SetConfig+0x6ec>)
2001077a:	4293      	cmp	r3, r2
2001077c:	d005      	beq.n	2001078a <UART_SetConfig+0x39e>
2001077e:	687b      	ldr	r3, [r7, #4]
20010780:	681b      	ldr	r3, [r3, #0]
20010782:	4ad6      	ldr	r2, [pc, #856]	; (20010adc <UART_SetConfig+0x6f0>)
20010784:	4293      	cmp	r3, r2
20010786:	f040 80d1 	bne.w	2001092c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
2001078a:	f7fe ff81 	bl	2000f690 <HAL_RCC_GetPCLK2Freq>
2001078e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
20010790:	68bb      	ldr	r3, [r7, #8]
20010792:	469a      	mov	sl, r3
20010794:	f04f 0b00 	mov.w	fp, #0
20010798:	46d0      	mov	r8, sl
2001079a:	46d9      	mov	r9, fp
2001079c:	eb18 0308 	adds.w	r3, r8, r8
200107a0:	eb49 0409 	adc.w	r4, r9, r9
200107a4:	4698      	mov	r8, r3
200107a6:	46a1      	mov	r9, r4
200107a8:	eb18 080a 	adds.w	r8, r8, sl
200107ac:	eb49 090b 	adc.w	r9, r9, fp
200107b0:	f04f 0100 	mov.w	r1, #0
200107b4:	f04f 0200 	mov.w	r2, #0
200107b8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
200107bc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
200107c0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
200107c4:	4688      	mov	r8, r1
200107c6:	4691      	mov	r9, r2
200107c8:	eb1a 0508 	adds.w	r5, sl, r8
200107cc:	eb4b 0609 	adc.w	r6, fp, r9
200107d0:	687b      	ldr	r3, [r7, #4]
200107d2:	685b      	ldr	r3, [r3, #4]
200107d4:	4619      	mov	r1, r3
200107d6:	f04f 0200 	mov.w	r2, #0
200107da:	f04f 0300 	mov.w	r3, #0
200107de:	f04f 0400 	mov.w	r4, #0
200107e2:	0094      	lsls	r4, r2, #2
200107e4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
200107e8:	008b      	lsls	r3, r1, #2
200107ea:	461a      	mov	r2, r3
200107ec:	4623      	mov	r3, r4
200107ee:	4628      	mov	r0, r5
200107f0:	4631      	mov	r1, r6
200107f2:	f7fc fd45 	bl	2000d280 <__aeabi_uldivmod>
200107f6:	4603      	mov	r3, r0
200107f8:	460c      	mov	r4, r1
200107fa:	461a      	mov	r2, r3
200107fc:	4bb8      	ldr	r3, [pc, #736]	; (20010ae0 <UART_SetConfig+0x6f4>)
200107fe:	fba3 2302 	umull	r2, r3, r3, r2
20010802:	095b      	lsrs	r3, r3, #5
20010804:	ea4f 1803 	mov.w	r8, r3, lsl #4
20010808:	68bb      	ldr	r3, [r7, #8]
2001080a:	469b      	mov	fp, r3
2001080c:	f04f 0c00 	mov.w	ip, #0
20010810:	46d9      	mov	r9, fp
20010812:	46e2      	mov	sl, ip
20010814:	eb19 0309 	adds.w	r3, r9, r9
20010818:	eb4a 040a 	adc.w	r4, sl, sl
2001081c:	4699      	mov	r9, r3
2001081e:	46a2      	mov	sl, r4
20010820:	eb19 090b 	adds.w	r9, r9, fp
20010824:	eb4a 0a0c 	adc.w	sl, sl, ip
20010828:	f04f 0100 	mov.w	r1, #0
2001082c:	f04f 0200 	mov.w	r2, #0
20010830:	ea4f 02ca 	mov.w	r2, sl, lsl #3
20010834:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
20010838:	ea4f 01c9 	mov.w	r1, r9, lsl #3
2001083c:	4689      	mov	r9, r1
2001083e:	4692      	mov	sl, r2
20010840:	eb1b 0509 	adds.w	r5, fp, r9
20010844:	eb4c 060a 	adc.w	r6, ip, sl
20010848:	687b      	ldr	r3, [r7, #4]
2001084a:	685b      	ldr	r3, [r3, #4]
2001084c:	4619      	mov	r1, r3
2001084e:	f04f 0200 	mov.w	r2, #0
20010852:	f04f 0300 	mov.w	r3, #0
20010856:	f04f 0400 	mov.w	r4, #0
2001085a:	0094      	lsls	r4, r2, #2
2001085c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
20010860:	008b      	lsls	r3, r1, #2
20010862:	461a      	mov	r2, r3
20010864:	4623      	mov	r3, r4
20010866:	4628      	mov	r0, r5
20010868:	4631      	mov	r1, r6
2001086a:	f7fc fd09 	bl	2000d280 <__aeabi_uldivmod>
2001086e:	4603      	mov	r3, r0
20010870:	460c      	mov	r4, r1
20010872:	461a      	mov	r2, r3
20010874:	4b9a      	ldr	r3, [pc, #616]	; (20010ae0 <UART_SetConfig+0x6f4>)
20010876:	fba3 1302 	umull	r1, r3, r3, r2
2001087a:	095b      	lsrs	r3, r3, #5
2001087c:	2164      	movs	r1, #100	; 0x64
2001087e:	fb01 f303 	mul.w	r3, r1, r3
20010882:	1ad3      	subs	r3, r2, r3
20010884:	011b      	lsls	r3, r3, #4
20010886:	3332      	adds	r3, #50	; 0x32
20010888:	4a95      	ldr	r2, [pc, #596]	; (20010ae0 <UART_SetConfig+0x6f4>)
2001088a:	fba2 2303 	umull	r2, r3, r2, r3
2001088e:	095b      	lsrs	r3, r3, #5
20010890:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
20010894:	4498      	add	r8, r3
20010896:	68bb      	ldr	r3, [r7, #8]
20010898:	469b      	mov	fp, r3
2001089a:	f04f 0c00 	mov.w	ip, #0
2001089e:	46d9      	mov	r9, fp
200108a0:	46e2      	mov	sl, ip
200108a2:	eb19 0309 	adds.w	r3, r9, r9
200108a6:	eb4a 040a 	adc.w	r4, sl, sl
200108aa:	4699      	mov	r9, r3
200108ac:	46a2      	mov	sl, r4
200108ae:	eb19 090b 	adds.w	r9, r9, fp
200108b2:	eb4a 0a0c 	adc.w	sl, sl, ip
200108b6:	f04f 0100 	mov.w	r1, #0
200108ba:	f04f 0200 	mov.w	r2, #0
200108be:	ea4f 02ca 	mov.w	r2, sl, lsl #3
200108c2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
200108c6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
200108ca:	4689      	mov	r9, r1
200108cc:	4692      	mov	sl, r2
200108ce:	eb1b 0509 	adds.w	r5, fp, r9
200108d2:	eb4c 060a 	adc.w	r6, ip, sl
200108d6:	687b      	ldr	r3, [r7, #4]
200108d8:	685b      	ldr	r3, [r3, #4]
200108da:	4619      	mov	r1, r3
200108dc:	f04f 0200 	mov.w	r2, #0
200108e0:	f04f 0300 	mov.w	r3, #0
200108e4:	f04f 0400 	mov.w	r4, #0
200108e8:	0094      	lsls	r4, r2, #2
200108ea:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
200108ee:	008b      	lsls	r3, r1, #2
200108f0:	461a      	mov	r2, r3
200108f2:	4623      	mov	r3, r4
200108f4:	4628      	mov	r0, r5
200108f6:	4631      	mov	r1, r6
200108f8:	f7fc fcc2 	bl	2000d280 <__aeabi_uldivmod>
200108fc:	4603      	mov	r3, r0
200108fe:	460c      	mov	r4, r1
20010900:	461a      	mov	r2, r3
20010902:	4b77      	ldr	r3, [pc, #476]	; (20010ae0 <UART_SetConfig+0x6f4>)
20010904:	fba3 1302 	umull	r1, r3, r3, r2
20010908:	095b      	lsrs	r3, r3, #5
2001090a:	2164      	movs	r1, #100	; 0x64
2001090c:	fb01 f303 	mul.w	r3, r1, r3
20010910:	1ad3      	subs	r3, r2, r3
20010912:	011b      	lsls	r3, r3, #4
20010914:	3332      	adds	r3, #50	; 0x32
20010916:	4a72      	ldr	r2, [pc, #456]	; (20010ae0 <UART_SetConfig+0x6f4>)
20010918:	fba2 2303 	umull	r2, r3, r2, r3
2001091c:	095b      	lsrs	r3, r3, #5
2001091e:	f003 020f 	and.w	r2, r3, #15
20010922:	687b      	ldr	r3, [r7, #4]
20010924:	681b      	ldr	r3, [r3, #0]
20010926:	4442      	add	r2, r8
20010928:	609a      	str	r2, [r3, #8]
2001092a:	e0d0      	b.n	20010ace <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
2001092c:	f7fe fe9c 	bl	2000f668 <HAL_RCC_GetPCLK1Freq>
20010930:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
20010932:	68bb      	ldr	r3, [r7, #8]
20010934:	469a      	mov	sl, r3
20010936:	f04f 0b00 	mov.w	fp, #0
2001093a:	46d0      	mov	r8, sl
2001093c:	46d9      	mov	r9, fp
2001093e:	eb18 0308 	adds.w	r3, r8, r8
20010942:	eb49 0409 	adc.w	r4, r9, r9
20010946:	4698      	mov	r8, r3
20010948:	46a1      	mov	r9, r4
2001094a:	eb18 080a 	adds.w	r8, r8, sl
2001094e:	eb49 090b 	adc.w	r9, r9, fp
20010952:	f04f 0100 	mov.w	r1, #0
20010956:	f04f 0200 	mov.w	r2, #0
2001095a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
2001095e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
20010962:	ea4f 01c8 	mov.w	r1, r8, lsl #3
20010966:	4688      	mov	r8, r1
20010968:	4691      	mov	r9, r2
2001096a:	eb1a 0508 	adds.w	r5, sl, r8
2001096e:	eb4b 0609 	adc.w	r6, fp, r9
20010972:	687b      	ldr	r3, [r7, #4]
20010974:	685b      	ldr	r3, [r3, #4]
20010976:	4619      	mov	r1, r3
20010978:	f04f 0200 	mov.w	r2, #0
2001097c:	f04f 0300 	mov.w	r3, #0
20010980:	f04f 0400 	mov.w	r4, #0
20010984:	0094      	lsls	r4, r2, #2
20010986:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
2001098a:	008b      	lsls	r3, r1, #2
2001098c:	461a      	mov	r2, r3
2001098e:	4623      	mov	r3, r4
20010990:	4628      	mov	r0, r5
20010992:	4631      	mov	r1, r6
20010994:	f7fc fc74 	bl	2000d280 <__aeabi_uldivmod>
20010998:	4603      	mov	r3, r0
2001099a:	460c      	mov	r4, r1
2001099c:	461a      	mov	r2, r3
2001099e:	4b50      	ldr	r3, [pc, #320]	; (20010ae0 <UART_SetConfig+0x6f4>)
200109a0:	fba3 2302 	umull	r2, r3, r3, r2
200109a4:	095b      	lsrs	r3, r3, #5
200109a6:	ea4f 1803 	mov.w	r8, r3, lsl #4
200109aa:	68bb      	ldr	r3, [r7, #8]
200109ac:	469b      	mov	fp, r3
200109ae:	f04f 0c00 	mov.w	ip, #0
200109b2:	46d9      	mov	r9, fp
200109b4:	46e2      	mov	sl, ip
200109b6:	eb19 0309 	adds.w	r3, r9, r9
200109ba:	eb4a 040a 	adc.w	r4, sl, sl
200109be:	4699      	mov	r9, r3
200109c0:	46a2      	mov	sl, r4
200109c2:	eb19 090b 	adds.w	r9, r9, fp
200109c6:	eb4a 0a0c 	adc.w	sl, sl, ip
200109ca:	f04f 0100 	mov.w	r1, #0
200109ce:	f04f 0200 	mov.w	r2, #0
200109d2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
200109d6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
200109da:	ea4f 01c9 	mov.w	r1, r9, lsl #3
200109de:	4689      	mov	r9, r1
200109e0:	4692      	mov	sl, r2
200109e2:	eb1b 0509 	adds.w	r5, fp, r9
200109e6:	eb4c 060a 	adc.w	r6, ip, sl
200109ea:	687b      	ldr	r3, [r7, #4]
200109ec:	685b      	ldr	r3, [r3, #4]
200109ee:	4619      	mov	r1, r3
200109f0:	f04f 0200 	mov.w	r2, #0
200109f4:	f04f 0300 	mov.w	r3, #0
200109f8:	f04f 0400 	mov.w	r4, #0
200109fc:	0094      	lsls	r4, r2, #2
200109fe:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
20010a02:	008b      	lsls	r3, r1, #2
20010a04:	461a      	mov	r2, r3
20010a06:	4623      	mov	r3, r4
20010a08:	4628      	mov	r0, r5
20010a0a:	4631      	mov	r1, r6
20010a0c:	f7fc fc38 	bl	2000d280 <__aeabi_uldivmod>
20010a10:	4603      	mov	r3, r0
20010a12:	460c      	mov	r4, r1
20010a14:	461a      	mov	r2, r3
20010a16:	4b32      	ldr	r3, [pc, #200]	; (20010ae0 <UART_SetConfig+0x6f4>)
20010a18:	fba3 1302 	umull	r1, r3, r3, r2
20010a1c:	095b      	lsrs	r3, r3, #5
20010a1e:	2164      	movs	r1, #100	; 0x64
20010a20:	fb01 f303 	mul.w	r3, r1, r3
20010a24:	1ad3      	subs	r3, r2, r3
20010a26:	011b      	lsls	r3, r3, #4
20010a28:	3332      	adds	r3, #50	; 0x32
20010a2a:	4a2d      	ldr	r2, [pc, #180]	; (20010ae0 <UART_SetConfig+0x6f4>)
20010a2c:	fba2 2303 	umull	r2, r3, r2, r3
20010a30:	095b      	lsrs	r3, r3, #5
20010a32:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
20010a36:	4498      	add	r8, r3
20010a38:	68bb      	ldr	r3, [r7, #8]
20010a3a:	469b      	mov	fp, r3
20010a3c:	f04f 0c00 	mov.w	ip, #0
20010a40:	46d9      	mov	r9, fp
20010a42:	46e2      	mov	sl, ip
20010a44:	eb19 0309 	adds.w	r3, r9, r9
20010a48:	eb4a 040a 	adc.w	r4, sl, sl
20010a4c:	4699      	mov	r9, r3
20010a4e:	46a2      	mov	sl, r4
20010a50:	eb19 090b 	adds.w	r9, r9, fp
20010a54:	eb4a 0a0c 	adc.w	sl, sl, ip
20010a58:	f04f 0100 	mov.w	r1, #0
20010a5c:	f04f 0200 	mov.w	r2, #0
20010a60:	ea4f 02ca 	mov.w	r2, sl, lsl #3
20010a64:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
20010a68:	ea4f 01c9 	mov.w	r1, r9, lsl #3
20010a6c:	4689      	mov	r9, r1
20010a6e:	4692      	mov	sl, r2
20010a70:	eb1b 0509 	adds.w	r5, fp, r9
20010a74:	eb4c 060a 	adc.w	r6, ip, sl
20010a78:	687b      	ldr	r3, [r7, #4]
20010a7a:	685b      	ldr	r3, [r3, #4]
20010a7c:	4619      	mov	r1, r3
20010a7e:	f04f 0200 	mov.w	r2, #0
20010a82:	f04f 0300 	mov.w	r3, #0
20010a86:	f04f 0400 	mov.w	r4, #0
20010a8a:	0094      	lsls	r4, r2, #2
20010a8c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
20010a90:	008b      	lsls	r3, r1, #2
20010a92:	461a      	mov	r2, r3
20010a94:	4623      	mov	r3, r4
20010a96:	4628      	mov	r0, r5
20010a98:	4631      	mov	r1, r6
20010a9a:	f7fc fbf1 	bl	2000d280 <__aeabi_uldivmod>
20010a9e:	4603      	mov	r3, r0
20010aa0:	460c      	mov	r4, r1
20010aa2:	461a      	mov	r2, r3
20010aa4:	4b0e      	ldr	r3, [pc, #56]	; (20010ae0 <UART_SetConfig+0x6f4>)
20010aa6:	fba3 1302 	umull	r1, r3, r3, r2
20010aaa:	095b      	lsrs	r3, r3, #5
20010aac:	2164      	movs	r1, #100	; 0x64
20010aae:	fb01 f303 	mul.w	r3, r1, r3
20010ab2:	1ad3      	subs	r3, r2, r3
20010ab4:	011b      	lsls	r3, r3, #4
20010ab6:	3332      	adds	r3, #50	; 0x32
20010ab8:	4a09      	ldr	r2, [pc, #36]	; (20010ae0 <UART_SetConfig+0x6f4>)
20010aba:	fba2 2303 	umull	r2, r3, r2, r3
20010abe:	095b      	lsrs	r3, r3, #5
20010ac0:	f003 020f 	and.w	r2, r3, #15
20010ac4:	687b      	ldr	r3, [r7, #4]
20010ac6:	681b      	ldr	r3, [r3, #0]
20010ac8:	4442      	add	r2, r8
20010aca:	609a      	str	r2, [r3, #8]
}
20010acc:	e7ff      	b.n	20010ace <UART_SetConfig+0x6e2>
20010ace:	bf00      	nop
20010ad0:	3714      	adds	r7, #20
20010ad2:	46bd      	mov	sp, r7
20010ad4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
20010ad8:	40011000 	.word	0x40011000
20010adc:	40011400 	.word	0x40011400
20010ae0:	51eb851f 	.word	0x51eb851f

20010ae4 <__errno>:
20010ae4:	4b01      	ldr	r3, [pc, #4]	; (20010aec <__errno+0x8>)
20010ae6:	6818      	ldr	r0, [r3, #0]
20010ae8:	4770      	bx	lr
20010aea:	bf00      	nop
20010aec:	20011818 	.word	0x20011818

20010af0 <__libc_init_array>:
20010af0:	b570      	push	{r4, r5, r6, lr}
20010af2:	4e0d      	ldr	r6, [pc, #52]	; (20010b28 <__libc_init_array+0x38>)
20010af4:	4c0d      	ldr	r4, [pc, #52]	; (20010b2c <__libc_init_array+0x3c>)
20010af6:	1ba4      	subs	r4, r4, r6
20010af8:	10a4      	asrs	r4, r4, #2
20010afa:	2500      	movs	r5, #0
20010afc:	42a5      	cmp	r5, r4
20010afe:	d109      	bne.n	20010b14 <__libc_init_array+0x24>
20010b00:	4e0b      	ldr	r6, [pc, #44]	; (20010b30 <__libc_init_array+0x40>)
20010b02:	4c0c      	ldr	r4, [pc, #48]	; (20010b34 <__libc_init_array+0x44>)
20010b04:	f000 fc26 	bl	20011354 <_init>
20010b08:	1ba4      	subs	r4, r4, r6
20010b0a:	10a4      	asrs	r4, r4, #2
20010b0c:	2500      	movs	r5, #0
20010b0e:	42a5      	cmp	r5, r4
20010b10:	d105      	bne.n	20010b1e <__libc_init_array+0x2e>
20010b12:	bd70      	pop	{r4, r5, r6, pc}
20010b14:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
20010b18:	4798      	blx	r3
20010b1a:	3501      	adds	r5, #1
20010b1c:	e7ee      	b.n	20010afc <__libc_init_array+0xc>
20010b1e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
20010b22:	4798      	blx	r3
20010b24:	3501      	adds	r5, #1
20010b26:	e7f2      	b.n	20010b0e <__libc_init_array+0x1e>
20010b28:	200117f4 	.word	0x200117f4
20010b2c:	200117f4 	.word	0x200117f4
20010b30:	200117f4 	.word	0x200117f4
20010b34:	200117f8 	.word	0x200117f8

20010b38 <memset>:
20010b38:	4402      	add	r2, r0
20010b3a:	4603      	mov	r3, r0
20010b3c:	4293      	cmp	r3, r2
20010b3e:	d100      	bne.n	20010b42 <memset+0xa>
20010b40:	4770      	bx	lr
20010b42:	f803 1b01 	strb.w	r1, [r3], #1
20010b46:	e7f9      	b.n	20010b3c <memset+0x4>

20010b48 <siprintf>:
20010b48:	b40e      	push	{r1, r2, r3}
20010b4a:	b500      	push	{lr}
20010b4c:	b09c      	sub	sp, #112	; 0x70
20010b4e:	ab1d      	add	r3, sp, #116	; 0x74
20010b50:	9002      	str	r0, [sp, #8]
20010b52:	9006      	str	r0, [sp, #24]
20010b54:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
20010b58:	4809      	ldr	r0, [pc, #36]	; (20010b80 <siprintf+0x38>)
20010b5a:	9107      	str	r1, [sp, #28]
20010b5c:	9104      	str	r1, [sp, #16]
20010b5e:	4909      	ldr	r1, [pc, #36]	; (20010b84 <siprintf+0x3c>)
20010b60:	f853 2b04 	ldr.w	r2, [r3], #4
20010b64:	9105      	str	r1, [sp, #20]
20010b66:	6800      	ldr	r0, [r0, #0]
20010b68:	9301      	str	r3, [sp, #4]
20010b6a:	a902      	add	r1, sp, #8
20010b6c:	f000 f866 	bl	20010c3c <_svfiprintf_r>
20010b70:	9b02      	ldr	r3, [sp, #8]
20010b72:	2200      	movs	r2, #0
20010b74:	701a      	strb	r2, [r3, #0]
20010b76:	b01c      	add	sp, #112	; 0x70
20010b78:	f85d eb04 	ldr.w	lr, [sp], #4
20010b7c:	b003      	add	sp, #12
20010b7e:	4770      	bx	lr
20010b80:	20011818 	.word	0x20011818
20010b84:	ffff0208 	.word	0xffff0208

20010b88 <__ssputs_r>:
20010b88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
20010b8c:	688e      	ldr	r6, [r1, #8]
20010b8e:	429e      	cmp	r6, r3
20010b90:	4682      	mov	sl, r0
20010b92:	460c      	mov	r4, r1
20010b94:	4690      	mov	r8, r2
20010b96:	4699      	mov	r9, r3
20010b98:	d837      	bhi.n	20010c0a <__ssputs_r+0x82>
20010b9a:	898a      	ldrh	r2, [r1, #12]
20010b9c:	f412 6f90 	tst.w	r2, #1152	; 0x480
20010ba0:	d031      	beq.n	20010c06 <__ssputs_r+0x7e>
20010ba2:	6825      	ldr	r5, [r4, #0]
20010ba4:	6909      	ldr	r1, [r1, #16]
20010ba6:	1a6f      	subs	r7, r5, r1
20010ba8:	6965      	ldr	r5, [r4, #20]
20010baa:	2302      	movs	r3, #2
20010bac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
20010bb0:	fb95 f5f3 	sdiv	r5, r5, r3
20010bb4:	f109 0301 	add.w	r3, r9, #1
20010bb8:	443b      	add	r3, r7
20010bba:	429d      	cmp	r5, r3
20010bbc:	bf38      	it	cc
20010bbe:	461d      	movcc	r5, r3
20010bc0:	0553      	lsls	r3, r2, #21
20010bc2:	d530      	bpl.n	20010c26 <__ssputs_r+0x9e>
20010bc4:	4629      	mov	r1, r5
20010bc6:	f000 fb2b 	bl	20011220 <_malloc_r>
20010bca:	4606      	mov	r6, r0
20010bcc:	b950      	cbnz	r0, 20010be4 <__ssputs_r+0x5c>
20010bce:	230c      	movs	r3, #12
20010bd0:	f8ca 3000 	str.w	r3, [sl]
20010bd4:	89a3      	ldrh	r3, [r4, #12]
20010bd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
20010bda:	81a3      	strh	r3, [r4, #12]
20010bdc:	f04f 30ff 	mov.w	r0, #4294967295
20010be0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
20010be4:	463a      	mov	r2, r7
20010be6:	6921      	ldr	r1, [r4, #16]
20010be8:	f000 faa8 	bl	2001113c <memcpy>
20010bec:	89a3      	ldrh	r3, [r4, #12]
20010bee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
20010bf2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
20010bf6:	81a3      	strh	r3, [r4, #12]
20010bf8:	6126      	str	r6, [r4, #16]
20010bfa:	6165      	str	r5, [r4, #20]
20010bfc:	443e      	add	r6, r7
20010bfe:	1bed      	subs	r5, r5, r7
20010c00:	6026      	str	r6, [r4, #0]
20010c02:	60a5      	str	r5, [r4, #8]
20010c04:	464e      	mov	r6, r9
20010c06:	454e      	cmp	r6, r9
20010c08:	d900      	bls.n	20010c0c <__ssputs_r+0x84>
20010c0a:	464e      	mov	r6, r9
20010c0c:	4632      	mov	r2, r6
20010c0e:	4641      	mov	r1, r8
20010c10:	6820      	ldr	r0, [r4, #0]
20010c12:	f000 fa9e 	bl	20011152 <memmove>
20010c16:	68a3      	ldr	r3, [r4, #8]
20010c18:	1b9b      	subs	r3, r3, r6
20010c1a:	60a3      	str	r3, [r4, #8]
20010c1c:	6823      	ldr	r3, [r4, #0]
20010c1e:	441e      	add	r6, r3
20010c20:	6026      	str	r6, [r4, #0]
20010c22:	2000      	movs	r0, #0
20010c24:	e7dc      	b.n	20010be0 <__ssputs_r+0x58>
20010c26:	462a      	mov	r2, r5
20010c28:	f000 fb54 	bl	200112d4 <_realloc_r>
20010c2c:	4606      	mov	r6, r0
20010c2e:	2800      	cmp	r0, #0
20010c30:	d1e2      	bne.n	20010bf8 <__ssputs_r+0x70>
20010c32:	6921      	ldr	r1, [r4, #16]
20010c34:	4650      	mov	r0, sl
20010c36:	f000 faa5 	bl	20011184 <_free_r>
20010c3a:	e7c8      	b.n	20010bce <__ssputs_r+0x46>

20010c3c <_svfiprintf_r>:
20010c3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
20010c40:	461d      	mov	r5, r3
20010c42:	898b      	ldrh	r3, [r1, #12]
20010c44:	061f      	lsls	r7, r3, #24
20010c46:	b09d      	sub	sp, #116	; 0x74
20010c48:	4680      	mov	r8, r0
20010c4a:	460c      	mov	r4, r1
20010c4c:	4616      	mov	r6, r2
20010c4e:	d50f      	bpl.n	20010c70 <_svfiprintf_r+0x34>
20010c50:	690b      	ldr	r3, [r1, #16]
20010c52:	b96b      	cbnz	r3, 20010c70 <_svfiprintf_r+0x34>
20010c54:	2140      	movs	r1, #64	; 0x40
20010c56:	f000 fae3 	bl	20011220 <_malloc_r>
20010c5a:	6020      	str	r0, [r4, #0]
20010c5c:	6120      	str	r0, [r4, #16]
20010c5e:	b928      	cbnz	r0, 20010c6c <_svfiprintf_r+0x30>
20010c60:	230c      	movs	r3, #12
20010c62:	f8c8 3000 	str.w	r3, [r8]
20010c66:	f04f 30ff 	mov.w	r0, #4294967295
20010c6a:	e0c8      	b.n	20010dfe <_svfiprintf_r+0x1c2>
20010c6c:	2340      	movs	r3, #64	; 0x40
20010c6e:	6163      	str	r3, [r4, #20]
20010c70:	2300      	movs	r3, #0
20010c72:	9309      	str	r3, [sp, #36]	; 0x24
20010c74:	2320      	movs	r3, #32
20010c76:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
20010c7a:	2330      	movs	r3, #48	; 0x30
20010c7c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
20010c80:	9503      	str	r5, [sp, #12]
20010c82:	f04f 0b01 	mov.w	fp, #1
20010c86:	4637      	mov	r7, r6
20010c88:	463d      	mov	r5, r7
20010c8a:	f815 3b01 	ldrb.w	r3, [r5], #1
20010c8e:	b10b      	cbz	r3, 20010c94 <_svfiprintf_r+0x58>
20010c90:	2b25      	cmp	r3, #37	; 0x25
20010c92:	d13e      	bne.n	20010d12 <_svfiprintf_r+0xd6>
20010c94:	ebb7 0a06 	subs.w	sl, r7, r6
20010c98:	d00b      	beq.n	20010cb2 <_svfiprintf_r+0x76>
20010c9a:	4653      	mov	r3, sl
20010c9c:	4632      	mov	r2, r6
20010c9e:	4621      	mov	r1, r4
20010ca0:	4640      	mov	r0, r8
20010ca2:	f7ff ff71 	bl	20010b88 <__ssputs_r>
20010ca6:	3001      	adds	r0, #1
20010ca8:	f000 80a4 	beq.w	20010df4 <_svfiprintf_r+0x1b8>
20010cac:	9b09      	ldr	r3, [sp, #36]	; 0x24
20010cae:	4453      	add	r3, sl
20010cb0:	9309      	str	r3, [sp, #36]	; 0x24
20010cb2:	783b      	ldrb	r3, [r7, #0]
20010cb4:	2b00      	cmp	r3, #0
20010cb6:	f000 809d 	beq.w	20010df4 <_svfiprintf_r+0x1b8>
20010cba:	2300      	movs	r3, #0
20010cbc:	f04f 32ff 	mov.w	r2, #4294967295
20010cc0:	e9cd 2305 	strd	r2, r3, [sp, #20]
20010cc4:	9304      	str	r3, [sp, #16]
20010cc6:	9307      	str	r3, [sp, #28]
20010cc8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
20010ccc:	931a      	str	r3, [sp, #104]	; 0x68
20010cce:	462f      	mov	r7, r5
20010cd0:	2205      	movs	r2, #5
20010cd2:	f817 1b01 	ldrb.w	r1, [r7], #1
20010cd6:	4850      	ldr	r0, [pc, #320]	; (20010e18 <_svfiprintf_r+0x1dc>)
20010cd8:	f7fc fa82 	bl	2000d1e0 <memchr>
20010cdc:	9b04      	ldr	r3, [sp, #16]
20010cde:	b9d0      	cbnz	r0, 20010d16 <_svfiprintf_r+0xda>
20010ce0:	06d9      	lsls	r1, r3, #27
20010ce2:	bf44      	itt	mi
20010ce4:	2220      	movmi	r2, #32
20010ce6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
20010cea:	071a      	lsls	r2, r3, #28
20010cec:	bf44      	itt	mi
20010cee:	222b      	movmi	r2, #43	; 0x2b
20010cf0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
20010cf4:	782a      	ldrb	r2, [r5, #0]
20010cf6:	2a2a      	cmp	r2, #42	; 0x2a
20010cf8:	d015      	beq.n	20010d26 <_svfiprintf_r+0xea>
20010cfa:	9a07      	ldr	r2, [sp, #28]
20010cfc:	462f      	mov	r7, r5
20010cfe:	2000      	movs	r0, #0
20010d00:	250a      	movs	r5, #10
20010d02:	4639      	mov	r1, r7
20010d04:	f811 3b01 	ldrb.w	r3, [r1], #1
20010d08:	3b30      	subs	r3, #48	; 0x30
20010d0a:	2b09      	cmp	r3, #9
20010d0c:	d94d      	bls.n	20010daa <_svfiprintf_r+0x16e>
20010d0e:	b1b8      	cbz	r0, 20010d40 <_svfiprintf_r+0x104>
20010d10:	e00f      	b.n	20010d32 <_svfiprintf_r+0xf6>
20010d12:	462f      	mov	r7, r5
20010d14:	e7b8      	b.n	20010c88 <_svfiprintf_r+0x4c>
20010d16:	4a40      	ldr	r2, [pc, #256]	; (20010e18 <_svfiprintf_r+0x1dc>)
20010d18:	1a80      	subs	r0, r0, r2
20010d1a:	fa0b f000 	lsl.w	r0, fp, r0
20010d1e:	4318      	orrs	r0, r3
20010d20:	9004      	str	r0, [sp, #16]
20010d22:	463d      	mov	r5, r7
20010d24:	e7d3      	b.n	20010cce <_svfiprintf_r+0x92>
20010d26:	9a03      	ldr	r2, [sp, #12]
20010d28:	1d11      	adds	r1, r2, #4
20010d2a:	6812      	ldr	r2, [r2, #0]
20010d2c:	9103      	str	r1, [sp, #12]
20010d2e:	2a00      	cmp	r2, #0
20010d30:	db01      	blt.n	20010d36 <_svfiprintf_r+0xfa>
20010d32:	9207      	str	r2, [sp, #28]
20010d34:	e004      	b.n	20010d40 <_svfiprintf_r+0x104>
20010d36:	4252      	negs	r2, r2
20010d38:	f043 0302 	orr.w	r3, r3, #2
20010d3c:	9207      	str	r2, [sp, #28]
20010d3e:	9304      	str	r3, [sp, #16]
20010d40:	783b      	ldrb	r3, [r7, #0]
20010d42:	2b2e      	cmp	r3, #46	; 0x2e
20010d44:	d10c      	bne.n	20010d60 <_svfiprintf_r+0x124>
20010d46:	787b      	ldrb	r3, [r7, #1]
20010d48:	2b2a      	cmp	r3, #42	; 0x2a
20010d4a:	d133      	bne.n	20010db4 <_svfiprintf_r+0x178>
20010d4c:	9b03      	ldr	r3, [sp, #12]
20010d4e:	1d1a      	adds	r2, r3, #4
20010d50:	681b      	ldr	r3, [r3, #0]
20010d52:	9203      	str	r2, [sp, #12]
20010d54:	2b00      	cmp	r3, #0
20010d56:	bfb8      	it	lt
20010d58:	f04f 33ff 	movlt.w	r3, #4294967295
20010d5c:	3702      	adds	r7, #2
20010d5e:	9305      	str	r3, [sp, #20]
20010d60:	4d2e      	ldr	r5, [pc, #184]	; (20010e1c <_svfiprintf_r+0x1e0>)
20010d62:	7839      	ldrb	r1, [r7, #0]
20010d64:	2203      	movs	r2, #3
20010d66:	4628      	mov	r0, r5
20010d68:	f7fc fa3a 	bl	2000d1e0 <memchr>
20010d6c:	b138      	cbz	r0, 20010d7e <_svfiprintf_r+0x142>
20010d6e:	2340      	movs	r3, #64	; 0x40
20010d70:	1b40      	subs	r0, r0, r5
20010d72:	fa03 f000 	lsl.w	r0, r3, r0
20010d76:	9b04      	ldr	r3, [sp, #16]
20010d78:	4303      	orrs	r3, r0
20010d7a:	3701      	adds	r7, #1
20010d7c:	9304      	str	r3, [sp, #16]
20010d7e:	7839      	ldrb	r1, [r7, #0]
20010d80:	4827      	ldr	r0, [pc, #156]	; (20010e20 <_svfiprintf_r+0x1e4>)
20010d82:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
20010d86:	2206      	movs	r2, #6
20010d88:	1c7e      	adds	r6, r7, #1
20010d8a:	f7fc fa29 	bl	2000d1e0 <memchr>
20010d8e:	2800      	cmp	r0, #0
20010d90:	d038      	beq.n	20010e04 <_svfiprintf_r+0x1c8>
20010d92:	4b24      	ldr	r3, [pc, #144]	; (20010e24 <_svfiprintf_r+0x1e8>)
20010d94:	bb13      	cbnz	r3, 20010ddc <_svfiprintf_r+0x1a0>
20010d96:	9b03      	ldr	r3, [sp, #12]
20010d98:	3307      	adds	r3, #7
20010d9a:	f023 0307 	bic.w	r3, r3, #7
20010d9e:	3308      	adds	r3, #8
20010da0:	9303      	str	r3, [sp, #12]
20010da2:	9b09      	ldr	r3, [sp, #36]	; 0x24
20010da4:	444b      	add	r3, r9
20010da6:	9309      	str	r3, [sp, #36]	; 0x24
20010da8:	e76d      	b.n	20010c86 <_svfiprintf_r+0x4a>
20010daa:	fb05 3202 	mla	r2, r5, r2, r3
20010dae:	2001      	movs	r0, #1
20010db0:	460f      	mov	r7, r1
20010db2:	e7a6      	b.n	20010d02 <_svfiprintf_r+0xc6>
20010db4:	2300      	movs	r3, #0
20010db6:	3701      	adds	r7, #1
20010db8:	9305      	str	r3, [sp, #20]
20010dba:	4619      	mov	r1, r3
20010dbc:	250a      	movs	r5, #10
20010dbe:	4638      	mov	r0, r7
20010dc0:	f810 2b01 	ldrb.w	r2, [r0], #1
20010dc4:	3a30      	subs	r2, #48	; 0x30
20010dc6:	2a09      	cmp	r2, #9
20010dc8:	d903      	bls.n	20010dd2 <_svfiprintf_r+0x196>
20010dca:	2b00      	cmp	r3, #0
20010dcc:	d0c8      	beq.n	20010d60 <_svfiprintf_r+0x124>
20010dce:	9105      	str	r1, [sp, #20]
20010dd0:	e7c6      	b.n	20010d60 <_svfiprintf_r+0x124>
20010dd2:	fb05 2101 	mla	r1, r5, r1, r2
20010dd6:	2301      	movs	r3, #1
20010dd8:	4607      	mov	r7, r0
20010dda:	e7f0      	b.n	20010dbe <_svfiprintf_r+0x182>
20010ddc:	ab03      	add	r3, sp, #12
20010dde:	9300      	str	r3, [sp, #0]
20010de0:	4622      	mov	r2, r4
20010de2:	4b11      	ldr	r3, [pc, #68]	; (20010e28 <_svfiprintf_r+0x1ec>)
20010de4:	a904      	add	r1, sp, #16
20010de6:	4640      	mov	r0, r8
20010de8:	f3af 8000 	nop.w
20010dec:	f1b0 3fff 	cmp.w	r0, #4294967295
20010df0:	4681      	mov	r9, r0
20010df2:	d1d6      	bne.n	20010da2 <_svfiprintf_r+0x166>
20010df4:	89a3      	ldrh	r3, [r4, #12]
20010df6:	065b      	lsls	r3, r3, #25
20010df8:	f53f af35 	bmi.w	20010c66 <_svfiprintf_r+0x2a>
20010dfc:	9809      	ldr	r0, [sp, #36]	; 0x24
20010dfe:	b01d      	add	sp, #116	; 0x74
20010e00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
20010e04:	ab03      	add	r3, sp, #12
20010e06:	9300      	str	r3, [sp, #0]
20010e08:	4622      	mov	r2, r4
20010e0a:	4b07      	ldr	r3, [pc, #28]	; (20010e28 <_svfiprintf_r+0x1ec>)
20010e0c:	a904      	add	r1, sp, #16
20010e0e:	4640      	mov	r0, r8
20010e10:	f000 f882 	bl	20010f18 <_printf_i>
20010e14:	e7ea      	b.n	20010dec <_svfiprintf_r+0x1b0>
20010e16:	bf00      	nop
20010e18:	200117b8 	.word	0x200117b8
20010e1c:	200117be 	.word	0x200117be
20010e20:	200117c2 	.word	0x200117c2
20010e24:	00000000 	.word	0x00000000
20010e28:	20010b89 	.word	0x20010b89

20010e2c <_printf_common>:
20010e2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
20010e30:	4691      	mov	r9, r2
20010e32:	461f      	mov	r7, r3
20010e34:	688a      	ldr	r2, [r1, #8]
20010e36:	690b      	ldr	r3, [r1, #16]
20010e38:	f8dd 8020 	ldr.w	r8, [sp, #32]
20010e3c:	4293      	cmp	r3, r2
20010e3e:	bfb8      	it	lt
20010e40:	4613      	movlt	r3, r2
20010e42:	f8c9 3000 	str.w	r3, [r9]
20010e46:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
20010e4a:	4606      	mov	r6, r0
20010e4c:	460c      	mov	r4, r1
20010e4e:	b112      	cbz	r2, 20010e56 <_printf_common+0x2a>
20010e50:	3301      	adds	r3, #1
20010e52:	f8c9 3000 	str.w	r3, [r9]
20010e56:	6823      	ldr	r3, [r4, #0]
20010e58:	0699      	lsls	r1, r3, #26
20010e5a:	bf42      	ittt	mi
20010e5c:	f8d9 3000 	ldrmi.w	r3, [r9]
20010e60:	3302      	addmi	r3, #2
20010e62:	f8c9 3000 	strmi.w	r3, [r9]
20010e66:	6825      	ldr	r5, [r4, #0]
20010e68:	f015 0506 	ands.w	r5, r5, #6
20010e6c:	d107      	bne.n	20010e7e <_printf_common+0x52>
20010e6e:	f104 0a19 	add.w	sl, r4, #25
20010e72:	68e3      	ldr	r3, [r4, #12]
20010e74:	f8d9 2000 	ldr.w	r2, [r9]
20010e78:	1a9b      	subs	r3, r3, r2
20010e7a:	42ab      	cmp	r3, r5
20010e7c:	dc28      	bgt.n	20010ed0 <_printf_common+0xa4>
20010e7e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
20010e82:	6822      	ldr	r2, [r4, #0]
20010e84:	3300      	adds	r3, #0
20010e86:	bf18      	it	ne
20010e88:	2301      	movne	r3, #1
20010e8a:	0692      	lsls	r2, r2, #26
20010e8c:	d42d      	bmi.n	20010eea <_printf_common+0xbe>
20010e8e:	f104 0243 	add.w	r2, r4, #67	; 0x43
20010e92:	4639      	mov	r1, r7
20010e94:	4630      	mov	r0, r6
20010e96:	47c0      	blx	r8
20010e98:	3001      	adds	r0, #1
20010e9a:	d020      	beq.n	20010ede <_printf_common+0xb2>
20010e9c:	6823      	ldr	r3, [r4, #0]
20010e9e:	68e5      	ldr	r5, [r4, #12]
20010ea0:	f8d9 2000 	ldr.w	r2, [r9]
20010ea4:	f003 0306 	and.w	r3, r3, #6
20010ea8:	2b04      	cmp	r3, #4
20010eaa:	bf08      	it	eq
20010eac:	1aad      	subeq	r5, r5, r2
20010eae:	68a3      	ldr	r3, [r4, #8]
20010eb0:	6922      	ldr	r2, [r4, #16]
20010eb2:	bf0c      	ite	eq
20010eb4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
20010eb8:	2500      	movne	r5, #0
20010eba:	4293      	cmp	r3, r2
20010ebc:	bfc4      	itt	gt
20010ebe:	1a9b      	subgt	r3, r3, r2
20010ec0:	18ed      	addgt	r5, r5, r3
20010ec2:	f04f 0900 	mov.w	r9, #0
20010ec6:	341a      	adds	r4, #26
20010ec8:	454d      	cmp	r5, r9
20010eca:	d11a      	bne.n	20010f02 <_printf_common+0xd6>
20010ecc:	2000      	movs	r0, #0
20010ece:	e008      	b.n	20010ee2 <_printf_common+0xb6>
20010ed0:	2301      	movs	r3, #1
20010ed2:	4652      	mov	r2, sl
20010ed4:	4639      	mov	r1, r7
20010ed6:	4630      	mov	r0, r6
20010ed8:	47c0      	blx	r8
20010eda:	3001      	adds	r0, #1
20010edc:	d103      	bne.n	20010ee6 <_printf_common+0xba>
20010ede:	f04f 30ff 	mov.w	r0, #4294967295
20010ee2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
20010ee6:	3501      	adds	r5, #1
20010ee8:	e7c3      	b.n	20010e72 <_printf_common+0x46>
20010eea:	18e1      	adds	r1, r4, r3
20010eec:	1c5a      	adds	r2, r3, #1
20010eee:	2030      	movs	r0, #48	; 0x30
20010ef0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
20010ef4:	4422      	add	r2, r4
20010ef6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
20010efa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
20010efe:	3302      	adds	r3, #2
20010f00:	e7c5      	b.n	20010e8e <_printf_common+0x62>
20010f02:	2301      	movs	r3, #1
20010f04:	4622      	mov	r2, r4
20010f06:	4639      	mov	r1, r7
20010f08:	4630      	mov	r0, r6
20010f0a:	47c0      	blx	r8
20010f0c:	3001      	adds	r0, #1
20010f0e:	d0e6      	beq.n	20010ede <_printf_common+0xb2>
20010f10:	f109 0901 	add.w	r9, r9, #1
20010f14:	e7d8      	b.n	20010ec8 <_printf_common+0x9c>
	...

20010f18 <_printf_i>:
20010f18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
20010f1c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
20010f20:	460c      	mov	r4, r1
20010f22:	7e09      	ldrb	r1, [r1, #24]
20010f24:	b085      	sub	sp, #20
20010f26:	296e      	cmp	r1, #110	; 0x6e
20010f28:	4617      	mov	r7, r2
20010f2a:	4606      	mov	r6, r0
20010f2c:	4698      	mov	r8, r3
20010f2e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
20010f30:	f000 80b3 	beq.w	2001109a <_printf_i+0x182>
20010f34:	d822      	bhi.n	20010f7c <_printf_i+0x64>
20010f36:	2963      	cmp	r1, #99	; 0x63
20010f38:	d036      	beq.n	20010fa8 <_printf_i+0x90>
20010f3a:	d80a      	bhi.n	20010f52 <_printf_i+0x3a>
20010f3c:	2900      	cmp	r1, #0
20010f3e:	f000 80b9 	beq.w	200110b4 <_printf_i+0x19c>
20010f42:	2958      	cmp	r1, #88	; 0x58
20010f44:	f000 8083 	beq.w	2001104e <_printf_i+0x136>
20010f48:	f104 0542 	add.w	r5, r4, #66	; 0x42
20010f4c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
20010f50:	e032      	b.n	20010fb8 <_printf_i+0xa0>
20010f52:	2964      	cmp	r1, #100	; 0x64
20010f54:	d001      	beq.n	20010f5a <_printf_i+0x42>
20010f56:	2969      	cmp	r1, #105	; 0x69
20010f58:	d1f6      	bne.n	20010f48 <_printf_i+0x30>
20010f5a:	6820      	ldr	r0, [r4, #0]
20010f5c:	6813      	ldr	r3, [r2, #0]
20010f5e:	0605      	lsls	r5, r0, #24
20010f60:	f103 0104 	add.w	r1, r3, #4
20010f64:	d52a      	bpl.n	20010fbc <_printf_i+0xa4>
20010f66:	681b      	ldr	r3, [r3, #0]
20010f68:	6011      	str	r1, [r2, #0]
20010f6a:	2b00      	cmp	r3, #0
20010f6c:	da03      	bge.n	20010f76 <_printf_i+0x5e>
20010f6e:	222d      	movs	r2, #45	; 0x2d
20010f70:	425b      	negs	r3, r3
20010f72:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
20010f76:	486f      	ldr	r0, [pc, #444]	; (20011134 <_printf_i+0x21c>)
20010f78:	220a      	movs	r2, #10
20010f7a:	e039      	b.n	20010ff0 <_printf_i+0xd8>
20010f7c:	2973      	cmp	r1, #115	; 0x73
20010f7e:	f000 809d 	beq.w	200110bc <_printf_i+0x1a4>
20010f82:	d808      	bhi.n	20010f96 <_printf_i+0x7e>
20010f84:	296f      	cmp	r1, #111	; 0x6f
20010f86:	d020      	beq.n	20010fca <_printf_i+0xb2>
20010f88:	2970      	cmp	r1, #112	; 0x70
20010f8a:	d1dd      	bne.n	20010f48 <_printf_i+0x30>
20010f8c:	6823      	ldr	r3, [r4, #0]
20010f8e:	f043 0320 	orr.w	r3, r3, #32
20010f92:	6023      	str	r3, [r4, #0]
20010f94:	e003      	b.n	20010f9e <_printf_i+0x86>
20010f96:	2975      	cmp	r1, #117	; 0x75
20010f98:	d017      	beq.n	20010fca <_printf_i+0xb2>
20010f9a:	2978      	cmp	r1, #120	; 0x78
20010f9c:	d1d4      	bne.n	20010f48 <_printf_i+0x30>
20010f9e:	2378      	movs	r3, #120	; 0x78
20010fa0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
20010fa4:	4864      	ldr	r0, [pc, #400]	; (20011138 <_printf_i+0x220>)
20010fa6:	e055      	b.n	20011054 <_printf_i+0x13c>
20010fa8:	6813      	ldr	r3, [r2, #0]
20010faa:	1d19      	adds	r1, r3, #4
20010fac:	681b      	ldr	r3, [r3, #0]
20010fae:	6011      	str	r1, [r2, #0]
20010fb0:	f104 0542 	add.w	r5, r4, #66	; 0x42
20010fb4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
20010fb8:	2301      	movs	r3, #1
20010fba:	e08c      	b.n	200110d6 <_printf_i+0x1be>
20010fbc:	681b      	ldr	r3, [r3, #0]
20010fbe:	6011      	str	r1, [r2, #0]
20010fc0:	f010 0f40 	tst.w	r0, #64	; 0x40
20010fc4:	bf18      	it	ne
20010fc6:	b21b      	sxthne	r3, r3
20010fc8:	e7cf      	b.n	20010f6a <_printf_i+0x52>
20010fca:	6813      	ldr	r3, [r2, #0]
20010fcc:	6825      	ldr	r5, [r4, #0]
20010fce:	1d18      	adds	r0, r3, #4
20010fd0:	6010      	str	r0, [r2, #0]
20010fd2:	0628      	lsls	r0, r5, #24
20010fd4:	d501      	bpl.n	20010fda <_printf_i+0xc2>
20010fd6:	681b      	ldr	r3, [r3, #0]
20010fd8:	e002      	b.n	20010fe0 <_printf_i+0xc8>
20010fda:	0668      	lsls	r0, r5, #25
20010fdc:	d5fb      	bpl.n	20010fd6 <_printf_i+0xbe>
20010fde:	881b      	ldrh	r3, [r3, #0]
20010fe0:	4854      	ldr	r0, [pc, #336]	; (20011134 <_printf_i+0x21c>)
20010fe2:	296f      	cmp	r1, #111	; 0x6f
20010fe4:	bf14      	ite	ne
20010fe6:	220a      	movne	r2, #10
20010fe8:	2208      	moveq	r2, #8
20010fea:	2100      	movs	r1, #0
20010fec:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
20010ff0:	6865      	ldr	r5, [r4, #4]
20010ff2:	60a5      	str	r5, [r4, #8]
20010ff4:	2d00      	cmp	r5, #0
20010ff6:	f2c0 8095 	blt.w	20011124 <_printf_i+0x20c>
20010ffa:	6821      	ldr	r1, [r4, #0]
20010ffc:	f021 0104 	bic.w	r1, r1, #4
20011000:	6021      	str	r1, [r4, #0]
20011002:	2b00      	cmp	r3, #0
20011004:	d13d      	bne.n	20011082 <_printf_i+0x16a>
20011006:	2d00      	cmp	r5, #0
20011008:	f040 808e 	bne.w	20011128 <_printf_i+0x210>
2001100c:	4665      	mov	r5, ip
2001100e:	2a08      	cmp	r2, #8
20011010:	d10b      	bne.n	2001102a <_printf_i+0x112>
20011012:	6823      	ldr	r3, [r4, #0]
20011014:	07db      	lsls	r3, r3, #31
20011016:	d508      	bpl.n	2001102a <_printf_i+0x112>
20011018:	6923      	ldr	r3, [r4, #16]
2001101a:	6862      	ldr	r2, [r4, #4]
2001101c:	429a      	cmp	r2, r3
2001101e:	bfde      	ittt	le
20011020:	2330      	movle	r3, #48	; 0x30
20011022:	f805 3c01 	strble.w	r3, [r5, #-1]
20011026:	f105 35ff 	addle.w	r5, r5, #4294967295
2001102a:	ebac 0305 	sub.w	r3, ip, r5
2001102e:	6123      	str	r3, [r4, #16]
20011030:	f8cd 8000 	str.w	r8, [sp]
20011034:	463b      	mov	r3, r7
20011036:	aa03      	add	r2, sp, #12
20011038:	4621      	mov	r1, r4
2001103a:	4630      	mov	r0, r6
2001103c:	f7ff fef6 	bl	20010e2c <_printf_common>
20011040:	3001      	adds	r0, #1
20011042:	d14d      	bne.n	200110e0 <_printf_i+0x1c8>
20011044:	f04f 30ff 	mov.w	r0, #4294967295
20011048:	b005      	add	sp, #20
2001104a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
2001104e:	4839      	ldr	r0, [pc, #228]	; (20011134 <_printf_i+0x21c>)
20011050:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
20011054:	6813      	ldr	r3, [r2, #0]
20011056:	6821      	ldr	r1, [r4, #0]
20011058:	1d1d      	adds	r5, r3, #4
2001105a:	681b      	ldr	r3, [r3, #0]
2001105c:	6015      	str	r5, [r2, #0]
2001105e:	060a      	lsls	r2, r1, #24
20011060:	d50b      	bpl.n	2001107a <_printf_i+0x162>
20011062:	07ca      	lsls	r2, r1, #31
20011064:	bf44      	itt	mi
20011066:	f041 0120 	orrmi.w	r1, r1, #32
2001106a:	6021      	strmi	r1, [r4, #0]
2001106c:	b91b      	cbnz	r3, 20011076 <_printf_i+0x15e>
2001106e:	6822      	ldr	r2, [r4, #0]
20011070:	f022 0220 	bic.w	r2, r2, #32
20011074:	6022      	str	r2, [r4, #0]
20011076:	2210      	movs	r2, #16
20011078:	e7b7      	b.n	20010fea <_printf_i+0xd2>
2001107a:	064d      	lsls	r5, r1, #25
2001107c:	bf48      	it	mi
2001107e:	b29b      	uxthmi	r3, r3
20011080:	e7ef      	b.n	20011062 <_printf_i+0x14a>
20011082:	4665      	mov	r5, ip
20011084:	fbb3 f1f2 	udiv	r1, r3, r2
20011088:	fb02 3311 	mls	r3, r2, r1, r3
2001108c:	5cc3      	ldrb	r3, [r0, r3]
2001108e:	f805 3d01 	strb.w	r3, [r5, #-1]!
20011092:	460b      	mov	r3, r1
20011094:	2900      	cmp	r1, #0
20011096:	d1f5      	bne.n	20011084 <_printf_i+0x16c>
20011098:	e7b9      	b.n	2001100e <_printf_i+0xf6>
2001109a:	6813      	ldr	r3, [r2, #0]
2001109c:	6825      	ldr	r5, [r4, #0]
2001109e:	6961      	ldr	r1, [r4, #20]
200110a0:	1d18      	adds	r0, r3, #4
200110a2:	6010      	str	r0, [r2, #0]
200110a4:	0628      	lsls	r0, r5, #24
200110a6:	681b      	ldr	r3, [r3, #0]
200110a8:	d501      	bpl.n	200110ae <_printf_i+0x196>
200110aa:	6019      	str	r1, [r3, #0]
200110ac:	e002      	b.n	200110b4 <_printf_i+0x19c>
200110ae:	066a      	lsls	r2, r5, #25
200110b0:	d5fb      	bpl.n	200110aa <_printf_i+0x192>
200110b2:	8019      	strh	r1, [r3, #0]
200110b4:	2300      	movs	r3, #0
200110b6:	6123      	str	r3, [r4, #16]
200110b8:	4665      	mov	r5, ip
200110ba:	e7b9      	b.n	20011030 <_printf_i+0x118>
200110bc:	6813      	ldr	r3, [r2, #0]
200110be:	1d19      	adds	r1, r3, #4
200110c0:	6011      	str	r1, [r2, #0]
200110c2:	681d      	ldr	r5, [r3, #0]
200110c4:	6862      	ldr	r2, [r4, #4]
200110c6:	2100      	movs	r1, #0
200110c8:	4628      	mov	r0, r5
200110ca:	f7fc f889 	bl	2000d1e0 <memchr>
200110ce:	b108      	cbz	r0, 200110d4 <_printf_i+0x1bc>
200110d0:	1b40      	subs	r0, r0, r5
200110d2:	6060      	str	r0, [r4, #4]
200110d4:	6863      	ldr	r3, [r4, #4]
200110d6:	6123      	str	r3, [r4, #16]
200110d8:	2300      	movs	r3, #0
200110da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
200110de:	e7a7      	b.n	20011030 <_printf_i+0x118>
200110e0:	6923      	ldr	r3, [r4, #16]
200110e2:	462a      	mov	r2, r5
200110e4:	4639      	mov	r1, r7
200110e6:	4630      	mov	r0, r6
200110e8:	47c0      	blx	r8
200110ea:	3001      	adds	r0, #1
200110ec:	d0aa      	beq.n	20011044 <_printf_i+0x12c>
200110ee:	6823      	ldr	r3, [r4, #0]
200110f0:	079b      	lsls	r3, r3, #30
200110f2:	d413      	bmi.n	2001111c <_printf_i+0x204>
200110f4:	68e0      	ldr	r0, [r4, #12]
200110f6:	9b03      	ldr	r3, [sp, #12]
200110f8:	4298      	cmp	r0, r3
200110fa:	bfb8      	it	lt
200110fc:	4618      	movlt	r0, r3
200110fe:	e7a3      	b.n	20011048 <_printf_i+0x130>
20011100:	2301      	movs	r3, #1
20011102:	464a      	mov	r2, r9
20011104:	4639      	mov	r1, r7
20011106:	4630      	mov	r0, r6
20011108:	47c0      	blx	r8
2001110a:	3001      	adds	r0, #1
2001110c:	d09a      	beq.n	20011044 <_printf_i+0x12c>
2001110e:	3501      	adds	r5, #1
20011110:	68e3      	ldr	r3, [r4, #12]
20011112:	9a03      	ldr	r2, [sp, #12]
20011114:	1a9b      	subs	r3, r3, r2
20011116:	42ab      	cmp	r3, r5
20011118:	dcf2      	bgt.n	20011100 <_printf_i+0x1e8>
2001111a:	e7eb      	b.n	200110f4 <_printf_i+0x1dc>
2001111c:	2500      	movs	r5, #0
2001111e:	f104 0919 	add.w	r9, r4, #25
20011122:	e7f5      	b.n	20011110 <_printf_i+0x1f8>
20011124:	2b00      	cmp	r3, #0
20011126:	d1ac      	bne.n	20011082 <_printf_i+0x16a>
20011128:	7803      	ldrb	r3, [r0, #0]
2001112a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
2001112e:	f104 0542 	add.w	r5, r4, #66	; 0x42
20011132:	e76c      	b.n	2001100e <_printf_i+0xf6>
20011134:	200117c9 	.word	0x200117c9
20011138:	200117da 	.word	0x200117da

2001113c <memcpy>:
2001113c:	b510      	push	{r4, lr}
2001113e:	1e43      	subs	r3, r0, #1
20011140:	440a      	add	r2, r1
20011142:	4291      	cmp	r1, r2
20011144:	d100      	bne.n	20011148 <memcpy+0xc>
20011146:	bd10      	pop	{r4, pc}
20011148:	f811 4b01 	ldrb.w	r4, [r1], #1
2001114c:	f803 4f01 	strb.w	r4, [r3, #1]!
20011150:	e7f7      	b.n	20011142 <memcpy+0x6>

20011152 <memmove>:
20011152:	4288      	cmp	r0, r1
20011154:	b510      	push	{r4, lr}
20011156:	eb01 0302 	add.w	r3, r1, r2
2001115a:	d807      	bhi.n	2001116c <memmove+0x1a>
2001115c:	1e42      	subs	r2, r0, #1
2001115e:	4299      	cmp	r1, r3
20011160:	d00a      	beq.n	20011178 <memmove+0x26>
20011162:	f811 4b01 	ldrb.w	r4, [r1], #1
20011166:	f802 4f01 	strb.w	r4, [r2, #1]!
2001116a:	e7f8      	b.n	2001115e <memmove+0xc>
2001116c:	4283      	cmp	r3, r0
2001116e:	d9f5      	bls.n	2001115c <memmove+0xa>
20011170:	1881      	adds	r1, r0, r2
20011172:	1ad2      	subs	r2, r2, r3
20011174:	42d3      	cmn	r3, r2
20011176:	d100      	bne.n	2001117a <memmove+0x28>
20011178:	bd10      	pop	{r4, pc}
2001117a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
2001117e:	f801 4d01 	strb.w	r4, [r1, #-1]!
20011182:	e7f7      	b.n	20011174 <memmove+0x22>

20011184 <_free_r>:
20011184:	b538      	push	{r3, r4, r5, lr}
20011186:	4605      	mov	r5, r0
20011188:	2900      	cmp	r1, #0
2001118a:	d045      	beq.n	20011218 <_free_r+0x94>
2001118c:	f851 3c04 	ldr.w	r3, [r1, #-4]
20011190:	1f0c      	subs	r4, r1, #4
20011192:	2b00      	cmp	r3, #0
20011194:	bfb8      	it	lt
20011196:	18e4      	addlt	r4, r4, r3
20011198:	f000 f8d2 	bl	20011340 <__malloc_lock>
2001119c:	4a1f      	ldr	r2, [pc, #124]	; (2001121c <_free_r+0x98>)
2001119e:	6813      	ldr	r3, [r2, #0]
200111a0:	4610      	mov	r0, r2
200111a2:	b933      	cbnz	r3, 200111b2 <_free_r+0x2e>
200111a4:	6063      	str	r3, [r4, #4]
200111a6:	6014      	str	r4, [r2, #0]
200111a8:	4628      	mov	r0, r5
200111aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
200111ae:	f000 b8c8 	b.w	20011342 <__malloc_unlock>
200111b2:	42a3      	cmp	r3, r4
200111b4:	d90c      	bls.n	200111d0 <_free_r+0x4c>
200111b6:	6821      	ldr	r1, [r4, #0]
200111b8:	1862      	adds	r2, r4, r1
200111ba:	4293      	cmp	r3, r2
200111bc:	bf04      	itt	eq
200111be:	681a      	ldreq	r2, [r3, #0]
200111c0:	685b      	ldreq	r3, [r3, #4]
200111c2:	6063      	str	r3, [r4, #4]
200111c4:	bf04      	itt	eq
200111c6:	1852      	addeq	r2, r2, r1
200111c8:	6022      	streq	r2, [r4, #0]
200111ca:	6004      	str	r4, [r0, #0]
200111cc:	e7ec      	b.n	200111a8 <_free_r+0x24>
200111ce:	4613      	mov	r3, r2
200111d0:	685a      	ldr	r2, [r3, #4]
200111d2:	b10a      	cbz	r2, 200111d8 <_free_r+0x54>
200111d4:	42a2      	cmp	r2, r4
200111d6:	d9fa      	bls.n	200111ce <_free_r+0x4a>
200111d8:	6819      	ldr	r1, [r3, #0]
200111da:	1858      	adds	r0, r3, r1
200111dc:	42a0      	cmp	r0, r4
200111de:	d10b      	bne.n	200111f8 <_free_r+0x74>
200111e0:	6820      	ldr	r0, [r4, #0]
200111e2:	4401      	add	r1, r0
200111e4:	1858      	adds	r0, r3, r1
200111e6:	4282      	cmp	r2, r0
200111e8:	6019      	str	r1, [r3, #0]
200111ea:	d1dd      	bne.n	200111a8 <_free_r+0x24>
200111ec:	6810      	ldr	r0, [r2, #0]
200111ee:	6852      	ldr	r2, [r2, #4]
200111f0:	605a      	str	r2, [r3, #4]
200111f2:	4401      	add	r1, r0
200111f4:	6019      	str	r1, [r3, #0]
200111f6:	e7d7      	b.n	200111a8 <_free_r+0x24>
200111f8:	d902      	bls.n	20011200 <_free_r+0x7c>
200111fa:	230c      	movs	r3, #12
200111fc:	602b      	str	r3, [r5, #0]
200111fe:	e7d3      	b.n	200111a8 <_free_r+0x24>
20011200:	6820      	ldr	r0, [r4, #0]
20011202:	1821      	adds	r1, r4, r0
20011204:	428a      	cmp	r2, r1
20011206:	bf04      	itt	eq
20011208:	6811      	ldreq	r1, [r2, #0]
2001120a:	6852      	ldreq	r2, [r2, #4]
2001120c:	6062      	str	r2, [r4, #4]
2001120e:	bf04      	itt	eq
20011210:	1809      	addeq	r1, r1, r0
20011212:	6021      	streq	r1, [r4, #0]
20011214:	605c      	str	r4, [r3, #4]
20011216:	e7c7      	b.n	200111a8 <_free_r+0x24>
20011218:	bd38      	pop	{r3, r4, r5, pc}
2001121a:	bf00      	nop
2001121c:	200118a4 	.word	0x200118a4

20011220 <_malloc_r>:
20011220:	b570      	push	{r4, r5, r6, lr}
20011222:	1ccd      	adds	r5, r1, #3
20011224:	f025 0503 	bic.w	r5, r5, #3
20011228:	3508      	adds	r5, #8
2001122a:	2d0c      	cmp	r5, #12
2001122c:	bf38      	it	cc
2001122e:	250c      	movcc	r5, #12
20011230:	2d00      	cmp	r5, #0
20011232:	4606      	mov	r6, r0
20011234:	db01      	blt.n	2001123a <_malloc_r+0x1a>
20011236:	42a9      	cmp	r1, r5
20011238:	d903      	bls.n	20011242 <_malloc_r+0x22>
2001123a:	230c      	movs	r3, #12
2001123c:	6033      	str	r3, [r6, #0]
2001123e:	2000      	movs	r0, #0
20011240:	bd70      	pop	{r4, r5, r6, pc}
20011242:	f000 f87d 	bl	20011340 <__malloc_lock>
20011246:	4a21      	ldr	r2, [pc, #132]	; (200112cc <_malloc_r+0xac>)
20011248:	6814      	ldr	r4, [r2, #0]
2001124a:	4621      	mov	r1, r4
2001124c:	b991      	cbnz	r1, 20011274 <_malloc_r+0x54>
2001124e:	4c20      	ldr	r4, [pc, #128]	; (200112d0 <_malloc_r+0xb0>)
20011250:	6823      	ldr	r3, [r4, #0]
20011252:	b91b      	cbnz	r3, 2001125c <_malloc_r+0x3c>
20011254:	4630      	mov	r0, r6
20011256:	f000 f863 	bl	20011320 <_sbrk_r>
2001125a:	6020      	str	r0, [r4, #0]
2001125c:	4629      	mov	r1, r5
2001125e:	4630      	mov	r0, r6
20011260:	f000 f85e 	bl	20011320 <_sbrk_r>
20011264:	1c43      	adds	r3, r0, #1
20011266:	d124      	bne.n	200112b2 <_malloc_r+0x92>
20011268:	230c      	movs	r3, #12
2001126a:	6033      	str	r3, [r6, #0]
2001126c:	4630      	mov	r0, r6
2001126e:	f000 f868 	bl	20011342 <__malloc_unlock>
20011272:	e7e4      	b.n	2001123e <_malloc_r+0x1e>
20011274:	680b      	ldr	r3, [r1, #0]
20011276:	1b5b      	subs	r3, r3, r5
20011278:	d418      	bmi.n	200112ac <_malloc_r+0x8c>
2001127a:	2b0b      	cmp	r3, #11
2001127c:	d90f      	bls.n	2001129e <_malloc_r+0x7e>
2001127e:	600b      	str	r3, [r1, #0]
20011280:	50cd      	str	r5, [r1, r3]
20011282:	18cc      	adds	r4, r1, r3
20011284:	4630      	mov	r0, r6
20011286:	f000 f85c 	bl	20011342 <__malloc_unlock>
2001128a:	f104 000b 	add.w	r0, r4, #11
2001128e:	1d23      	adds	r3, r4, #4
20011290:	f020 0007 	bic.w	r0, r0, #7
20011294:	1ac3      	subs	r3, r0, r3
20011296:	d0d3      	beq.n	20011240 <_malloc_r+0x20>
20011298:	425a      	negs	r2, r3
2001129a:	50e2      	str	r2, [r4, r3]
2001129c:	e7d0      	b.n	20011240 <_malloc_r+0x20>
2001129e:	428c      	cmp	r4, r1
200112a0:	684b      	ldr	r3, [r1, #4]
200112a2:	bf16      	itet	ne
200112a4:	6063      	strne	r3, [r4, #4]
200112a6:	6013      	streq	r3, [r2, #0]
200112a8:	460c      	movne	r4, r1
200112aa:	e7eb      	b.n	20011284 <_malloc_r+0x64>
200112ac:	460c      	mov	r4, r1
200112ae:	6849      	ldr	r1, [r1, #4]
200112b0:	e7cc      	b.n	2001124c <_malloc_r+0x2c>
200112b2:	1cc4      	adds	r4, r0, #3
200112b4:	f024 0403 	bic.w	r4, r4, #3
200112b8:	42a0      	cmp	r0, r4
200112ba:	d005      	beq.n	200112c8 <_malloc_r+0xa8>
200112bc:	1a21      	subs	r1, r4, r0
200112be:	4630      	mov	r0, r6
200112c0:	f000 f82e 	bl	20011320 <_sbrk_r>
200112c4:	3001      	adds	r0, #1
200112c6:	d0cf      	beq.n	20011268 <_malloc_r+0x48>
200112c8:	6025      	str	r5, [r4, #0]
200112ca:	e7db      	b.n	20011284 <_malloc_r+0x64>
200112cc:	200118a4 	.word	0x200118a4
200112d0:	200118a8 	.word	0x200118a8

200112d4 <_realloc_r>:
200112d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
200112d6:	4607      	mov	r7, r0
200112d8:	4614      	mov	r4, r2
200112da:	460e      	mov	r6, r1
200112dc:	b921      	cbnz	r1, 200112e8 <_realloc_r+0x14>
200112de:	4611      	mov	r1, r2
200112e0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
200112e4:	f7ff bf9c 	b.w	20011220 <_malloc_r>
200112e8:	b922      	cbnz	r2, 200112f4 <_realloc_r+0x20>
200112ea:	f7ff ff4b 	bl	20011184 <_free_r>
200112ee:	4625      	mov	r5, r4
200112f0:	4628      	mov	r0, r5
200112f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
200112f4:	f000 f826 	bl	20011344 <_malloc_usable_size_r>
200112f8:	42a0      	cmp	r0, r4
200112fa:	d20f      	bcs.n	2001131c <_realloc_r+0x48>
200112fc:	4621      	mov	r1, r4
200112fe:	4638      	mov	r0, r7
20011300:	f7ff ff8e 	bl	20011220 <_malloc_r>
20011304:	4605      	mov	r5, r0
20011306:	2800      	cmp	r0, #0
20011308:	d0f2      	beq.n	200112f0 <_realloc_r+0x1c>
2001130a:	4631      	mov	r1, r6
2001130c:	4622      	mov	r2, r4
2001130e:	f7ff ff15 	bl	2001113c <memcpy>
20011312:	4631      	mov	r1, r6
20011314:	4638      	mov	r0, r7
20011316:	f7ff ff35 	bl	20011184 <_free_r>
2001131a:	e7e9      	b.n	200112f0 <_realloc_r+0x1c>
2001131c:	4635      	mov	r5, r6
2001131e:	e7e7      	b.n	200112f0 <_realloc_r+0x1c>

20011320 <_sbrk_r>:
20011320:	b538      	push	{r3, r4, r5, lr}
20011322:	4c06      	ldr	r4, [pc, #24]	; (2001133c <_sbrk_r+0x1c>)
20011324:	2300      	movs	r3, #0
20011326:	4605      	mov	r5, r0
20011328:	4608      	mov	r0, r1
2001132a:	6023      	str	r3, [r4, #0]
2001132c:	f7fc fb86 	bl	2000da3c <_sbrk>
20011330:	1c43      	adds	r3, r0, #1
20011332:	d102      	bne.n	2001133a <_sbrk_r+0x1a>
20011334:	6823      	ldr	r3, [r4, #0]
20011336:	b103      	cbz	r3, 2001133a <_sbrk_r+0x1a>
20011338:	602b      	str	r3, [r5, #0]
2001133a:	bd38      	pop	{r3, r4, r5, pc}
2001133c:	20011a3c 	.word	0x20011a3c

20011340 <__malloc_lock>:
20011340:	4770      	bx	lr

20011342 <__malloc_unlock>:
20011342:	4770      	bx	lr

20011344 <_malloc_usable_size_r>:
20011344:	f851 3c04 	ldr.w	r3, [r1, #-4]
20011348:	1f18      	subs	r0, r3, #4
2001134a:	2b00      	cmp	r3, #0
2001134c:	bfbc      	itt	lt
2001134e:	580b      	ldrlt	r3, [r1, r0]
20011350:	18c0      	addlt	r0, r0, r3
20011352:	4770      	bx	lr

20011354 <_init>:
20011354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
20011356:	bf00      	nop
20011358:	bcf8      	pop	{r3, r4, r5, r6, r7}
2001135a:	bc08      	pop	{r3}
2001135c:	469e      	mov	lr, r3
2001135e:	4770      	bx	lr

20011360 <_fini>:
20011360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
20011362:	bf00      	nop
20011364:	bcf8      	pop	{r3, r4, r5, r6, r7}
20011366:	bc08      	pop	{r3}
20011368:	469e      	mov	lr, r3
2001136a:	4770      	bx	lr
