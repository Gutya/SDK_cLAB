
SDK_cLAB_FLASH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  2000d000  2000d000  0000d000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002860  2000d190  2000d190  0000d190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000494  2000f9f0  2000f9f0  0000f9f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  2000fe84  2000fe84  0000ff14  2**0
                  CONTENTS
  4 .ARM          00000008  2000fe84  2000fe84  0000fe84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  2000fe8c  2000ff14  0000ff14  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  2000fe8c  2000fe8c  0000fe8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  2000fe90  2000fe90  0000fe90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  2000fe94  2000fe94  0000fe94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000168  2000ff14  2000ff14  0000ff14  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2001007c  2001007c  0000ff14  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000ff14  2**0
                  CONTENTS, READONLY
 12 .debug_info   000073bd  00000000  00000000  0000ff44  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001b8e  00000000  00000000  00017301  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000650  00000000  00000000  00018e90  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000538  00000000  00000000  000194e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000207b7  00000000  00000000  00019a18  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007bfb  00000000  00000000  0003a1cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c0c45  00000000  00000000  00041dca  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00102a0f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001948  00000000  00000000  00102a8c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

2000d190 <__do_global_dtors_aux>:
2000d190:	b510      	push	{r4, lr}
2000d192:	4c05      	ldr	r4, [pc, #20]	; (2000d1a8 <__do_global_dtors_aux+0x18>)
2000d194:	7823      	ldrb	r3, [r4, #0]
2000d196:	b933      	cbnz	r3, 2000d1a6 <__do_global_dtors_aux+0x16>
2000d198:	4b04      	ldr	r3, [pc, #16]	; (2000d1ac <__do_global_dtors_aux+0x1c>)
2000d19a:	b113      	cbz	r3, 2000d1a2 <__do_global_dtors_aux+0x12>
2000d19c:	4804      	ldr	r0, [pc, #16]	; (2000d1b0 <__do_global_dtors_aux+0x20>)
2000d19e:	f3af 8000 	nop.w
2000d1a2:	2301      	movs	r3, #1
2000d1a4:	7023      	strb	r3, [r4, #0]
2000d1a6:	bd10      	pop	{r4, pc}
2000d1a8:	2000ff14 	.word	0x2000ff14
2000d1ac:	00000000 	.word	0x00000000
2000d1b0:	2000f9d8 	.word	0x2000f9d8

2000d1b4 <frame_dummy>:
2000d1b4:	b508      	push	{r3, lr}
2000d1b6:	4b03      	ldr	r3, [pc, #12]	; (2000d1c4 <frame_dummy+0x10>)
2000d1b8:	b11b      	cbz	r3, 2000d1c2 <frame_dummy+0xe>
2000d1ba:	4903      	ldr	r1, [pc, #12]	; (2000d1c8 <frame_dummy+0x14>)
2000d1bc:	4803      	ldr	r0, [pc, #12]	; (2000d1cc <frame_dummy+0x18>)
2000d1be:	f3af 8000 	nop.w
2000d1c2:	bd08      	pop	{r3, pc}
2000d1c4:	00000000 	.word	0x00000000
2000d1c8:	2000ff18 	.word	0x2000ff18
2000d1cc:	2000f9d8 	.word	0x2000f9d8

2000d1d0 <strlen>:
2000d1d0:	4603      	mov	r3, r0
2000d1d2:	f813 2b01 	ldrb.w	r2, [r3], #1
2000d1d6:	2a00      	cmp	r2, #0
2000d1d8:	d1fb      	bne.n	2000d1d2 <strlen+0x2>
2000d1da:	1a18      	subs	r0, r3, r0
2000d1dc:	3801      	subs	r0, #1
2000d1de:	4770      	bx	lr

2000d1e0 <memchr>:
2000d1e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
2000d1e4:	2a10      	cmp	r2, #16
2000d1e6:	db2b      	blt.n	2000d240 <memchr+0x60>
2000d1e8:	f010 0f07 	tst.w	r0, #7
2000d1ec:	d008      	beq.n	2000d200 <memchr+0x20>
2000d1ee:	f810 3b01 	ldrb.w	r3, [r0], #1
2000d1f2:	3a01      	subs	r2, #1
2000d1f4:	428b      	cmp	r3, r1
2000d1f6:	d02d      	beq.n	2000d254 <memchr+0x74>
2000d1f8:	f010 0f07 	tst.w	r0, #7
2000d1fc:	b342      	cbz	r2, 2000d250 <memchr+0x70>
2000d1fe:	d1f6      	bne.n	2000d1ee <memchr+0xe>
2000d200:	b4f0      	push	{r4, r5, r6, r7}
2000d202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
2000d206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
2000d20a:	f022 0407 	bic.w	r4, r2, #7
2000d20e:	f07f 0700 	mvns.w	r7, #0
2000d212:	2300      	movs	r3, #0
2000d214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
2000d218:	3c08      	subs	r4, #8
2000d21a:	ea85 0501 	eor.w	r5, r5, r1
2000d21e:	ea86 0601 	eor.w	r6, r6, r1
2000d222:	fa85 f547 	uadd8	r5, r5, r7
2000d226:	faa3 f587 	sel	r5, r3, r7
2000d22a:	fa86 f647 	uadd8	r6, r6, r7
2000d22e:	faa5 f687 	sel	r6, r5, r7
2000d232:	b98e      	cbnz	r6, 2000d258 <memchr+0x78>
2000d234:	d1ee      	bne.n	2000d214 <memchr+0x34>
2000d236:	bcf0      	pop	{r4, r5, r6, r7}
2000d238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
2000d23c:	f002 0207 	and.w	r2, r2, #7
2000d240:	b132      	cbz	r2, 2000d250 <memchr+0x70>
2000d242:	f810 3b01 	ldrb.w	r3, [r0], #1
2000d246:	3a01      	subs	r2, #1
2000d248:	ea83 0301 	eor.w	r3, r3, r1
2000d24c:	b113      	cbz	r3, 2000d254 <memchr+0x74>
2000d24e:	d1f8      	bne.n	2000d242 <memchr+0x62>
2000d250:	2000      	movs	r0, #0
2000d252:	4770      	bx	lr
2000d254:	3801      	subs	r0, #1
2000d256:	4770      	bx	lr
2000d258:	2d00      	cmp	r5, #0
2000d25a:	bf06      	itte	eq
2000d25c:	4635      	moveq	r5, r6
2000d25e:	3803      	subeq	r0, #3
2000d260:	3807      	subne	r0, #7
2000d262:	f015 0f01 	tst.w	r5, #1
2000d266:	d107      	bne.n	2000d278 <memchr+0x98>
2000d268:	3001      	adds	r0, #1
2000d26a:	f415 7f80 	tst.w	r5, #256	; 0x100
2000d26e:	bf02      	ittt	eq
2000d270:	3001      	addeq	r0, #1
2000d272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
2000d276:	3001      	addeq	r0, #1
2000d278:	bcf0      	pop	{r4, r5, r6, r7}
2000d27a:	3801      	subs	r0, #1
2000d27c:	4770      	bx	lr
2000d27e:	bf00      	nop

2000d280 <__aeabi_uldivmod>:
2000d280:	b953      	cbnz	r3, 2000d298 <__aeabi_uldivmod+0x18>
2000d282:	b94a      	cbnz	r2, 2000d298 <__aeabi_uldivmod+0x18>
2000d284:	2900      	cmp	r1, #0
2000d286:	bf08      	it	eq
2000d288:	2800      	cmpeq	r0, #0
2000d28a:	bf1c      	itt	ne
2000d28c:	f04f 31ff 	movne.w	r1, #4294967295
2000d290:	f04f 30ff 	movne.w	r0, #4294967295
2000d294:	f000 b972 	b.w	2000d57c <__aeabi_idiv0>
2000d298:	f1ad 0c08 	sub.w	ip, sp, #8
2000d29c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
2000d2a0:	f000 f806 	bl	2000d2b0 <__udivmoddi4>
2000d2a4:	f8dd e004 	ldr.w	lr, [sp, #4]
2000d2a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
2000d2ac:	b004      	add	sp, #16
2000d2ae:	4770      	bx	lr

2000d2b0 <__udivmoddi4>:
2000d2b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
2000d2b4:	9e08      	ldr	r6, [sp, #32]
2000d2b6:	4604      	mov	r4, r0
2000d2b8:	4688      	mov	r8, r1
2000d2ba:	2b00      	cmp	r3, #0
2000d2bc:	d14b      	bne.n	2000d356 <__udivmoddi4+0xa6>
2000d2be:	428a      	cmp	r2, r1
2000d2c0:	4615      	mov	r5, r2
2000d2c2:	d967      	bls.n	2000d394 <__udivmoddi4+0xe4>
2000d2c4:	fab2 f282 	clz	r2, r2
2000d2c8:	b14a      	cbz	r2, 2000d2de <__udivmoddi4+0x2e>
2000d2ca:	f1c2 0720 	rsb	r7, r2, #32
2000d2ce:	fa01 f302 	lsl.w	r3, r1, r2
2000d2d2:	fa20 f707 	lsr.w	r7, r0, r7
2000d2d6:	4095      	lsls	r5, r2
2000d2d8:	ea47 0803 	orr.w	r8, r7, r3
2000d2dc:	4094      	lsls	r4, r2
2000d2de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
2000d2e2:	0c23      	lsrs	r3, r4, #16
2000d2e4:	fbb8 f7fe 	udiv	r7, r8, lr
2000d2e8:	fa1f fc85 	uxth.w	ip, r5
2000d2ec:	fb0e 8817 	mls	r8, lr, r7, r8
2000d2f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
2000d2f4:	fb07 f10c 	mul.w	r1, r7, ip
2000d2f8:	4299      	cmp	r1, r3
2000d2fa:	d909      	bls.n	2000d310 <__udivmoddi4+0x60>
2000d2fc:	18eb      	adds	r3, r5, r3
2000d2fe:	f107 30ff 	add.w	r0, r7, #4294967295
2000d302:	f080 811b 	bcs.w	2000d53c <__udivmoddi4+0x28c>
2000d306:	4299      	cmp	r1, r3
2000d308:	f240 8118 	bls.w	2000d53c <__udivmoddi4+0x28c>
2000d30c:	3f02      	subs	r7, #2
2000d30e:	442b      	add	r3, r5
2000d310:	1a5b      	subs	r3, r3, r1
2000d312:	b2a4      	uxth	r4, r4
2000d314:	fbb3 f0fe 	udiv	r0, r3, lr
2000d318:	fb0e 3310 	mls	r3, lr, r0, r3
2000d31c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
2000d320:	fb00 fc0c 	mul.w	ip, r0, ip
2000d324:	45a4      	cmp	ip, r4
2000d326:	d909      	bls.n	2000d33c <__udivmoddi4+0x8c>
2000d328:	192c      	adds	r4, r5, r4
2000d32a:	f100 33ff 	add.w	r3, r0, #4294967295
2000d32e:	f080 8107 	bcs.w	2000d540 <__udivmoddi4+0x290>
2000d332:	45a4      	cmp	ip, r4
2000d334:	f240 8104 	bls.w	2000d540 <__udivmoddi4+0x290>
2000d338:	3802      	subs	r0, #2
2000d33a:	442c      	add	r4, r5
2000d33c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
2000d340:	eba4 040c 	sub.w	r4, r4, ip
2000d344:	2700      	movs	r7, #0
2000d346:	b11e      	cbz	r6, 2000d350 <__udivmoddi4+0xa0>
2000d348:	40d4      	lsrs	r4, r2
2000d34a:	2300      	movs	r3, #0
2000d34c:	e9c6 4300 	strd	r4, r3, [r6]
2000d350:	4639      	mov	r1, r7
2000d352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
2000d356:	428b      	cmp	r3, r1
2000d358:	d909      	bls.n	2000d36e <__udivmoddi4+0xbe>
2000d35a:	2e00      	cmp	r6, #0
2000d35c:	f000 80eb 	beq.w	2000d536 <__udivmoddi4+0x286>
2000d360:	2700      	movs	r7, #0
2000d362:	e9c6 0100 	strd	r0, r1, [r6]
2000d366:	4638      	mov	r0, r7
2000d368:	4639      	mov	r1, r7
2000d36a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
2000d36e:	fab3 f783 	clz	r7, r3
2000d372:	2f00      	cmp	r7, #0
2000d374:	d147      	bne.n	2000d406 <__udivmoddi4+0x156>
2000d376:	428b      	cmp	r3, r1
2000d378:	d302      	bcc.n	2000d380 <__udivmoddi4+0xd0>
2000d37a:	4282      	cmp	r2, r0
2000d37c:	f200 80fa 	bhi.w	2000d574 <__udivmoddi4+0x2c4>
2000d380:	1a84      	subs	r4, r0, r2
2000d382:	eb61 0303 	sbc.w	r3, r1, r3
2000d386:	2001      	movs	r0, #1
2000d388:	4698      	mov	r8, r3
2000d38a:	2e00      	cmp	r6, #0
2000d38c:	d0e0      	beq.n	2000d350 <__udivmoddi4+0xa0>
2000d38e:	e9c6 4800 	strd	r4, r8, [r6]
2000d392:	e7dd      	b.n	2000d350 <__udivmoddi4+0xa0>
2000d394:	b902      	cbnz	r2, 2000d398 <__udivmoddi4+0xe8>
2000d396:	deff      	udf	#255	; 0xff
2000d398:	fab2 f282 	clz	r2, r2
2000d39c:	2a00      	cmp	r2, #0
2000d39e:	f040 808f 	bne.w	2000d4c0 <__udivmoddi4+0x210>
2000d3a2:	1b49      	subs	r1, r1, r5
2000d3a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
2000d3a8:	fa1f f885 	uxth.w	r8, r5
2000d3ac:	2701      	movs	r7, #1
2000d3ae:	fbb1 fcfe 	udiv	ip, r1, lr
2000d3b2:	0c23      	lsrs	r3, r4, #16
2000d3b4:	fb0e 111c 	mls	r1, lr, ip, r1
2000d3b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
2000d3bc:	fb08 f10c 	mul.w	r1, r8, ip
2000d3c0:	4299      	cmp	r1, r3
2000d3c2:	d907      	bls.n	2000d3d4 <__udivmoddi4+0x124>
2000d3c4:	18eb      	adds	r3, r5, r3
2000d3c6:	f10c 30ff 	add.w	r0, ip, #4294967295
2000d3ca:	d202      	bcs.n	2000d3d2 <__udivmoddi4+0x122>
2000d3cc:	4299      	cmp	r1, r3
2000d3ce:	f200 80cd 	bhi.w	2000d56c <__udivmoddi4+0x2bc>
2000d3d2:	4684      	mov	ip, r0
2000d3d4:	1a59      	subs	r1, r3, r1
2000d3d6:	b2a3      	uxth	r3, r4
2000d3d8:	fbb1 f0fe 	udiv	r0, r1, lr
2000d3dc:	fb0e 1410 	mls	r4, lr, r0, r1
2000d3e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
2000d3e4:	fb08 f800 	mul.w	r8, r8, r0
2000d3e8:	45a0      	cmp	r8, r4
2000d3ea:	d907      	bls.n	2000d3fc <__udivmoddi4+0x14c>
2000d3ec:	192c      	adds	r4, r5, r4
2000d3ee:	f100 33ff 	add.w	r3, r0, #4294967295
2000d3f2:	d202      	bcs.n	2000d3fa <__udivmoddi4+0x14a>
2000d3f4:	45a0      	cmp	r8, r4
2000d3f6:	f200 80b6 	bhi.w	2000d566 <__udivmoddi4+0x2b6>
2000d3fa:	4618      	mov	r0, r3
2000d3fc:	eba4 0408 	sub.w	r4, r4, r8
2000d400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
2000d404:	e79f      	b.n	2000d346 <__udivmoddi4+0x96>
2000d406:	f1c7 0c20 	rsb	ip, r7, #32
2000d40a:	40bb      	lsls	r3, r7
2000d40c:	fa22 fe0c 	lsr.w	lr, r2, ip
2000d410:	ea4e 0e03 	orr.w	lr, lr, r3
2000d414:	fa01 f407 	lsl.w	r4, r1, r7
2000d418:	fa20 f50c 	lsr.w	r5, r0, ip
2000d41c:	fa21 f30c 	lsr.w	r3, r1, ip
2000d420:	ea4f 481e 	mov.w	r8, lr, lsr #16
2000d424:	4325      	orrs	r5, r4
2000d426:	fbb3 f9f8 	udiv	r9, r3, r8
2000d42a:	0c2c      	lsrs	r4, r5, #16
2000d42c:	fb08 3319 	mls	r3, r8, r9, r3
2000d430:	fa1f fa8e 	uxth.w	sl, lr
2000d434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
2000d438:	fb09 f40a 	mul.w	r4, r9, sl
2000d43c:	429c      	cmp	r4, r3
2000d43e:	fa02 f207 	lsl.w	r2, r2, r7
2000d442:	fa00 f107 	lsl.w	r1, r0, r7
2000d446:	d90b      	bls.n	2000d460 <__udivmoddi4+0x1b0>
2000d448:	eb1e 0303 	adds.w	r3, lr, r3
2000d44c:	f109 30ff 	add.w	r0, r9, #4294967295
2000d450:	f080 8087 	bcs.w	2000d562 <__udivmoddi4+0x2b2>
2000d454:	429c      	cmp	r4, r3
2000d456:	f240 8084 	bls.w	2000d562 <__udivmoddi4+0x2b2>
2000d45a:	f1a9 0902 	sub.w	r9, r9, #2
2000d45e:	4473      	add	r3, lr
2000d460:	1b1b      	subs	r3, r3, r4
2000d462:	b2ad      	uxth	r5, r5
2000d464:	fbb3 f0f8 	udiv	r0, r3, r8
2000d468:	fb08 3310 	mls	r3, r8, r0, r3
2000d46c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
2000d470:	fb00 fa0a 	mul.w	sl, r0, sl
2000d474:	45a2      	cmp	sl, r4
2000d476:	d908      	bls.n	2000d48a <__udivmoddi4+0x1da>
2000d478:	eb1e 0404 	adds.w	r4, lr, r4
2000d47c:	f100 33ff 	add.w	r3, r0, #4294967295
2000d480:	d26b      	bcs.n	2000d55a <__udivmoddi4+0x2aa>
2000d482:	45a2      	cmp	sl, r4
2000d484:	d969      	bls.n	2000d55a <__udivmoddi4+0x2aa>
2000d486:	3802      	subs	r0, #2
2000d488:	4474      	add	r4, lr
2000d48a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
2000d48e:	fba0 8902 	umull	r8, r9, r0, r2
2000d492:	eba4 040a 	sub.w	r4, r4, sl
2000d496:	454c      	cmp	r4, r9
2000d498:	46c2      	mov	sl, r8
2000d49a:	464b      	mov	r3, r9
2000d49c:	d354      	bcc.n	2000d548 <__udivmoddi4+0x298>
2000d49e:	d051      	beq.n	2000d544 <__udivmoddi4+0x294>
2000d4a0:	2e00      	cmp	r6, #0
2000d4a2:	d069      	beq.n	2000d578 <__udivmoddi4+0x2c8>
2000d4a4:	ebb1 050a 	subs.w	r5, r1, sl
2000d4a8:	eb64 0403 	sbc.w	r4, r4, r3
2000d4ac:	fa04 fc0c 	lsl.w	ip, r4, ip
2000d4b0:	40fd      	lsrs	r5, r7
2000d4b2:	40fc      	lsrs	r4, r7
2000d4b4:	ea4c 0505 	orr.w	r5, ip, r5
2000d4b8:	e9c6 5400 	strd	r5, r4, [r6]
2000d4bc:	2700      	movs	r7, #0
2000d4be:	e747      	b.n	2000d350 <__udivmoddi4+0xa0>
2000d4c0:	f1c2 0320 	rsb	r3, r2, #32
2000d4c4:	fa20 f703 	lsr.w	r7, r0, r3
2000d4c8:	4095      	lsls	r5, r2
2000d4ca:	fa01 f002 	lsl.w	r0, r1, r2
2000d4ce:	fa21 f303 	lsr.w	r3, r1, r3
2000d4d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
2000d4d6:	4338      	orrs	r0, r7
2000d4d8:	0c01      	lsrs	r1, r0, #16
2000d4da:	fbb3 f7fe 	udiv	r7, r3, lr
2000d4de:	fa1f f885 	uxth.w	r8, r5
2000d4e2:	fb0e 3317 	mls	r3, lr, r7, r3
2000d4e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
2000d4ea:	fb07 f308 	mul.w	r3, r7, r8
2000d4ee:	428b      	cmp	r3, r1
2000d4f0:	fa04 f402 	lsl.w	r4, r4, r2
2000d4f4:	d907      	bls.n	2000d506 <__udivmoddi4+0x256>
2000d4f6:	1869      	adds	r1, r5, r1
2000d4f8:	f107 3cff 	add.w	ip, r7, #4294967295
2000d4fc:	d22f      	bcs.n	2000d55e <__udivmoddi4+0x2ae>
2000d4fe:	428b      	cmp	r3, r1
2000d500:	d92d      	bls.n	2000d55e <__udivmoddi4+0x2ae>
2000d502:	3f02      	subs	r7, #2
2000d504:	4429      	add	r1, r5
2000d506:	1acb      	subs	r3, r1, r3
2000d508:	b281      	uxth	r1, r0
2000d50a:	fbb3 f0fe 	udiv	r0, r3, lr
2000d50e:	fb0e 3310 	mls	r3, lr, r0, r3
2000d512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
2000d516:	fb00 f308 	mul.w	r3, r0, r8
2000d51a:	428b      	cmp	r3, r1
2000d51c:	d907      	bls.n	2000d52e <__udivmoddi4+0x27e>
2000d51e:	1869      	adds	r1, r5, r1
2000d520:	f100 3cff 	add.w	ip, r0, #4294967295
2000d524:	d217      	bcs.n	2000d556 <__udivmoddi4+0x2a6>
2000d526:	428b      	cmp	r3, r1
2000d528:	d915      	bls.n	2000d556 <__udivmoddi4+0x2a6>
2000d52a:	3802      	subs	r0, #2
2000d52c:	4429      	add	r1, r5
2000d52e:	1ac9      	subs	r1, r1, r3
2000d530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
2000d534:	e73b      	b.n	2000d3ae <__udivmoddi4+0xfe>
2000d536:	4637      	mov	r7, r6
2000d538:	4630      	mov	r0, r6
2000d53a:	e709      	b.n	2000d350 <__udivmoddi4+0xa0>
2000d53c:	4607      	mov	r7, r0
2000d53e:	e6e7      	b.n	2000d310 <__udivmoddi4+0x60>
2000d540:	4618      	mov	r0, r3
2000d542:	e6fb      	b.n	2000d33c <__udivmoddi4+0x8c>
2000d544:	4541      	cmp	r1, r8
2000d546:	d2ab      	bcs.n	2000d4a0 <__udivmoddi4+0x1f0>
2000d548:	ebb8 0a02 	subs.w	sl, r8, r2
2000d54c:	eb69 020e 	sbc.w	r2, r9, lr
2000d550:	3801      	subs	r0, #1
2000d552:	4613      	mov	r3, r2
2000d554:	e7a4      	b.n	2000d4a0 <__udivmoddi4+0x1f0>
2000d556:	4660      	mov	r0, ip
2000d558:	e7e9      	b.n	2000d52e <__udivmoddi4+0x27e>
2000d55a:	4618      	mov	r0, r3
2000d55c:	e795      	b.n	2000d48a <__udivmoddi4+0x1da>
2000d55e:	4667      	mov	r7, ip
2000d560:	e7d1      	b.n	2000d506 <__udivmoddi4+0x256>
2000d562:	4681      	mov	r9, r0
2000d564:	e77c      	b.n	2000d460 <__udivmoddi4+0x1b0>
2000d566:	3802      	subs	r0, #2
2000d568:	442c      	add	r4, r5
2000d56a:	e747      	b.n	2000d3fc <__udivmoddi4+0x14c>
2000d56c:	f1ac 0c02 	sub.w	ip, ip, #2
2000d570:	442b      	add	r3, r5
2000d572:	e72f      	b.n	2000d3d4 <__udivmoddi4+0x124>
2000d574:	4638      	mov	r0, r7
2000d576:	e708      	b.n	2000d38a <__udivmoddi4+0xda>
2000d578:	4637      	mov	r7, r6
2000d57a:	e6e9      	b.n	2000d350 <__udivmoddi4+0xa0>

2000d57c <__aeabi_idiv0>:
2000d57c:	4770      	bx	lr
2000d57e:	bf00      	nop

2000d580 <MY_FLASH_EraseSector>:
static uint32_t MY_SectorAddrs;
static uint8_t MY_SectorNum;

//1. Erase Sector
static void MY_FLASH_EraseSector(void)
{
2000d580:	b580      	push	{r7, lr}
2000d582:	af00      	add	r7, sp, #0
	HAL_FLASH_Unlock();
2000d584:	f000 fe2a 	bl	2000e1dc <HAL_FLASH_Unlock>
	//Erase the required Flash sector
	FLASH_Erase_Sector(MY_SectorNum, FLASH_VOLTAGE_RANGE_3);
2000d588:	4b04      	ldr	r3, [pc, #16]	; (2000d59c <MY_FLASH_EraseSector+0x1c>)
2000d58a:	781b      	ldrb	r3, [r3, #0]
2000d58c:	2102      	movs	r1, #2
2000d58e:	4618      	mov	r0, r3
2000d590:	f000 ff84 	bl	2000e49c <FLASH_Erase_Sector>
	HAL_FLASH_Lock();
2000d594:	f000 fe44 	bl	2000e220 <HAL_FLASH_Lock>
}
2000d598:	bf00      	nop
2000d59a:	bd80      	pop	{r7, pc}
2000d59c:	2000ff34 	.word	0x2000ff34

2000d5a0 <MY_FLASH_SetSectorAddrs>:

//2. Set Sector Adress
void MY_FLASH_SetSectorAddrs(uint8_t sector, uint32_t addrs)
{
2000d5a0:	b480      	push	{r7}
2000d5a2:	b083      	sub	sp, #12
2000d5a4:	af00      	add	r7, sp, #0
2000d5a6:	4603      	mov	r3, r0
2000d5a8:	6039      	str	r1, [r7, #0]
2000d5aa:	71fb      	strb	r3, [r7, #7]
	MY_SectorNum = sector;
2000d5ac:	4a05      	ldr	r2, [pc, #20]	; (2000d5c4 <MY_FLASH_SetSectorAddrs+0x24>)
2000d5ae:	79fb      	ldrb	r3, [r7, #7]
2000d5b0:	7013      	strb	r3, [r2, #0]
	MY_SectorAddrs = addrs;
2000d5b2:	4a05      	ldr	r2, [pc, #20]	; (2000d5c8 <MY_FLASH_SetSectorAddrs+0x28>)
2000d5b4:	683b      	ldr	r3, [r7, #0]
2000d5b6:	6013      	str	r3, [r2, #0]
}
2000d5b8:	bf00      	nop
2000d5ba:	370c      	adds	r7, #12
2000d5bc:	46bd      	mov	sp, r7
2000d5be:	f85d 7b04 	ldr.w	r7, [sp], #4
2000d5c2:	4770      	bx	lr
2000d5c4:	2000ff34 	.word	0x2000ff34
2000d5c8:	2000ff30 	.word	0x2000ff30

2000d5cc <MY_FLASH_WriteN>:

//3. Write Flash
void MY_FLASH_WriteN(uint32_t idx, void *wrBuf, uint32_t Nsize, DataTypeDef dataType)
{
2000d5cc:	b590      	push	{r4, r7, lr}
2000d5ce:	b089      	sub	sp, #36	; 0x24
2000d5d0:	af00      	add	r7, sp, #0
2000d5d2:	60f8      	str	r0, [r7, #12]
2000d5d4:	60b9      	str	r1, [r7, #8]
2000d5d6:	607a      	str	r2, [r7, #4]
2000d5d8:	70fb      	strb	r3, [r7, #3]
	uint32_t flashAddress = MY_SectorAddrs + idx;
2000d5da:	4b34      	ldr	r3, [pc, #208]	; (2000d6ac <MY_FLASH_WriteN+0xe0>)
2000d5dc:	681b      	ldr	r3, [r3, #0]
2000d5de:	68fa      	ldr	r2, [r7, #12]
2000d5e0:	4413      	add	r3, r2
2000d5e2:	61fb      	str	r3, [r7, #28]
	
	//Erase sector before write
	MY_FLASH_EraseSector();
2000d5e4:	f7ff ffcc 	bl	2000d580 <MY_FLASH_EraseSector>
	
	//Unlock Flash
	HAL_FLASH_Unlock();
2000d5e8:	f000 fdf8 	bl	2000e1dc <HAL_FLASH_Unlock>
	//Write to Flash
	switch(dataType)
2000d5ec:	78fb      	ldrb	r3, [r7, #3]
2000d5ee:	2b01      	cmp	r3, #1
2000d5f0:	d01e      	beq.n	2000d630 <MY_FLASH_WriteN+0x64>
2000d5f2:	2b02      	cmp	r3, #2
2000d5f4:	d038      	beq.n	2000d668 <MY_FLASH_WriteN+0x9c>
2000d5f6:	2b00      	cmp	r3, #0
2000d5f8:	d151      	bne.n	2000d69e <MY_FLASH_WriteN+0xd2>
	{
		case DATA_TYPE_8:
				for(uint32_t i=0; i<Nsize; i++)
2000d5fa:	2300      	movs	r3, #0
2000d5fc:	61bb      	str	r3, [r7, #24]
2000d5fe:	e012      	b.n	2000d626 <MY_FLASH_WriteN+0x5a>
				{
					HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, flashAddress , ((uint8_t *)wrBuf)[i]);
2000d600:	68ba      	ldr	r2, [r7, #8]
2000d602:	69bb      	ldr	r3, [r7, #24]
2000d604:	4413      	add	r3, r2
2000d606:	781b      	ldrb	r3, [r3, #0]
2000d608:	b2db      	uxtb	r3, r3
2000d60a:	f04f 0400 	mov.w	r4, #0
2000d60e:	461a      	mov	r2, r3
2000d610:	4623      	mov	r3, r4
2000d612:	69f9      	ldr	r1, [r7, #28]
2000d614:	2000      	movs	r0, #0
2000d616:	f000 fd8d 	bl	2000e134 <HAL_FLASH_Program>
					flashAddress++;
2000d61a:	69fb      	ldr	r3, [r7, #28]
2000d61c:	3301      	adds	r3, #1
2000d61e:	61fb      	str	r3, [r7, #28]
				for(uint32_t i=0; i<Nsize; i++)
2000d620:	69bb      	ldr	r3, [r7, #24]
2000d622:	3301      	adds	r3, #1
2000d624:	61bb      	str	r3, [r7, #24]
2000d626:	69ba      	ldr	r2, [r7, #24]
2000d628:	687b      	ldr	r3, [r7, #4]
2000d62a:	429a      	cmp	r2, r3
2000d62c:	d3e8      	bcc.n	2000d600 <MY_FLASH_WriteN+0x34>
				}
			break;
2000d62e:	e036      	b.n	2000d69e <MY_FLASH_WriteN+0xd2>
		
		case DATA_TYPE_16:
				for(uint32_t i=0; i<Nsize; i++)
2000d630:	2300      	movs	r3, #0
2000d632:	617b      	str	r3, [r7, #20]
2000d634:	e013      	b.n	2000d65e <MY_FLASH_WriteN+0x92>
				{
					HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, flashAddress , ((uint16_t *)wrBuf)[i]);
2000d636:	697b      	ldr	r3, [r7, #20]
2000d638:	005b      	lsls	r3, r3, #1
2000d63a:	68ba      	ldr	r2, [r7, #8]
2000d63c:	4413      	add	r3, r2
2000d63e:	881b      	ldrh	r3, [r3, #0]
2000d640:	b29b      	uxth	r3, r3
2000d642:	f04f 0400 	mov.w	r4, #0
2000d646:	461a      	mov	r2, r3
2000d648:	4623      	mov	r3, r4
2000d64a:	69f9      	ldr	r1, [r7, #28]
2000d64c:	2001      	movs	r0, #1
2000d64e:	f000 fd71 	bl	2000e134 <HAL_FLASH_Program>
					flashAddress+=2;
2000d652:	69fb      	ldr	r3, [r7, #28]
2000d654:	3302      	adds	r3, #2
2000d656:	61fb      	str	r3, [r7, #28]
				for(uint32_t i=0; i<Nsize; i++)
2000d658:	697b      	ldr	r3, [r7, #20]
2000d65a:	3301      	adds	r3, #1
2000d65c:	617b      	str	r3, [r7, #20]
2000d65e:	697a      	ldr	r2, [r7, #20]
2000d660:	687b      	ldr	r3, [r7, #4]
2000d662:	429a      	cmp	r2, r3
2000d664:	d3e7      	bcc.n	2000d636 <MY_FLASH_WriteN+0x6a>
				}
			break;
2000d666:	e01a      	b.n	2000d69e <MY_FLASH_WriteN+0xd2>
		
		case DATA_TYPE_32:
				for(uint32_t i=0; i<Nsize; i++)
2000d668:	2300      	movs	r3, #0
2000d66a:	613b      	str	r3, [r7, #16]
2000d66c:	e012      	b.n	2000d694 <MY_FLASH_WriteN+0xc8>
				{
					HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, flashAddress , ((uint32_t *)wrBuf)[i]);
2000d66e:	693b      	ldr	r3, [r7, #16]
2000d670:	009b      	lsls	r3, r3, #2
2000d672:	68ba      	ldr	r2, [r7, #8]
2000d674:	4413      	add	r3, r2
2000d676:	681b      	ldr	r3, [r3, #0]
2000d678:	f04f 0400 	mov.w	r4, #0
2000d67c:	461a      	mov	r2, r3
2000d67e:	4623      	mov	r3, r4
2000d680:	69f9      	ldr	r1, [r7, #28]
2000d682:	2002      	movs	r0, #2
2000d684:	f000 fd56 	bl	2000e134 <HAL_FLASH_Program>
					flashAddress+=4;
2000d688:	69fb      	ldr	r3, [r7, #28]
2000d68a:	3304      	adds	r3, #4
2000d68c:	61fb      	str	r3, [r7, #28]
				for(uint32_t i=0; i<Nsize; i++)
2000d68e:	693b      	ldr	r3, [r7, #16]
2000d690:	3301      	adds	r3, #1
2000d692:	613b      	str	r3, [r7, #16]
2000d694:	693a      	ldr	r2, [r7, #16]
2000d696:	687b      	ldr	r3, [r7, #4]
2000d698:	429a      	cmp	r2, r3
2000d69a:	d3e8      	bcc.n	2000d66e <MY_FLASH_WriteN+0xa2>
				}
			break;
2000d69c:	bf00      	nop
	}
	//Lock the Flash space
	HAL_FLASH_Lock();
2000d69e:	f000 fdbf 	bl	2000e220 <HAL_FLASH_Lock>
}
2000d6a2:	bf00      	nop
2000d6a4:	3724      	adds	r7, #36	; 0x24
2000d6a6:	46bd      	mov	sp, r7
2000d6a8:	bd90      	pop	{r4, r7, pc}
2000d6aa:	bf00      	nop
2000d6ac:	2000ff30 	.word	0x2000ff30

2000d6b0 <MY_FLASH_ReadN>:
//4. Read Flash
void MY_FLASH_ReadN(uint32_t idx, void *rdBuf, uint32_t Nsize, DataTypeDef dataType)
{
2000d6b0:	b480      	push	{r7}
2000d6b2:	b089      	sub	sp, #36	; 0x24
2000d6b4:	af00      	add	r7, sp, #0
2000d6b6:	60f8      	str	r0, [r7, #12]
2000d6b8:	60b9      	str	r1, [r7, #8]
2000d6ba:	607a      	str	r2, [r7, #4]
2000d6bc:	70fb      	strb	r3, [r7, #3]
	uint32_t flashAddress = MY_SectorAddrs + idx;
2000d6be:	4b28      	ldr	r3, [pc, #160]	; (2000d760 <MY_FLASH_ReadN+0xb0>)
2000d6c0:	681b      	ldr	r3, [r3, #0]
2000d6c2:	68fa      	ldr	r2, [r7, #12]
2000d6c4:	4413      	add	r3, r2
2000d6c6:	61fb      	str	r3, [r7, #28]
	
	switch(dataType)
2000d6c8:	78fb      	ldrb	r3, [r7, #3]
2000d6ca:	2b01      	cmp	r3, #1
2000d6cc:	d018      	beq.n	2000d700 <MY_FLASH_ReadN+0x50>
2000d6ce:	2b02      	cmp	r3, #2
2000d6d0:	d02b      	beq.n	2000d72a <MY_FLASH_ReadN+0x7a>
2000d6d2:	2b00      	cmp	r3, #0
2000d6d4:	d000      	beq.n	2000d6d8 <MY_FLASH_ReadN+0x28>
					*((uint32_t *)rdBuf + i) = *(uint32_t *)flashAddress;
					flashAddress+=4;
				}
			break;
	}
}
2000d6d6:	e03d      	b.n	2000d754 <MY_FLASH_ReadN+0xa4>
				for(uint32_t i=0; i<Nsize; i++)
2000d6d8:	2300      	movs	r3, #0
2000d6da:	61bb      	str	r3, [r7, #24]
2000d6dc:	e00b      	b.n	2000d6f6 <MY_FLASH_ReadN+0x46>
					*((uint8_t *)rdBuf + i) = *(uint8_t *)flashAddress;
2000d6de:	69fa      	ldr	r2, [r7, #28]
2000d6e0:	68b9      	ldr	r1, [r7, #8]
2000d6e2:	69bb      	ldr	r3, [r7, #24]
2000d6e4:	440b      	add	r3, r1
2000d6e6:	7812      	ldrb	r2, [r2, #0]
2000d6e8:	701a      	strb	r2, [r3, #0]
					flashAddress++;
2000d6ea:	69fb      	ldr	r3, [r7, #28]
2000d6ec:	3301      	adds	r3, #1
2000d6ee:	61fb      	str	r3, [r7, #28]
				for(uint32_t i=0; i<Nsize; i++)
2000d6f0:	69bb      	ldr	r3, [r7, #24]
2000d6f2:	3301      	adds	r3, #1
2000d6f4:	61bb      	str	r3, [r7, #24]
2000d6f6:	69ba      	ldr	r2, [r7, #24]
2000d6f8:	687b      	ldr	r3, [r7, #4]
2000d6fa:	429a      	cmp	r2, r3
2000d6fc:	d3ef      	bcc.n	2000d6de <MY_FLASH_ReadN+0x2e>
			break;
2000d6fe:	e029      	b.n	2000d754 <MY_FLASH_ReadN+0xa4>
				for(uint32_t i=0; i<Nsize; i++)
2000d700:	2300      	movs	r3, #0
2000d702:	617b      	str	r3, [r7, #20]
2000d704:	e00c      	b.n	2000d720 <MY_FLASH_ReadN+0x70>
					*((uint16_t *)rdBuf + i) = *(uint16_t *)flashAddress;
2000d706:	69fa      	ldr	r2, [r7, #28]
2000d708:	697b      	ldr	r3, [r7, #20]
2000d70a:	005b      	lsls	r3, r3, #1
2000d70c:	68b9      	ldr	r1, [r7, #8]
2000d70e:	440b      	add	r3, r1
2000d710:	8812      	ldrh	r2, [r2, #0]
2000d712:	801a      	strh	r2, [r3, #0]
					flashAddress+=2;
2000d714:	69fb      	ldr	r3, [r7, #28]
2000d716:	3302      	adds	r3, #2
2000d718:	61fb      	str	r3, [r7, #28]
				for(uint32_t i=0; i<Nsize; i++)
2000d71a:	697b      	ldr	r3, [r7, #20]
2000d71c:	3301      	adds	r3, #1
2000d71e:	617b      	str	r3, [r7, #20]
2000d720:	697a      	ldr	r2, [r7, #20]
2000d722:	687b      	ldr	r3, [r7, #4]
2000d724:	429a      	cmp	r2, r3
2000d726:	d3ee      	bcc.n	2000d706 <MY_FLASH_ReadN+0x56>
			break;
2000d728:	e014      	b.n	2000d754 <MY_FLASH_ReadN+0xa4>
				for(uint32_t i=0; i<Nsize; i++)
2000d72a:	2300      	movs	r3, #0
2000d72c:	613b      	str	r3, [r7, #16]
2000d72e:	e00c      	b.n	2000d74a <MY_FLASH_ReadN+0x9a>
					*((uint32_t *)rdBuf + i) = *(uint32_t *)flashAddress;
2000d730:	69fa      	ldr	r2, [r7, #28]
2000d732:	693b      	ldr	r3, [r7, #16]
2000d734:	009b      	lsls	r3, r3, #2
2000d736:	68b9      	ldr	r1, [r7, #8]
2000d738:	440b      	add	r3, r1
2000d73a:	6812      	ldr	r2, [r2, #0]
2000d73c:	601a      	str	r2, [r3, #0]
					flashAddress+=4;
2000d73e:	69fb      	ldr	r3, [r7, #28]
2000d740:	3304      	adds	r3, #4
2000d742:	61fb      	str	r3, [r7, #28]
				for(uint32_t i=0; i<Nsize; i++)
2000d744:	693b      	ldr	r3, [r7, #16]
2000d746:	3301      	adds	r3, #1
2000d748:	613b      	str	r3, [r7, #16]
2000d74a:	693a      	ldr	r2, [r7, #16]
2000d74c:	687b      	ldr	r3, [r7, #4]
2000d74e:	429a      	cmp	r2, r3
2000d750:	d3ee      	bcc.n	2000d730 <MY_FLASH_ReadN+0x80>
			break;
2000d752:	bf00      	nop
}
2000d754:	bf00      	nop
2000d756:	3724      	adds	r7, #36	; 0x24
2000d758:	46bd      	mov	sp, r7
2000d75a:	f85d 7b04 	ldr.w	r7, [sp], #4
2000d75e:	4770      	bx	lr
2000d760:	2000ff30 	.word	0x2000ff30

2000d764 <crc32stream>:
    0xBAD03605UL, 0xCDD70693UL, 0x54DE5729UL, 0x23D967BFUL, 
    0xB3667A2EUL, 0xC4614AB8UL, 0x5D681B02UL, 0x2A6F2B94UL, 
    0xB40BBE37UL, 0xC30C8EA1UL, 0x5A05DF1BUL, 0x2D02EF8DUL };

unsigned long crc32stream( unsigned char c, unsigned long crc )    
{
2000d764:	b480      	push	{r7}
2000d766:	b083      	sub	sp, #12
2000d768:	af00      	add	r7, sp, #0
2000d76a:	4603      	mov	r3, r0
2000d76c:	6039      	str	r1, [r7, #0]
2000d76e:	71fb      	strb	r3, [r7, #7]
    crc = ((crc>>8) & 0x00FFFFFF) ^ crc32_table[ (crc^c) & 0xFF ];
2000d770:	683b      	ldr	r3, [r7, #0]
2000d772:	0a1a      	lsrs	r2, r3, #8
2000d774:	79f9      	ldrb	r1, [r7, #7]
2000d776:	683b      	ldr	r3, [r7, #0]
2000d778:	404b      	eors	r3, r1
2000d77a:	b2db      	uxtb	r3, r3
2000d77c:	4906      	ldr	r1, [pc, #24]	; (2000d798 <crc32stream+0x34>)
2000d77e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
2000d782:	4053      	eors	r3, r2
2000d784:	603b      	str	r3, [r7, #0]
    return( crc^0xFFFFFFFF );
2000d786:	683b      	ldr	r3, [r7, #0]
2000d788:	43db      	mvns	r3, r3
}
2000d78a:	4618      	mov	r0, r3
2000d78c:	370c      	adds	r7, #12
2000d78e:	46bd      	mov	sp, r7
2000d790:	f85d 7b04 	ldr.w	r7, [sp], #4
2000d794:	4770      	bx	lr
2000d796:	bf00      	nop
2000d798:	2000fa40 	.word	0x2000fa40

2000d79c <crc32>:


unsigned long crc32( unsigned char * buf, unsigned long len, unsigned long crc )    
{
2000d79c:	b580      	push	{r7, lr}
2000d79e:	b086      	sub	sp, #24
2000d7a0:	af00      	add	r7, sp, #0
2000d7a2:	60f8      	str	r0, [r7, #12]
2000d7a4:	60b9      	str	r1, [r7, #8]
2000d7a6:	607a      	str	r2, [r7, #4]
unsigned long i;

    for( i = 0; i < len; i++ )
2000d7a8:	2300      	movs	r3, #0
2000d7aa:	617b      	str	r3, [r7, #20]
2000d7ac:	e00b      	b.n	2000d7c6 <crc32+0x2a>
	{
        crc = crc32stream( buf[ i ], crc );
2000d7ae:	68fa      	ldr	r2, [r7, #12]
2000d7b0:	697b      	ldr	r3, [r7, #20]
2000d7b2:	4413      	add	r3, r2
2000d7b4:	781b      	ldrb	r3, [r3, #0]
2000d7b6:	6879      	ldr	r1, [r7, #4]
2000d7b8:	4618      	mov	r0, r3
2000d7ba:	f7ff ffd3 	bl	2000d764 <crc32stream>
2000d7be:	6078      	str	r0, [r7, #4]
    for( i = 0; i < len; i++ )
2000d7c0:	697b      	ldr	r3, [r7, #20]
2000d7c2:	3301      	adds	r3, #1
2000d7c4:	617b      	str	r3, [r7, #20]
2000d7c6:	697a      	ldr	r2, [r7, #20]
2000d7c8:	68bb      	ldr	r3, [r7, #8]
2000d7ca:	429a      	cmp	r2, r3
2000d7cc:	d3ef      	bcc.n	2000d7ae <crc32+0x12>
	}

    return crc;
2000d7ce:	687b      	ldr	r3, [r7, #4]
}
2000d7d0:	4618      	mov	r0, r3
2000d7d2:	3718      	adds	r7, #24
2000d7d4:	46bd      	mov	sp, r7
2000d7d6:	bd80      	pop	{r7, pc}

2000d7d8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
2000d7d8:	b580      	push	{r7, lr}
2000d7da:	b08a      	sub	sp, #40	; 0x28
2000d7dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
2000d7de:	f107 0314 	add.w	r3, r7, #20
2000d7e2:	2200      	movs	r2, #0
2000d7e4:	601a      	str	r2, [r3, #0]
2000d7e6:	605a      	str	r2, [r3, #4]
2000d7e8:	609a      	str	r2, [r3, #8]
2000d7ea:	60da      	str	r2, [r3, #12]
2000d7ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
2000d7ee:	2300      	movs	r3, #0
2000d7f0:	613b      	str	r3, [r7, #16]
2000d7f2:	4b27      	ldr	r3, [pc, #156]	; (2000d890 <MX_GPIO_Init+0xb8>)
2000d7f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2000d7f6:	4a26      	ldr	r2, [pc, #152]	; (2000d890 <MX_GPIO_Init+0xb8>)
2000d7f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
2000d7fc:	6313      	str	r3, [r2, #48]	; 0x30
2000d7fe:	4b24      	ldr	r3, [pc, #144]	; (2000d890 <MX_GPIO_Init+0xb8>)
2000d800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2000d802:	f003 0380 	and.w	r3, r3, #128	; 0x80
2000d806:	613b      	str	r3, [r7, #16]
2000d808:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
2000d80a:	2300      	movs	r3, #0
2000d80c:	60fb      	str	r3, [r7, #12]
2000d80e:	4b20      	ldr	r3, [pc, #128]	; (2000d890 <MX_GPIO_Init+0xb8>)
2000d810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2000d812:	4a1f      	ldr	r2, [pc, #124]	; (2000d890 <MX_GPIO_Init+0xb8>)
2000d814:	f043 0308 	orr.w	r3, r3, #8
2000d818:	6313      	str	r3, [r2, #48]	; 0x30
2000d81a:	4b1d      	ldr	r3, [pc, #116]	; (2000d890 <MX_GPIO_Init+0xb8>)
2000d81c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2000d81e:	f003 0308 	and.w	r3, r3, #8
2000d822:	60fb      	str	r3, [r7, #12]
2000d824:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
2000d826:	2300      	movs	r3, #0
2000d828:	60bb      	str	r3, [r7, #8]
2000d82a:	4b19      	ldr	r3, [pc, #100]	; (2000d890 <MX_GPIO_Init+0xb8>)
2000d82c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2000d82e:	4a18      	ldr	r2, [pc, #96]	; (2000d890 <MX_GPIO_Init+0xb8>)
2000d830:	f043 0301 	orr.w	r3, r3, #1
2000d834:	6313      	str	r3, [r2, #48]	; 0x30
2000d836:	4b16      	ldr	r3, [pc, #88]	; (2000d890 <MX_GPIO_Init+0xb8>)
2000d838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2000d83a:	f003 0301 	and.w	r3, r3, #1
2000d83e:	60bb      	str	r3, [r7, #8]
2000d840:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
2000d842:	2300      	movs	r3, #0
2000d844:	607b      	str	r3, [r7, #4]
2000d846:	4b12      	ldr	r3, [pc, #72]	; (2000d890 <MX_GPIO_Init+0xb8>)
2000d848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2000d84a:	4a11      	ldr	r2, [pc, #68]	; (2000d890 <MX_GPIO_Init+0xb8>)
2000d84c:	f043 0302 	orr.w	r3, r3, #2
2000d850:	6313      	str	r3, [r2, #48]	; 0x30
2000d852:	4b0f      	ldr	r3, [pc, #60]	; (2000d890 <MX_GPIO_Init+0xb8>)
2000d854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2000d856:	f003 0302 	and.w	r3, r3, #2
2000d85a:	607b      	str	r3, [r7, #4]
2000d85c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
2000d85e:	2200      	movs	r2, #0
2000d860:	f44f 4160 	mov.w	r1, #57344	; 0xe000
2000d864:	480b      	ldr	r0, [pc, #44]	; (2000d894 <MX_GPIO_Init+0xbc>)
2000d866:	f000 fffb 	bl	2000e860 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
2000d86a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
2000d86e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
2000d870:	2301      	movs	r3, #1
2000d872:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
2000d874:	2300      	movs	r3, #0
2000d876:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
2000d878:	2302      	movs	r3, #2
2000d87a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
2000d87c:	f107 0314 	add.w	r3, r7, #20
2000d880:	4619      	mov	r1, r3
2000d882:	4804      	ldr	r0, [pc, #16]	; (2000d894 <MX_GPIO_Init+0xbc>)
2000d884:	f000 fe52 	bl	2000e52c <HAL_GPIO_Init>

}
2000d888:	bf00      	nop
2000d88a:	3728      	adds	r7, #40	; 0x28
2000d88c:	46bd      	mov	sp, r7
2000d88e:	bd80      	pop	{r7, pc}
2000d890:	40023800 	.word	0x40023800
2000d894:	40020c00 	.word	0x40020c00

2000d898 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
2000d898:	b580      	push	{r7, lr}
2000d89a:	af00      	add	r7, sp, #0

  hiwdg.Instance = IWDG;
2000d89c:	4b09      	ldr	r3, [pc, #36]	; (2000d8c4 <MX_IWDG_Init+0x2c>)
2000d89e:	4a0a      	ldr	r2, [pc, #40]	; (2000d8c8 <MX_IWDG_Init+0x30>)
2000d8a0:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_64;
2000d8a2:	4b08      	ldr	r3, [pc, #32]	; (2000d8c4 <MX_IWDG_Init+0x2c>)
2000d8a4:	2204      	movs	r2, #4
2000d8a6:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4095;
2000d8a8:	4b06      	ldr	r3, [pc, #24]	; (2000d8c4 <MX_IWDG_Init+0x2c>)
2000d8aa:	f640 72ff 	movw	r2, #4095	; 0xfff
2000d8ae:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
2000d8b0:	4804      	ldr	r0, [pc, #16]	; (2000d8c4 <MX_IWDG_Init+0x2c>)
2000d8b2:	f000 ffee 	bl	2000e892 <HAL_IWDG_Init>
2000d8b6:	4603      	mov	r3, r0
2000d8b8:	2b00      	cmp	r3, #0
2000d8ba:	d001      	beq.n	2000d8c0 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
2000d8bc:	f000 f8fe 	bl	2000dabc <Error_Handler>
  }

}
2000d8c0:	bf00      	nop
2000d8c2:	bd80      	pop	{r7, pc}
2000d8c4:	2000ff48 	.word	0x2000ff48
2000d8c8:	40003000 	.word	0x40003000

2000d8cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
2000d8cc:	b580      	push	{r7, lr}
2000d8ce:	b082      	sub	sp, #8
2000d8d0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
2000d8d2:	f000 fad7 	bl	2000de84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
2000d8d6:	f000 f885 	bl	2000d9e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
2000d8da:	f7ff ff7d 	bl	2000d7d8 <MX_GPIO_Init>
  MX_IWDG_Init();
2000d8de:	f7ff ffdb 	bl	2000d898 <MX_IWDG_Init>
  /* USER CODE BEGIN 2 */

  /* Do not remove this code below */
  MX_TRACE_Init();
2000d8e2:	f000 f995 	bl	2000dc10 <MX_TRACE_Init>
  SDK_TRACE_Start();
2000d8e6:	f000 f9b5 	bl	2000dc54 <SDK_TRACE_Start>
  /* Do not remove this code from above */

  /* Place your code from here */

  //	устанавливаем с каким местом флеш памяти будем работать
  MY_FLASH_SetSectorAddrs(FLASH_SECTOR_NUMBER, BLOCK_BASE_ADRESSES);
2000d8ea:	4939      	ldr	r1, [pc, #228]	; (2000d9d0 <main+0x104>)
2000d8ec:	200b      	movs	r0, #11
2000d8ee:	f7ff fe57 	bl	2000d5a0 <MY_FLASH_SetSectorAddrs>

  //	выделяем память и устанавливаем всё в 0
  SDK_TRACE_Timestamp(P0, 1);
2000d8f2:	2101      	movs	r1, #1
2000d8f4:	2010      	movs	r0, #16
2000d8f6:	f000 f9e5 	bl	2000dcc4 <SDK_TRACE_Timestamp>
  char * ptr_flash = (char *) calloc(BUF_LENGTH, sizeof(char));
2000d8fa:	2101      	movs	r1, #1
2000d8fc:	200a      	movs	r0, #10
2000d8fe:	f001 fc15 	bl	2000f12c <calloc>
2000d902:	4603      	mov	r3, r0
2000d904:	603b      	str	r3, [r7, #0]
  SDK_TRACE_Timestamp(P0, 0);
2000d906:	2100      	movs	r1, #0
2000d908:	2010      	movs	r0, #16
2000d90a:	f000 f9db 	bl	2000dcc4 <SDK_TRACE_Timestamp>
  for(int i = 0; i < BUF_LENGTH - 1; i++)
2000d90e:	2300      	movs	r3, #0
2000d910:	607b      	str	r3, [r7, #4]
2000d912:	e00a      	b.n	2000d92a <main+0x5e>
	  ptr_flash[i] = 'A' + i;
2000d914:	687b      	ldr	r3, [r7, #4]
2000d916:	b2da      	uxtb	r2, r3
2000d918:	687b      	ldr	r3, [r7, #4]
2000d91a:	6839      	ldr	r1, [r7, #0]
2000d91c:	440b      	add	r3, r1
2000d91e:	3241      	adds	r2, #65	; 0x41
2000d920:	b2d2      	uxtb	r2, r2
2000d922:	701a      	strb	r2, [r3, #0]
  for(int i = 0; i < BUF_LENGTH - 1; i++)
2000d924:	687b      	ldr	r3, [r7, #4]
2000d926:	3301      	adds	r3, #1
2000d928:	607b      	str	r3, [r7, #4]
2000d92a:	687b      	ldr	r3, [r7, #4]
2000d92c:	2b08      	cmp	r3, #8
2000d92e:	ddf1      	ble.n	2000d914 <main+0x48>

  SDK_TRACE_Print("%s", "/////orig string/////");
2000d930:	4928      	ldr	r1, [pc, #160]	; (2000d9d4 <main+0x108>)
2000d932:	4829      	ldr	r0, [pc, #164]	; (2000d9d8 <main+0x10c>)
2000d934:	f000 fa18 	bl	2000dd68 <SDK_TRACE_Print>
  SDK_TRACE_Print("%s", ptr_flash);
2000d938:	6839      	ldr	r1, [r7, #0]
2000d93a:	4827      	ldr	r0, [pc, #156]	; (2000d9d8 <main+0x10c>)
2000d93c:	f000 fa14 	bl	2000dd68 <SDK_TRACE_Print>

  //	записываем во флеш нашу строку
  SDK_TRACE_Timestamp(P1, 1);
2000d940:	2101      	movs	r1, #1
2000d942:	2011      	movs	r0, #17
2000d944:	f000 f9be 	bl	2000dcc4 <SDK_TRACE_Timestamp>
  MY_FLASH_WriteN(0, ptr_flash, BUF_LENGTH, DATA_TYPE_8);
2000d948:	2300      	movs	r3, #0
2000d94a:	220a      	movs	r2, #10
2000d94c:	6839      	ldr	r1, [r7, #0]
2000d94e:	2000      	movs	r0, #0
2000d950:	f7ff fe3c 	bl	2000d5cc <MY_FLASH_WriteN>
  SDK_TRACE_Timestamp(P1, 0);
2000d954:	2100      	movs	r1, #0
2000d956:	2011      	movs	r0, #17
2000d958:	f000 f9b4 	bl	2000dcc4 <SDK_TRACE_Timestamp>

  //	чистим строку
  SDK_TRACE_Timestamp(P2, 1);
2000d95c:	2101      	movs	r1, #1
2000d95e:	2012      	movs	r0, #18
2000d960:	f000 f9b0 	bl	2000dcc4 <SDK_TRACE_Timestamp>
  memset (ptr_flash, 0, BUF_LENGTH);
2000d964:	220a      	movs	r2, #10
2000d966:	2100      	movs	r1, #0
2000d968:	6838      	ldr	r0, [r7, #0]
2000d96a:	f001 fc19 	bl	2000f1a0 <memset>
  SDK_TRACE_Timestamp(P2, 0);
2000d96e:	2100      	movs	r1, #0
2000d970:	2012      	movs	r0, #18
2000d972:	f000 f9a7 	bl	2000dcc4 <SDK_TRACE_Timestamp>

  SDK_TRACE_Print("%s", "/////empty string/////");
2000d976:	4919      	ldr	r1, [pc, #100]	; (2000d9dc <main+0x110>)
2000d978:	4817      	ldr	r0, [pc, #92]	; (2000d9d8 <main+0x10c>)
2000d97a:	f000 f9f5 	bl	2000dd68 <SDK_TRACE_Print>
  SDK_TRACE_Print("%s", ptr_flash);
2000d97e:	6839      	ldr	r1, [r7, #0]
2000d980:	4815      	ldr	r0, [pc, #84]	; (2000d9d8 <main+0x10c>)
2000d982:	f000 f9f1 	bl	2000dd68 <SDK_TRACE_Print>

  //	считываем данные с флеш
  SDK_TRACE_Timestamp(P3, 1);
2000d986:	2101      	movs	r1, #1
2000d988:	2013      	movs	r0, #19
2000d98a:	f000 f99b 	bl	2000dcc4 <SDK_TRACE_Timestamp>
  MY_FLASH_ReadN(0, ptr_flash, BUF_LENGTH, DATA_TYPE_8);
2000d98e:	2300      	movs	r3, #0
2000d990:	220a      	movs	r2, #10
2000d992:	6839      	ldr	r1, [r7, #0]
2000d994:	2000      	movs	r0, #0
2000d996:	f7ff fe8b 	bl	2000d6b0 <MY_FLASH_ReadN>
  SDK_TRACE_Timestamp(P3, 0);
2000d99a:	2100      	movs	r1, #0
2000d99c:	2013      	movs	r0, #19
2000d99e:	f000 f991 	bl	2000dcc4 <SDK_TRACE_Timestamp>

  SDK_TRACE_Print("%s", "/////string from flash/////");
2000d9a2:	490f      	ldr	r1, [pc, #60]	; (2000d9e0 <main+0x114>)
2000d9a4:	480c      	ldr	r0, [pc, #48]	; (2000d9d8 <main+0x10c>)
2000d9a6:	f000 f9df 	bl	2000dd68 <SDK_TRACE_Print>
  SDK_TRACE_Print("%s", ptr_flash);
2000d9aa:	6839      	ldr	r1, [r7, #0]
2000d9ac:	480a      	ldr	r0, [pc, #40]	; (2000d9d8 <main+0x10c>)
2000d9ae:	f000 f9db 	bl	2000dd68 <SDK_TRACE_Print>

  //	освобождаем память
  SDK_TRACE_Timestamp(P4, 1);
2000d9b2:	2101      	movs	r1, #1
2000d9b4:	2014      	movs	r0, #20
2000d9b6:	f000 f985 	bl	2000dcc4 <SDK_TRACE_Timestamp>
  free(ptr_flash);
2000d9ba:	6838      	ldr	r0, [r7, #0]
2000d9bc:	f001 fbe8 	bl	2000f190 <free>
  SDK_TRACE_Timestamp(P4, 0);
2000d9c0:	2100      	movs	r1, #0
2000d9c2:	2014      	movs	r0, #20
2000d9c4:	f000 f97e 	bl	2000dcc4 <SDK_TRACE_Timestamp>

  /* Place your code before here */
  /* Do not remove this code below */
  SDK_TRACE_Stop();
2000d9c8:	f000 f954 	bl	2000dc74 <SDK_TRACE_Stop>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
2000d9cc:	e7fe      	b.n	2000d9cc <main+0x100>
2000d9ce:	bf00      	nop
2000d9d0:	080e0000 	.word	0x080e0000
2000d9d4:	2000f9f0 	.word	0x2000f9f0
2000d9d8:	2000fa08 	.word	0x2000fa08
2000d9dc:	2000fa0c 	.word	0x2000fa0c
2000d9e0:	2000fa24 	.word	0x2000fa24

2000d9e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
2000d9e4:	b580      	push	{r7, lr}
2000d9e6:	b094      	sub	sp, #80	; 0x50
2000d9e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
2000d9ea:	f107 0320 	add.w	r3, r7, #32
2000d9ee:	2230      	movs	r2, #48	; 0x30
2000d9f0:	2100      	movs	r1, #0
2000d9f2:	4618      	mov	r0, r3
2000d9f4:	f001 fbd4 	bl	2000f1a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
2000d9f8:	f107 030c 	add.w	r3, r7, #12
2000d9fc:	2200      	movs	r2, #0
2000d9fe:	601a      	str	r2, [r3, #0]
2000da00:	605a      	str	r2, [r3, #4]
2000da02:	609a      	str	r2, [r3, #8]
2000da04:	60da      	str	r2, [r3, #12]
2000da06:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
2000da08:	2300      	movs	r3, #0
2000da0a:	60bb      	str	r3, [r7, #8]
2000da0c:	4b29      	ldr	r3, [pc, #164]	; (2000dab4 <SystemClock_Config+0xd0>)
2000da0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2000da10:	4a28      	ldr	r2, [pc, #160]	; (2000dab4 <SystemClock_Config+0xd0>)
2000da12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
2000da16:	6413      	str	r3, [r2, #64]	; 0x40
2000da18:	4b26      	ldr	r3, [pc, #152]	; (2000dab4 <SystemClock_Config+0xd0>)
2000da1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2000da1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
2000da20:	60bb      	str	r3, [r7, #8]
2000da22:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
2000da24:	2300      	movs	r3, #0
2000da26:	607b      	str	r3, [r7, #4]
2000da28:	4b23      	ldr	r3, [pc, #140]	; (2000dab8 <SystemClock_Config+0xd4>)
2000da2a:	681b      	ldr	r3, [r3, #0]
2000da2c:	4a22      	ldr	r2, [pc, #136]	; (2000dab8 <SystemClock_Config+0xd4>)
2000da2e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
2000da32:	6013      	str	r3, [r2, #0]
2000da34:	4b20      	ldr	r3, [pc, #128]	; (2000dab8 <SystemClock_Config+0xd4>)
2000da36:	681b      	ldr	r3, [r3, #0]
2000da38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
2000da3c:	607b      	str	r3, [r7, #4]
2000da3e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
2000da40:	2309      	movs	r3, #9
2000da42:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
2000da44:	f44f 3380 	mov.w	r3, #65536	; 0x10000
2000da48:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
2000da4a:	2301      	movs	r3, #1
2000da4c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
2000da4e:	2302      	movs	r3, #2
2000da50:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
2000da52:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
2000da56:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
2000da58:	2319      	movs	r3, #25
2000da5a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
2000da5c:	f44f 73a8 	mov.w	r3, #336	; 0x150
2000da60:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
2000da62:	2302      	movs	r3, #2
2000da64:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
2000da66:	2304      	movs	r3, #4
2000da68:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
2000da6a:	f107 0320 	add.w	r3, r7, #32
2000da6e:	4618      	mov	r0, r3
2000da70:	f000 ff48 	bl	2000e904 <HAL_RCC_OscConfig>
2000da74:	4603      	mov	r3, r0
2000da76:	2b00      	cmp	r3, #0
2000da78:	d001      	beq.n	2000da7e <SystemClock_Config+0x9a>
  {
    Error_Handler();
2000da7a:	f000 f81f 	bl	2000dabc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
2000da7e:	230f      	movs	r3, #15
2000da80:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
2000da82:	2302      	movs	r3, #2
2000da84:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
2000da86:	2300      	movs	r3, #0
2000da88:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
2000da8a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
2000da8e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
2000da90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
2000da94:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
2000da96:	f107 030c 	add.w	r3, r7, #12
2000da9a:	2105      	movs	r1, #5
2000da9c:	4618      	mov	r0, r3
2000da9e:	f001 f9a1 	bl	2000ede4 <HAL_RCC_ClockConfig>
2000daa2:	4603      	mov	r3, r0
2000daa4:	2b00      	cmp	r3, #0
2000daa6:	d001      	beq.n	2000daac <SystemClock_Config+0xc8>
  {
    Error_Handler();
2000daa8:	f000 f808 	bl	2000dabc <Error_Handler>
  }
}
2000daac:	bf00      	nop
2000daae:	3750      	adds	r7, #80	; 0x50
2000dab0:	46bd      	mov	sp, r7
2000dab2:	bd80      	pop	{r7, pc}
2000dab4:	40023800 	.word	0x40023800
2000dab8:	40007000 	.word	0x40007000

2000dabc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
2000dabc:	b480      	push	{r7}
2000dabe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
2000dac0:	bf00      	nop
2000dac2:	46bd      	mov	sp, r7
2000dac4:	f85d 7b04 	ldr.w	r7, [sp], #4
2000dac8:	4770      	bx	lr
	...

2000dacc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
2000dacc:	b480      	push	{r7}
2000dace:	b083      	sub	sp, #12
2000dad0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
2000dad2:	2300      	movs	r3, #0
2000dad4:	607b      	str	r3, [r7, #4]
2000dad6:	4b10      	ldr	r3, [pc, #64]	; (2000db18 <HAL_MspInit+0x4c>)
2000dad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2000dada:	4a0f      	ldr	r2, [pc, #60]	; (2000db18 <HAL_MspInit+0x4c>)
2000dadc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
2000dae0:	6453      	str	r3, [r2, #68]	; 0x44
2000dae2:	4b0d      	ldr	r3, [pc, #52]	; (2000db18 <HAL_MspInit+0x4c>)
2000dae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2000dae6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
2000daea:	607b      	str	r3, [r7, #4]
2000daec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
2000daee:	2300      	movs	r3, #0
2000daf0:	603b      	str	r3, [r7, #0]
2000daf2:	4b09      	ldr	r3, [pc, #36]	; (2000db18 <HAL_MspInit+0x4c>)
2000daf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2000daf6:	4a08      	ldr	r2, [pc, #32]	; (2000db18 <HAL_MspInit+0x4c>)
2000daf8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
2000dafc:	6413      	str	r3, [r2, #64]	; 0x40
2000dafe:	4b06      	ldr	r3, [pc, #24]	; (2000db18 <HAL_MspInit+0x4c>)
2000db00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2000db02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
2000db06:	603b      	str	r3, [r7, #0]
2000db08:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
2000db0a:	bf00      	nop
2000db0c:	370c      	adds	r7, #12
2000db0e:	46bd      	mov	sp, r7
2000db10:	f85d 7b04 	ldr.w	r7, [sp], #4
2000db14:	4770      	bx	lr
2000db16:	bf00      	nop
2000db18:	40023800 	.word	0x40023800

2000db1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
2000db1c:	b480      	push	{r7}
2000db1e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
2000db20:	bf00      	nop
2000db22:	46bd      	mov	sp, r7
2000db24:	f85d 7b04 	ldr.w	r7, [sp], #4
2000db28:	4770      	bx	lr

2000db2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
2000db2a:	b480      	push	{r7}
2000db2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
2000db2e:	e7fe      	b.n	2000db2e <HardFault_Handler+0x4>

2000db30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
2000db30:	b480      	push	{r7}
2000db32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
2000db34:	e7fe      	b.n	2000db34 <MemManage_Handler+0x4>

2000db36 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
2000db36:	b480      	push	{r7}
2000db38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
2000db3a:	e7fe      	b.n	2000db3a <BusFault_Handler+0x4>

2000db3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
2000db3c:	b480      	push	{r7}
2000db3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
2000db40:	e7fe      	b.n	2000db40 <UsageFault_Handler+0x4>

2000db42 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
2000db42:	b480      	push	{r7}
2000db44:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
2000db46:	bf00      	nop
2000db48:	46bd      	mov	sp, r7
2000db4a:	f85d 7b04 	ldr.w	r7, [sp], #4
2000db4e:	4770      	bx	lr

2000db50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
2000db50:	b480      	push	{r7}
2000db52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
2000db54:	bf00      	nop
2000db56:	46bd      	mov	sp, r7
2000db58:	f85d 7b04 	ldr.w	r7, [sp], #4
2000db5c:	4770      	bx	lr

2000db5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
2000db5e:	b480      	push	{r7}
2000db60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
2000db62:	bf00      	nop
2000db64:	46bd      	mov	sp, r7
2000db66:	f85d 7b04 	ldr.w	r7, [sp], #4
2000db6a:	4770      	bx	lr

2000db6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
2000db6c:	b580      	push	{r7, lr}
2000db6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
2000db70:	f000 f9da 	bl	2000df28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
2000db74:	bf00      	nop
2000db76:	bd80      	pop	{r7, pc}

2000db78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
2000db78:	b580      	push	{r7, lr}
2000db7a:	b086      	sub	sp, #24
2000db7c:	af00      	add	r7, sp, #0
2000db7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
2000db80:	4a14      	ldr	r2, [pc, #80]	; (2000dbd4 <_sbrk+0x5c>)
2000db82:	4b15      	ldr	r3, [pc, #84]	; (2000dbd8 <_sbrk+0x60>)
2000db84:	1ad3      	subs	r3, r2, r3
2000db86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
2000db88:	697b      	ldr	r3, [r7, #20]
2000db8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
2000db8c:	4b13      	ldr	r3, [pc, #76]	; (2000dbdc <_sbrk+0x64>)
2000db8e:	681b      	ldr	r3, [r3, #0]
2000db90:	2b00      	cmp	r3, #0
2000db92:	d102      	bne.n	2000db9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
2000db94:	4b11      	ldr	r3, [pc, #68]	; (2000dbdc <_sbrk+0x64>)
2000db96:	4a12      	ldr	r2, [pc, #72]	; (2000dbe0 <_sbrk+0x68>)
2000db98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
2000db9a:	4b10      	ldr	r3, [pc, #64]	; (2000dbdc <_sbrk+0x64>)
2000db9c:	681a      	ldr	r2, [r3, #0]
2000db9e:	687b      	ldr	r3, [r7, #4]
2000dba0:	4413      	add	r3, r2
2000dba2:	693a      	ldr	r2, [r7, #16]
2000dba4:	429a      	cmp	r2, r3
2000dba6:	d207      	bcs.n	2000dbb8 <_sbrk+0x40>
  {
    errno = ENOMEM;
2000dba8:	f001 fac8 	bl	2000f13c <__errno>
2000dbac:	4602      	mov	r2, r0
2000dbae:	230c      	movs	r3, #12
2000dbb0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
2000dbb2:	f04f 33ff 	mov.w	r3, #4294967295
2000dbb6:	e009      	b.n	2000dbcc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
2000dbb8:	4b08      	ldr	r3, [pc, #32]	; (2000dbdc <_sbrk+0x64>)
2000dbba:	681b      	ldr	r3, [r3, #0]
2000dbbc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
2000dbbe:	4b07      	ldr	r3, [pc, #28]	; (2000dbdc <_sbrk+0x64>)
2000dbc0:	681a      	ldr	r2, [r3, #0]
2000dbc2:	687b      	ldr	r3, [r7, #4]
2000dbc4:	4413      	add	r3, r2
2000dbc6:	4a05      	ldr	r2, [pc, #20]	; (2000dbdc <_sbrk+0x64>)
2000dbc8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
2000dbca:	68fb      	ldr	r3, [r7, #12]
}
2000dbcc:	4618      	mov	r0, r3
2000dbce:	3718      	adds	r7, #24
2000dbd0:	46bd      	mov	sp, r7
2000dbd2:	bd80      	pop	{r7, pc}
2000dbd4:	20020000 	.word	0x20020000
2000dbd8:	00000400 	.word	0x00000400
2000dbdc:	2000ff38 	.word	0x2000ff38
2000dbe0:	20010080 	.word	0x20010080

2000dbe4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
2000dbe4:	b480      	push	{r7}
2000dbe6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
2000dbe8:	4b07      	ldr	r3, [pc, #28]	; (2000dc08 <SystemInit+0x24>)
2000dbea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
2000dbee:	4a06      	ldr	r2, [pc, #24]	; (2000dc08 <SystemInit+0x24>)
2000dbf0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
2000dbf4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
2000dbf8:	4b03      	ldr	r3, [pc, #12]	; (2000dc08 <SystemInit+0x24>)
2000dbfa:	4a04      	ldr	r2, [pc, #16]	; (2000dc0c <SystemInit+0x28>)
2000dbfc:	609a      	str	r2, [r3, #8]
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif
}
2000dbfe:	bf00      	nop
2000dc00:	46bd      	mov	sp, r7
2000dc02:	f85d 7b04 	ldr.w	r7, [sp], #4
2000dc06:	4770      	bx	lr
2000dc08:	e000ed00 	.word	0xe000ed00
2000dc0c:	2000d000 	.word	0x2000d000

2000dc10 <MX_TRACE_Init>:
 * ----------------------------------------------------------------------
 * Trace initialization function
 *-----------------------------------------------------------------------
 */
void MX_TRACE_Init(void)
{
2000dc10:	b480      	push	{r7}
2000dc12:	af00      	add	r7, sp, #0
	InitCC();
2000dc14:	4b0c      	ldr	r3, [pc, #48]	; (2000dc48 <MX_TRACE_Init+0x38>)
2000dc16:	681b      	ldr	r3, [r3, #0]
2000dc18:	4a0b      	ldr	r2, [pc, #44]	; (2000dc48 <MX_TRACE_Init+0x38>)
2000dc1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
2000dc1e:	6013      	str	r3, [r2, #0]
	ResetCC();
2000dc20:	4b0a      	ldr	r3, [pc, #40]	; (2000dc4c <MX_TRACE_Init+0x3c>)
2000dc22:	2200      	movs	r2, #0
2000dc24:	601a      	str	r2, [r3, #0]
	TI->printlog_size = 0x00;
2000dc26:	4b0a      	ldr	r3, [pc, #40]	; (2000dc50 <MX_TRACE_Init+0x40>)
2000dc28:	681b      	ldr	r3, [r3, #0]
2000dc2a:	2200      	movs	r2, #0
2000dc2c:	605a      	str	r2, [r3, #4]
	TI->tracelog_size = 0x00;
2000dc2e:	4b08      	ldr	r3, [pc, #32]	; (2000dc50 <MX_TRACE_Init+0x40>)
2000dc30:	681b      	ldr	r3, [r3, #0]
2000dc32:	2200      	movs	r2, #0
2000dc34:	601a      	str	r2, [r3, #0]
	TI->dumpbuf_size = 0x00;
2000dc36:	4b06      	ldr	r3, [pc, #24]	; (2000dc50 <MX_TRACE_Init+0x40>)
2000dc38:	681b      	ldr	r3, [r3, #0]
2000dc3a:	2200      	movs	r2, #0
2000dc3c:	609a      	str	r2, [r3, #8]
}
2000dc3e:	bf00      	nop
2000dc40:	46bd      	mov	sp, r7
2000dc42:	f85d 7b04 	ldr.w	r7, [sp], #4
2000dc46:	4770      	bx	lr
2000dc48:	e000edfc 	.word	0xe000edfc
2000dc4c:	e0001004 	.word	0xe0001004
2000dc50:	2000fe98 	.word	0x2000fe98

2000dc54 <SDK_TRACE_Start>:
 * ----------------------------------------------------------------------
 * Start trace recording function
 *-----------------------------------------------------------------------
 */
void SDK_TRACE_Start(void)
{
2000dc54:	b480      	push	{r7}
2000dc56:	af00      	add	r7, sp, #0
	EnableCC();
2000dc58:	4b05      	ldr	r3, [pc, #20]	; (2000dc70 <SDK_TRACE_Start+0x1c>)
2000dc5a:	681b      	ldr	r3, [r3, #0]
2000dc5c:	4a04      	ldr	r2, [pc, #16]	; (2000dc70 <SDK_TRACE_Start+0x1c>)
2000dc5e:	f043 0301 	orr.w	r3, r3, #1
2000dc62:	6013      	str	r3, [r2, #0]
}
2000dc64:	bf00      	nop
2000dc66:	46bd      	mov	sp, r7
2000dc68:	f85d 7b04 	ldr.w	r7, [sp], #4
2000dc6c:	4770      	bx	lr
2000dc6e:	bf00      	nop
2000dc70:	e0001000 	.word	0xe0001000

2000dc74 <SDK_TRACE_Stop>:
 * ----------------------------------------------------------------------
 * Stop trace recording function
 *-----------------------------------------------------------------------
 */
void SDK_TRACE_Stop(void)
{
2000dc74:	b598      	push	{r3, r4, r7, lr}
2000dc76:	af00      	add	r7, sp, #0
	DisableCC();
2000dc78:	4b0c      	ldr	r3, [pc, #48]	; (2000dcac <SDK_TRACE_Stop+0x38>)
2000dc7a:	681b      	ldr	r3, [r3, #0]
2000dc7c:	4a0b      	ldr	r2, [pc, #44]	; (2000dcac <SDK_TRACE_Stop+0x38>)
2000dc7e:	f023 0301 	bic.w	r3, r3, #1
2000dc82:	6013      	str	r3, [r2, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
2000dc84:	b672      	cpsid	i
	__disable_irq();
	*CRC32 = crc32((unsigned char *)TRACEINFO_ADDR, sizeof(traceinfo_t) + (TI->tracelog_size), 0);
2000dc86:	4b0a      	ldr	r3, [pc, #40]	; (2000dcb0 <SDK_TRACE_Stop+0x3c>)
2000dc88:	681b      	ldr	r3, [r3, #0]
2000dc8a:	681b      	ldr	r3, [r3, #0]
2000dc8c:	f103 0110 	add.w	r1, r3, #16
2000dc90:	4b08      	ldr	r3, [pc, #32]	; (2000dcb4 <SDK_TRACE_Stop+0x40>)
2000dc92:	681c      	ldr	r4, [r3, #0]
2000dc94:	2200      	movs	r2, #0
2000dc96:	4808      	ldr	r0, [pc, #32]	; (2000dcb8 <SDK_TRACE_Stop+0x44>)
2000dc98:	f7ff fd80 	bl	2000d79c <crc32>
2000dc9c:	4603      	mov	r3, r0
2000dc9e:	6023      	str	r3, [r4, #0]
	SCB->AIRCR = 0x05FA0004;
2000dca0:	4b06      	ldr	r3, [pc, #24]	; (2000dcbc <SDK_TRACE_Stop+0x48>)
2000dca2:	4a07      	ldr	r2, [pc, #28]	; (2000dcc0 <SDK_TRACE_Stop+0x4c>)
2000dca4:	60da      	str	r2, [r3, #12]
}
2000dca6:	bf00      	nop
2000dca8:	bd98      	pop	{r3, r4, r7, pc}
2000dcaa:	bf00      	nop
2000dcac:	e0001000 	.word	0xe0001000
2000dcb0:	2000fe98 	.word	0x2000fe98
2000dcb4:	2000fea0 	.word	0x2000fea0
2000dcb8:	10000004 	.word	0x10000004
2000dcbc:	e000ed00 	.word	0xe000ed00
2000dcc0:	05fa0004 	.word	0x05fa0004

2000dcc4 <SDK_TRACE_Timestamp>:
 * @param id Event ID (For example: LED1)
 * @param value LED port state (0 or 1)
 *-----------------------------------------------------------------------
 */
void SDK_TRACE_Timestamp(uint8_t id, uint8_t value)
{
2000dcc4:	b590      	push	{r4, r7, lr}
2000dcc6:	b085      	sub	sp, #20
2000dcc8:	af00      	add	r7, sp, #0
2000dcca:	4603      	mov	r3, r0
2000dccc:	460a      	mov	r2, r1
2000dcce:	71fb      	strb	r3, [r7, #7]
2000dcd0:	4613      	mov	r3, r2
2000dcd2:	71bb      	strb	r3, [r7, #6]
	uint32_t eCode = 0x00;
2000dcd4:	2300      	movs	r3, #0
2000dcd6:	60fb      	str	r3, [r7, #12]
	eCode = (eCode << 8) + 0x01;
2000dcd8:	68fb      	ldr	r3, [r7, #12]
2000dcda:	021b      	lsls	r3, r3, #8
2000dcdc:	3301      	adds	r3, #1
2000dcde:	60fb      	str	r3, [r7, #12]
	eCode = (eCode << 8) + value;
2000dce0:	68fb      	ldr	r3, [r7, #12]
2000dce2:	021a      	lsls	r2, r3, #8
2000dce4:	79bb      	ldrb	r3, [r7, #6]
2000dce6:	4413      	add	r3, r2
2000dce8:	60fb      	str	r3, [r7, #12]
	eCode = (eCode << 8) + id;
2000dcea:	68fb      	ldr	r3, [r7, #12]
2000dcec:	021a      	lsls	r2, r3, #8
2000dcee:	79fb      	ldrb	r3, [r7, #7]
2000dcf0:	4413      	add	r3, r2
2000dcf2:	60fb      	str	r3, [r7, #12]
	TL[TI->tracelog_size/8].timecode = GetCC() / (HAL_RCC_GetHCLKFreq() / CLK_Prescaler);
2000dcf4:	4b17      	ldr	r3, [pc, #92]	; (2000dd54 <SDK_TRACE_Timestamp+0x90>)
2000dcf6:	681c      	ldr	r4, [r3, #0]
2000dcf8:	f001 fa0c 	bl	2000f114 <HAL_RCC_GetHCLKFreq>
2000dcfc:	4602      	mov	r2, r0
2000dcfe:	4b16      	ldr	r3, [pc, #88]	; (2000dd58 <SDK_TRACE_Timestamp+0x94>)
2000dd00:	fba3 2302 	umull	r2, r3, r3, r2
2000dd04:	0c9a      	lsrs	r2, r3, #18
2000dd06:	4b15      	ldr	r3, [pc, #84]	; (2000dd5c <SDK_TRACE_Timestamp+0x98>)
2000dd08:	6819      	ldr	r1, [r3, #0]
2000dd0a:	4b15      	ldr	r3, [pc, #84]	; (2000dd60 <SDK_TRACE_Timestamp+0x9c>)
2000dd0c:	681b      	ldr	r3, [r3, #0]
2000dd0e:	681b      	ldr	r3, [r3, #0]
2000dd10:	f023 0307 	bic.w	r3, r3, #7
2000dd14:	440b      	add	r3, r1
2000dd16:	fbb4 f2f2 	udiv	r2, r4, r2
2000dd1a:	601a      	str	r2, [r3, #0]
	TL[TI->tracelog_size/8].eventcode = eCode;
2000dd1c:	4b0f      	ldr	r3, [pc, #60]	; (2000dd5c <SDK_TRACE_Timestamp+0x98>)
2000dd1e:	681a      	ldr	r2, [r3, #0]
2000dd20:	4b0f      	ldr	r3, [pc, #60]	; (2000dd60 <SDK_TRACE_Timestamp+0x9c>)
2000dd22:	681b      	ldr	r3, [r3, #0]
2000dd24:	681b      	ldr	r3, [r3, #0]
2000dd26:	f023 0307 	bic.w	r3, r3, #7
2000dd2a:	4413      	add	r3, r2
2000dd2c:	68fa      	ldr	r2, [r7, #12]
2000dd2e:	605a      	str	r2, [r3, #4]
	TI->tracelog_size+=8;
2000dd30:	4b0b      	ldr	r3, [pc, #44]	; (2000dd60 <SDK_TRACE_Timestamp+0x9c>)
2000dd32:	681b      	ldr	r3, [r3, #0]
2000dd34:	681a      	ldr	r2, [r3, #0]
2000dd36:	4b0a      	ldr	r3, [pc, #40]	; (2000dd60 <SDK_TRACE_Timestamp+0x9c>)
2000dd38:	681b      	ldr	r3, [r3, #0]
2000dd3a:	3208      	adds	r2, #8
2000dd3c:	601a      	str	r2, [r3, #0]
	eventId++;
2000dd3e:	4b09      	ldr	r3, [pc, #36]	; (2000dd64 <SDK_TRACE_Timestamp+0xa0>)
2000dd40:	781b      	ldrb	r3, [r3, #0]
2000dd42:	3301      	adds	r3, #1
2000dd44:	b2da      	uxtb	r2, r3
2000dd46:	4b07      	ldr	r3, [pc, #28]	; (2000dd64 <SDK_TRACE_Timestamp+0xa0>)
2000dd48:	701a      	strb	r2, [r3, #0]
}
2000dd4a:	bf00      	nop
2000dd4c:	3714      	adds	r7, #20
2000dd4e:	46bd      	mov	sp, r7
2000dd50:	bd90      	pop	{r4, r7, pc}
2000dd52:	bf00      	nop
2000dd54:	e0001004 	.word	0xe0001004
2000dd58:	431bde83 	.word	0x431bde83
2000dd5c:	2000fe9c 	.word	0x2000fe9c
2000dd60:	2000fe98 	.word	0x2000fe98
2000dd64:	2000ff3c 	.word	0x2000ff3c

2000dd68 <SDK_TRACE_Print>:
 * ----------------------------------------------------------------------
 * Writes the C string pointed by format to the trace buffer
 *-----------------------------------------------------------------------
 */
void SDK_TRACE_Print(char * format, ...)
{
2000dd68:	b40f      	push	{r0, r1, r2, r3}
2000dd6a:	b590      	push	{r4, r7, lr}
2000dd6c:	b085      	sub	sp, #20
2000dd6e:	af00      	add	r7, sp, #0

	va_list args;
	va_start(args, format);
2000dd70:	f107 0324 	add.w	r3, r7, #36	; 0x24
2000dd74:	607b      	str	r3, [r7, #4]

	vsprintf( __buf, format, args);
2000dd76:	687a      	ldr	r2, [r7, #4]
2000dd78:	6a39      	ldr	r1, [r7, #32]
2000dd7a:	4828      	ldr	r0, [pc, #160]	; (2000de1c <SDK_TRACE_Print+0xb4>)
2000dd7c:	f001 faf4 	bl	2000f368 <vsiprintf>

	uint8_t len = strlen(__buf);
2000dd80:	4826      	ldr	r0, [pc, #152]	; (2000de1c <SDK_TRACE_Print+0xb4>)
2000dd82:	f7ff fa25 	bl	2000d1d0 <strlen>
2000dd86:	4603      	mov	r3, r0
2000dd88:	72fb      	strb	r3, [r7, #11]

	*(__IO uint32_t *)(Print_Write_Address+TI->printlog_size) = GetCC() / (HAL_RCC_GetHCLKFreq() / CLK_Prescaler);
2000dd8a:	4b25      	ldr	r3, [pc, #148]	; (2000de20 <SDK_TRACE_Print+0xb8>)
2000dd8c:	681c      	ldr	r4, [r3, #0]
2000dd8e:	f001 f9c1 	bl	2000f114 <HAL_RCC_GetHCLKFreq>
2000dd92:	4602      	mov	r2, r0
2000dd94:	4b23      	ldr	r3, [pc, #140]	; (2000de24 <SDK_TRACE_Print+0xbc>)
2000dd96:	fba3 2302 	umull	r2, r3, r3, r2
2000dd9a:	0c9b      	lsrs	r3, r3, #18
2000dd9c:	4a22      	ldr	r2, [pc, #136]	; (2000de28 <SDK_TRACE_Print+0xc0>)
2000dd9e:	6812      	ldr	r2, [r2, #0]
2000dda0:	6851      	ldr	r1, [r2, #4]
2000dda2:	4a22      	ldr	r2, [pc, #136]	; (2000de2c <SDK_TRACE_Print+0xc4>)
2000dda4:	6812      	ldr	r2, [r2, #0]
2000dda6:	440a      	add	r2, r1
2000dda8:	fbb4 f3f3 	udiv	r3, r4, r3
2000ddac:	6013      	str	r3, [r2, #0]
	TI->printlog_size+=4;
2000ddae:	4b1e      	ldr	r3, [pc, #120]	; (2000de28 <SDK_TRACE_Print+0xc0>)
2000ddb0:	681b      	ldr	r3, [r3, #0]
2000ddb2:	685a      	ldr	r2, [r3, #4]
2000ddb4:	4b1c      	ldr	r3, [pc, #112]	; (2000de28 <SDK_TRACE_Print+0xc0>)
2000ddb6:	681b      	ldr	r3, [r3, #0]
2000ddb8:	3204      	adds	r2, #4
2000ddba:	605a      	str	r2, [r3, #4]

	*(__IO uint8_t *)(Print_Write_Address+TI->printlog_size) = len;
2000ddbc:	4b1a      	ldr	r3, [pc, #104]	; (2000de28 <SDK_TRACE_Print+0xc0>)
2000ddbe:	681b      	ldr	r3, [r3, #0]
2000ddc0:	685a      	ldr	r2, [r3, #4]
2000ddc2:	4b1a      	ldr	r3, [pc, #104]	; (2000de2c <SDK_TRACE_Print+0xc4>)
2000ddc4:	681b      	ldr	r3, [r3, #0]
2000ddc6:	4413      	add	r3, r2
2000ddc8:	461a      	mov	r2, r3
2000ddca:	7afb      	ldrb	r3, [r7, #11]
2000ddcc:	7013      	strb	r3, [r2, #0]
	TI->printlog_size++;
2000ddce:	4b16      	ldr	r3, [pc, #88]	; (2000de28 <SDK_TRACE_Print+0xc0>)
2000ddd0:	681b      	ldr	r3, [r3, #0]
2000ddd2:	685a      	ldr	r2, [r3, #4]
2000ddd4:	3201      	adds	r2, #1
2000ddd6:	605a      	str	r2, [r3, #4]

	for (int i = 0; i < len; i++)
2000ddd8:	2300      	movs	r3, #0
2000ddda:	60fb      	str	r3, [r7, #12]
2000dddc:	e013      	b.n	2000de06 <SDK_TRACE_Print+0x9e>
	{
		*(__IO uint8_t *)(Print_Write_Address+TI->printlog_size) = __buf[i];
2000ddde:	4b12      	ldr	r3, [pc, #72]	; (2000de28 <SDK_TRACE_Print+0xc0>)
2000dde0:	681b      	ldr	r3, [r3, #0]
2000dde2:	685a      	ldr	r2, [r3, #4]
2000dde4:	4b11      	ldr	r3, [pc, #68]	; (2000de2c <SDK_TRACE_Print+0xc4>)
2000dde6:	681b      	ldr	r3, [r3, #0]
2000dde8:	4413      	add	r3, r2
2000ddea:	4619      	mov	r1, r3
2000ddec:	4a0b      	ldr	r2, [pc, #44]	; (2000de1c <SDK_TRACE_Print+0xb4>)
2000ddee:	68fb      	ldr	r3, [r7, #12]
2000ddf0:	4413      	add	r3, r2
2000ddf2:	781b      	ldrb	r3, [r3, #0]
2000ddf4:	700b      	strb	r3, [r1, #0]
		TI->printlog_size++;
2000ddf6:	4b0c      	ldr	r3, [pc, #48]	; (2000de28 <SDK_TRACE_Print+0xc0>)
2000ddf8:	681b      	ldr	r3, [r3, #0]
2000ddfa:	685a      	ldr	r2, [r3, #4]
2000ddfc:	3201      	adds	r2, #1
2000ddfe:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < len; i++)
2000de00:	68fb      	ldr	r3, [r7, #12]
2000de02:	3301      	adds	r3, #1
2000de04:	60fb      	str	r3, [r7, #12]
2000de06:	7afb      	ldrb	r3, [r7, #11]
2000de08:	68fa      	ldr	r2, [r7, #12]
2000de0a:	429a      	cmp	r2, r3
2000de0c:	dbe7      	blt.n	2000ddde <SDK_TRACE_Print+0x76>
	}
}
2000de0e:	bf00      	nop
2000de10:	3714      	adds	r7, #20
2000de12:	46bd      	mov	sp, r7
2000de14:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
2000de18:	b004      	add	sp, #16
2000de1a:	4770      	bx	lr
2000de1c:	2000ff54 	.word	0x2000ff54
2000de20:	e0001004 	.word	0xe0001004
2000de24:	431bde83 	.word	0x431bde83
2000de28:	2000fe98 	.word	0x2000fe98
2000de2c:	2000fea4 	.word	0x2000fea4

2000de30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
2000de30:	f8df d034 	ldr.w	sp, [pc, #52]	; 2000de68 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
2000de34:	2100      	movs	r1, #0
  b  LoopCopyDataInit
2000de36:	e003      	b.n	2000de40 <LoopCopyDataInit>

2000de38 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
2000de38:	4b0c      	ldr	r3, [pc, #48]	; (2000de6c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
2000de3a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
2000de3c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
2000de3e:	3104      	adds	r1, #4

2000de40 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
2000de40:	480b      	ldr	r0, [pc, #44]	; (2000de70 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
2000de42:	4b0c      	ldr	r3, [pc, #48]	; (2000de74 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
2000de44:	1842      	adds	r2, r0, r1
  cmp  r2, r3
2000de46:	429a      	cmp	r2, r3
  bcc  CopyDataInit
2000de48:	d3f6      	bcc.n	2000de38 <CopyDataInit>
  ldr  r2, =_sbss
2000de4a:	4a0b      	ldr	r2, [pc, #44]	; (2000de78 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
2000de4c:	e002      	b.n	2000de54 <LoopFillZerobss>

2000de4e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
2000de4e:	2300      	movs	r3, #0
  str  r3, [r2], #4
2000de50:	f842 3b04 	str.w	r3, [r2], #4

2000de54 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
2000de54:	4b09      	ldr	r3, [pc, #36]	; (2000de7c <LoopFillZerobss+0x28>)
  cmp  r2, r3
2000de56:	429a      	cmp	r2, r3
  bcc  FillZerobss
2000de58:	d3f9      	bcc.n	2000de4e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
2000de5a:	f7ff fec3 	bl	2000dbe4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
2000de5e:	f001 f973 	bl	2000f148 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
2000de62:	f7ff fd33 	bl	2000d8cc <main>
  bx  lr    
2000de66:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
2000de68:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
2000de6c:	2000fe94 	.word	0x2000fe94
  ldr  r0, =_sdata
2000de70:	2000fe94 	.word	0x2000fe94
  ldr  r3, =_edata
2000de74:	2000ff14 	.word	0x2000ff14
  ldr  r2, =_sbss
2000de78:	2000ff14 	.word	0x2000ff14
  ldr  r3, = _ebss
2000de7c:	2001007c 	.word	0x2001007c

2000de80 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
2000de80:	e7fe      	b.n	2000de80 <ADC_IRQHandler>
	...

2000de84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
2000de84:	b580      	push	{r7, lr}
2000de86:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
2000de88:	4b0e      	ldr	r3, [pc, #56]	; (2000dec4 <HAL_Init+0x40>)
2000de8a:	681b      	ldr	r3, [r3, #0]
2000de8c:	4a0d      	ldr	r2, [pc, #52]	; (2000dec4 <HAL_Init+0x40>)
2000de8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
2000de92:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
2000de94:	4b0b      	ldr	r3, [pc, #44]	; (2000dec4 <HAL_Init+0x40>)
2000de96:	681b      	ldr	r3, [r3, #0]
2000de98:	4a0a      	ldr	r2, [pc, #40]	; (2000dec4 <HAL_Init+0x40>)
2000de9a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
2000de9e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
2000dea0:	4b08      	ldr	r3, [pc, #32]	; (2000dec4 <HAL_Init+0x40>)
2000dea2:	681b      	ldr	r3, [r3, #0]
2000dea4:	4a07      	ldr	r2, [pc, #28]	; (2000dec4 <HAL_Init+0x40>)
2000dea6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
2000deaa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
2000deac:	2003      	movs	r0, #3
2000deae:	f000 f90d 	bl	2000e0cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
2000deb2:	2000      	movs	r0, #0
2000deb4:	f000 f808 	bl	2000dec8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
2000deb8:	f7ff fe08 	bl	2000dacc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
2000debc:	2300      	movs	r3, #0
}
2000debe:	4618      	mov	r0, r3
2000dec0:	bd80      	pop	{r7, pc}
2000dec2:	bf00      	nop
2000dec4:	40023c00 	.word	0x40023c00

2000dec8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
2000dec8:	b580      	push	{r7, lr}
2000deca:	b082      	sub	sp, #8
2000decc:	af00      	add	r7, sp, #0
2000dece:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
2000ded0:	4b12      	ldr	r3, [pc, #72]	; (2000df1c <HAL_InitTick+0x54>)
2000ded2:	681a      	ldr	r2, [r3, #0]
2000ded4:	4b12      	ldr	r3, [pc, #72]	; (2000df20 <HAL_InitTick+0x58>)
2000ded6:	781b      	ldrb	r3, [r3, #0]
2000ded8:	4619      	mov	r1, r3
2000deda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
2000dede:	fbb3 f3f1 	udiv	r3, r3, r1
2000dee2:	fbb2 f3f3 	udiv	r3, r2, r3
2000dee6:	4618      	mov	r0, r3
2000dee8:	f000 f917 	bl	2000e11a <HAL_SYSTICK_Config>
2000deec:	4603      	mov	r3, r0
2000deee:	2b00      	cmp	r3, #0
2000def0:	d001      	beq.n	2000def6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
2000def2:	2301      	movs	r3, #1
2000def4:	e00e      	b.n	2000df14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
2000def6:	687b      	ldr	r3, [r7, #4]
2000def8:	2b0f      	cmp	r3, #15
2000defa:	d80a      	bhi.n	2000df12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
2000defc:	2200      	movs	r2, #0
2000defe:	6879      	ldr	r1, [r7, #4]
2000df00:	f04f 30ff 	mov.w	r0, #4294967295
2000df04:	f000 f8ed 	bl	2000e0e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
2000df08:	4a06      	ldr	r2, [pc, #24]	; (2000df24 <HAL_InitTick+0x5c>)
2000df0a:	687b      	ldr	r3, [r7, #4]
2000df0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
2000df0e:	2300      	movs	r3, #0
2000df10:	e000      	b.n	2000df14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
2000df12:	2301      	movs	r3, #1
}
2000df14:	4618      	mov	r0, r3
2000df16:	3708      	adds	r7, #8
2000df18:	46bd      	mov	sp, r7
2000df1a:	bd80      	pop	{r7, pc}
2000df1c:	2000fe94 	.word	0x2000fe94
2000df20:	2000feac 	.word	0x2000feac
2000df24:	2000fea8 	.word	0x2000fea8

2000df28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
2000df28:	b480      	push	{r7}
2000df2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
2000df2c:	4b06      	ldr	r3, [pc, #24]	; (2000df48 <HAL_IncTick+0x20>)
2000df2e:	781b      	ldrb	r3, [r3, #0]
2000df30:	461a      	mov	r2, r3
2000df32:	4b06      	ldr	r3, [pc, #24]	; (2000df4c <HAL_IncTick+0x24>)
2000df34:	681b      	ldr	r3, [r3, #0]
2000df36:	4413      	add	r3, r2
2000df38:	4a04      	ldr	r2, [pc, #16]	; (2000df4c <HAL_IncTick+0x24>)
2000df3a:	6013      	str	r3, [r2, #0]
}
2000df3c:	bf00      	nop
2000df3e:	46bd      	mov	sp, r7
2000df40:	f85d 7b04 	ldr.w	r7, [sp], #4
2000df44:	4770      	bx	lr
2000df46:	bf00      	nop
2000df48:	2000feac 	.word	0x2000feac
2000df4c:	20010054 	.word	0x20010054

2000df50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
2000df50:	b480      	push	{r7}
2000df52:	af00      	add	r7, sp, #0
  return uwTick;
2000df54:	4b03      	ldr	r3, [pc, #12]	; (2000df64 <HAL_GetTick+0x14>)
2000df56:	681b      	ldr	r3, [r3, #0]
}
2000df58:	4618      	mov	r0, r3
2000df5a:	46bd      	mov	sp, r7
2000df5c:	f85d 7b04 	ldr.w	r7, [sp], #4
2000df60:	4770      	bx	lr
2000df62:	bf00      	nop
2000df64:	20010054 	.word	0x20010054

2000df68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
2000df68:	b480      	push	{r7}
2000df6a:	b085      	sub	sp, #20
2000df6c:	af00      	add	r7, sp, #0
2000df6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
2000df70:	687b      	ldr	r3, [r7, #4]
2000df72:	f003 0307 	and.w	r3, r3, #7
2000df76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
2000df78:	4b0c      	ldr	r3, [pc, #48]	; (2000dfac <__NVIC_SetPriorityGrouping+0x44>)
2000df7a:	68db      	ldr	r3, [r3, #12]
2000df7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
2000df7e:	68ba      	ldr	r2, [r7, #8]
2000df80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
2000df84:	4013      	ands	r3, r2
2000df86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
2000df88:	68fb      	ldr	r3, [r7, #12]
2000df8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
2000df8c:	68bb      	ldr	r3, [r7, #8]
2000df8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
2000df90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
2000df94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
2000df98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
2000df9a:	4a04      	ldr	r2, [pc, #16]	; (2000dfac <__NVIC_SetPriorityGrouping+0x44>)
2000df9c:	68bb      	ldr	r3, [r7, #8]
2000df9e:	60d3      	str	r3, [r2, #12]
}
2000dfa0:	bf00      	nop
2000dfa2:	3714      	adds	r7, #20
2000dfa4:	46bd      	mov	sp, r7
2000dfa6:	f85d 7b04 	ldr.w	r7, [sp], #4
2000dfaa:	4770      	bx	lr
2000dfac:	e000ed00 	.word	0xe000ed00

2000dfb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
2000dfb0:	b480      	push	{r7}
2000dfb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
2000dfb4:	4b04      	ldr	r3, [pc, #16]	; (2000dfc8 <__NVIC_GetPriorityGrouping+0x18>)
2000dfb6:	68db      	ldr	r3, [r3, #12]
2000dfb8:	0a1b      	lsrs	r3, r3, #8
2000dfba:	f003 0307 	and.w	r3, r3, #7
}
2000dfbe:	4618      	mov	r0, r3
2000dfc0:	46bd      	mov	sp, r7
2000dfc2:	f85d 7b04 	ldr.w	r7, [sp], #4
2000dfc6:	4770      	bx	lr
2000dfc8:	e000ed00 	.word	0xe000ed00

2000dfcc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
2000dfcc:	b480      	push	{r7}
2000dfce:	b083      	sub	sp, #12
2000dfd0:	af00      	add	r7, sp, #0
2000dfd2:	4603      	mov	r3, r0
2000dfd4:	6039      	str	r1, [r7, #0]
2000dfd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
2000dfd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
2000dfdc:	2b00      	cmp	r3, #0
2000dfde:	db0a      	blt.n	2000dff6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
2000dfe0:	683b      	ldr	r3, [r7, #0]
2000dfe2:	b2da      	uxtb	r2, r3
2000dfe4:	490c      	ldr	r1, [pc, #48]	; (2000e018 <__NVIC_SetPriority+0x4c>)
2000dfe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
2000dfea:	0112      	lsls	r2, r2, #4
2000dfec:	b2d2      	uxtb	r2, r2
2000dfee:	440b      	add	r3, r1
2000dff0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
2000dff4:	e00a      	b.n	2000e00c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
2000dff6:	683b      	ldr	r3, [r7, #0]
2000dff8:	b2da      	uxtb	r2, r3
2000dffa:	4908      	ldr	r1, [pc, #32]	; (2000e01c <__NVIC_SetPriority+0x50>)
2000dffc:	79fb      	ldrb	r3, [r7, #7]
2000dffe:	f003 030f 	and.w	r3, r3, #15
2000e002:	3b04      	subs	r3, #4
2000e004:	0112      	lsls	r2, r2, #4
2000e006:	b2d2      	uxtb	r2, r2
2000e008:	440b      	add	r3, r1
2000e00a:	761a      	strb	r2, [r3, #24]
}
2000e00c:	bf00      	nop
2000e00e:	370c      	adds	r7, #12
2000e010:	46bd      	mov	sp, r7
2000e012:	f85d 7b04 	ldr.w	r7, [sp], #4
2000e016:	4770      	bx	lr
2000e018:	e000e100 	.word	0xe000e100
2000e01c:	e000ed00 	.word	0xe000ed00

2000e020 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
2000e020:	b480      	push	{r7}
2000e022:	b089      	sub	sp, #36	; 0x24
2000e024:	af00      	add	r7, sp, #0
2000e026:	60f8      	str	r0, [r7, #12]
2000e028:	60b9      	str	r1, [r7, #8]
2000e02a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
2000e02c:	68fb      	ldr	r3, [r7, #12]
2000e02e:	f003 0307 	and.w	r3, r3, #7
2000e032:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
2000e034:	69fb      	ldr	r3, [r7, #28]
2000e036:	f1c3 0307 	rsb	r3, r3, #7
2000e03a:	2b04      	cmp	r3, #4
2000e03c:	bf28      	it	cs
2000e03e:	2304      	movcs	r3, #4
2000e040:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
2000e042:	69fb      	ldr	r3, [r7, #28]
2000e044:	3304      	adds	r3, #4
2000e046:	2b06      	cmp	r3, #6
2000e048:	d902      	bls.n	2000e050 <NVIC_EncodePriority+0x30>
2000e04a:	69fb      	ldr	r3, [r7, #28]
2000e04c:	3b03      	subs	r3, #3
2000e04e:	e000      	b.n	2000e052 <NVIC_EncodePriority+0x32>
2000e050:	2300      	movs	r3, #0
2000e052:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
2000e054:	f04f 32ff 	mov.w	r2, #4294967295
2000e058:	69bb      	ldr	r3, [r7, #24]
2000e05a:	fa02 f303 	lsl.w	r3, r2, r3
2000e05e:	43da      	mvns	r2, r3
2000e060:	68bb      	ldr	r3, [r7, #8]
2000e062:	401a      	ands	r2, r3
2000e064:	697b      	ldr	r3, [r7, #20]
2000e066:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
2000e068:	f04f 31ff 	mov.w	r1, #4294967295
2000e06c:	697b      	ldr	r3, [r7, #20]
2000e06e:	fa01 f303 	lsl.w	r3, r1, r3
2000e072:	43d9      	mvns	r1, r3
2000e074:	687b      	ldr	r3, [r7, #4]
2000e076:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
2000e078:	4313      	orrs	r3, r2
         );
}
2000e07a:	4618      	mov	r0, r3
2000e07c:	3724      	adds	r7, #36	; 0x24
2000e07e:	46bd      	mov	sp, r7
2000e080:	f85d 7b04 	ldr.w	r7, [sp], #4
2000e084:	4770      	bx	lr
	...

2000e088 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
2000e088:	b580      	push	{r7, lr}
2000e08a:	b082      	sub	sp, #8
2000e08c:	af00      	add	r7, sp, #0
2000e08e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
2000e090:	687b      	ldr	r3, [r7, #4]
2000e092:	3b01      	subs	r3, #1
2000e094:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
2000e098:	d301      	bcc.n	2000e09e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
2000e09a:	2301      	movs	r3, #1
2000e09c:	e00f      	b.n	2000e0be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
2000e09e:	4a0a      	ldr	r2, [pc, #40]	; (2000e0c8 <SysTick_Config+0x40>)
2000e0a0:	687b      	ldr	r3, [r7, #4]
2000e0a2:	3b01      	subs	r3, #1
2000e0a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
2000e0a6:	210f      	movs	r1, #15
2000e0a8:	f04f 30ff 	mov.w	r0, #4294967295
2000e0ac:	f7ff ff8e 	bl	2000dfcc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
2000e0b0:	4b05      	ldr	r3, [pc, #20]	; (2000e0c8 <SysTick_Config+0x40>)
2000e0b2:	2200      	movs	r2, #0
2000e0b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
2000e0b6:	4b04      	ldr	r3, [pc, #16]	; (2000e0c8 <SysTick_Config+0x40>)
2000e0b8:	2207      	movs	r2, #7
2000e0ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
2000e0bc:	2300      	movs	r3, #0
}
2000e0be:	4618      	mov	r0, r3
2000e0c0:	3708      	adds	r7, #8
2000e0c2:	46bd      	mov	sp, r7
2000e0c4:	bd80      	pop	{r7, pc}
2000e0c6:	bf00      	nop
2000e0c8:	e000e010 	.word	0xe000e010

2000e0cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
2000e0cc:	b580      	push	{r7, lr}
2000e0ce:	b082      	sub	sp, #8
2000e0d0:	af00      	add	r7, sp, #0
2000e0d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
2000e0d4:	6878      	ldr	r0, [r7, #4]
2000e0d6:	f7ff ff47 	bl	2000df68 <__NVIC_SetPriorityGrouping>
}
2000e0da:	bf00      	nop
2000e0dc:	3708      	adds	r7, #8
2000e0de:	46bd      	mov	sp, r7
2000e0e0:	bd80      	pop	{r7, pc}

2000e0e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
2000e0e2:	b580      	push	{r7, lr}
2000e0e4:	b086      	sub	sp, #24
2000e0e6:	af00      	add	r7, sp, #0
2000e0e8:	4603      	mov	r3, r0
2000e0ea:	60b9      	str	r1, [r7, #8]
2000e0ec:	607a      	str	r2, [r7, #4]
2000e0ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
2000e0f0:	2300      	movs	r3, #0
2000e0f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
2000e0f4:	f7ff ff5c 	bl	2000dfb0 <__NVIC_GetPriorityGrouping>
2000e0f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
2000e0fa:	687a      	ldr	r2, [r7, #4]
2000e0fc:	68b9      	ldr	r1, [r7, #8]
2000e0fe:	6978      	ldr	r0, [r7, #20]
2000e100:	f7ff ff8e 	bl	2000e020 <NVIC_EncodePriority>
2000e104:	4602      	mov	r2, r0
2000e106:	f997 300f 	ldrsb.w	r3, [r7, #15]
2000e10a:	4611      	mov	r1, r2
2000e10c:	4618      	mov	r0, r3
2000e10e:	f7ff ff5d 	bl	2000dfcc <__NVIC_SetPriority>
}
2000e112:	bf00      	nop
2000e114:	3718      	adds	r7, #24
2000e116:	46bd      	mov	sp, r7
2000e118:	bd80      	pop	{r7, pc}

2000e11a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
2000e11a:	b580      	push	{r7, lr}
2000e11c:	b082      	sub	sp, #8
2000e11e:	af00      	add	r7, sp, #0
2000e120:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
2000e122:	6878      	ldr	r0, [r7, #4]
2000e124:	f7ff ffb0 	bl	2000e088 <SysTick_Config>
2000e128:	4603      	mov	r3, r0
}
2000e12a:	4618      	mov	r0, r3
2000e12c:	3708      	adds	r7, #8
2000e12e:	46bd      	mov	sp, r7
2000e130:	bd80      	pop	{r7, pc}
	...

2000e134 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
2000e134:	b580      	push	{r7, lr}
2000e136:	b086      	sub	sp, #24
2000e138:	af00      	add	r7, sp, #0
2000e13a:	60f8      	str	r0, [r7, #12]
2000e13c:	60b9      	str	r1, [r7, #8]
2000e13e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
2000e142:	2301      	movs	r3, #1
2000e144:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
2000e146:	4b23      	ldr	r3, [pc, #140]	; (2000e1d4 <HAL_FLASH_Program+0xa0>)
2000e148:	7e1b      	ldrb	r3, [r3, #24]
2000e14a:	2b01      	cmp	r3, #1
2000e14c:	d101      	bne.n	2000e152 <HAL_FLASH_Program+0x1e>
2000e14e:	2302      	movs	r3, #2
2000e150:	e03b      	b.n	2000e1ca <HAL_FLASH_Program+0x96>
2000e152:	4b20      	ldr	r3, [pc, #128]	; (2000e1d4 <HAL_FLASH_Program+0xa0>)
2000e154:	2201      	movs	r2, #1
2000e156:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
2000e158:	f24c 3050 	movw	r0, #50000	; 0xc350
2000e15c:	f000 f870 	bl	2000e240 <FLASH_WaitForLastOperation>
2000e160:	4603      	mov	r3, r0
2000e162:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
2000e164:	7dfb      	ldrb	r3, [r7, #23]
2000e166:	2b00      	cmp	r3, #0
2000e168:	d12b      	bne.n	2000e1c2 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
2000e16a:	68fb      	ldr	r3, [r7, #12]
2000e16c:	2b00      	cmp	r3, #0
2000e16e:	d105      	bne.n	2000e17c <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
2000e170:	783b      	ldrb	r3, [r7, #0]
2000e172:	4619      	mov	r1, r3
2000e174:	68b8      	ldr	r0, [r7, #8]
2000e176:	f000 f919 	bl	2000e3ac <FLASH_Program_Byte>
2000e17a:	e016      	b.n	2000e1aa <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
2000e17c:	68fb      	ldr	r3, [r7, #12]
2000e17e:	2b01      	cmp	r3, #1
2000e180:	d105      	bne.n	2000e18e <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
2000e182:	883b      	ldrh	r3, [r7, #0]
2000e184:	4619      	mov	r1, r3
2000e186:	68b8      	ldr	r0, [r7, #8]
2000e188:	f000 f8ec 	bl	2000e364 <FLASH_Program_HalfWord>
2000e18c:	e00d      	b.n	2000e1aa <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
2000e18e:	68fb      	ldr	r3, [r7, #12]
2000e190:	2b02      	cmp	r3, #2
2000e192:	d105      	bne.n	2000e1a0 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
2000e194:	683b      	ldr	r3, [r7, #0]
2000e196:	4619      	mov	r1, r3
2000e198:	68b8      	ldr	r0, [r7, #8]
2000e19a:	f000 f8c1 	bl	2000e320 <FLASH_Program_Word>
2000e19e:	e004      	b.n	2000e1aa <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
2000e1a0:	e9d7 2300 	ldrd	r2, r3, [r7]
2000e1a4:	68b8      	ldr	r0, [r7, #8]
2000e1a6:	f000 f88b 	bl	2000e2c0 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
2000e1aa:	f24c 3050 	movw	r0, #50000	; 0xc350
2000e1ae:	f000 f847 	bl	2000e240 <FLASH_WaitForLastOperation>
2000e1b2:	4603      	mov	r3, r0
2000e1b4:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
2000e1b6:	4b08      	ldr	r3, [pc, #32]	; (2000e1d8 <HAL_FLASH_Program+0xa4>)
2000e1b8:	691b      	ldr	r3, [r3, #16]
2000e1ba:	4a07      	ldr	r2, [pc, #28]	; (2000e1d8 <HAL_FLASH_Program+0xa4>)
2000e1bc:	f023 0301 	bic.w	r3, r3, #1
2000e1c0:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
2000e1c2:	4b04      	ldr	r3, [pc, #16]	; (2000e1d4 <HAL_FLASH_Program+0xa0>)
2000e1c4:	2200      	movs	r2, #0
2000e1c6:	761a      	strb	r2, [r3, #24]
  
  return status;
2000e1c8:	7dfb      	ldrb	r3, [r7, #23]
}
2000e1ca:	4618      	mov	r0, r3
2000e1cc:	3718      	adds	r7, #24
2000e1ce:	46bd      	mov	sp, r7
2000e1d0:	bd80      	pop	{r7, pc}
2000e1d2:	bf00      	nop
2000e1d4:	20010058 	.word	0x20010058
2000e1d8:	40023c00 	.word	0x40023c00

2000e1dc <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
2000e1dc:	b480      	push	{r7}
2000e1de:	b083      	sub	sp, #12
2000e1e0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
2000e1e2:	2300      	movs	r3, #0
2000e1e4:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
2000e1e6:	4b0b      	ldr	r3, [pc, #44]	; (2000e214 <HAL_FLASH_Unlock+0x38>)
2000e1e8:	691b      	ldr	r3, [r3, #16]
2000e1ea:	2b00      	cmp	r3, #0
2000e1ec:	da0b      	bge.n	2000e206 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
2000e1ee:	4b09      	ldr	r3, [pc, #36]	; (2000e214 <HAL_FLASH_Unlock+0x38>)
2000e1f0:	4a09      	ldr	r2, [pc, #36]	; (2000e218 <HAL_FLASH_Unlock+0x3c>)
2000e1f2:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
2000e1f4:	4b07      	ldr	r3, [pc, #28]	; (2000e214 <HAL_FLASH_Unlock+0x38>)
2000e1f6:	4a09      	ldr	r2, [pc, #36]	; (2000e21c <HAL_FLASH_Unlock+0x40>)
2000e1f8:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
2000e1fa:	4b06      	ldr	r3, [pc, #24]	; (2000e214 <HAL_FLASH_Unlock+0x38>)
2000e1fc:	691b      	ldr	r3, [r3, #16]
2000e1fe:	2b00      	cmp	r3, #0
2000e200:	da01      	bge.n	2000e206 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
2000e202:	2301      	movs	r3, #1
2000e204:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
2000e206:	79fb      	ldrb	r3, [r7, #7]
}
2000e208:	4618      	mov	r0, r3
2000e20a:	370c      	adds	r7, #12
2000e20c:	46bd      	mov	sp, r7
2000e20e:	f85d 7b04 	ldr.w	r7, [sp], #4
2000e212:	4770      	bx	lr
2000e214:	40023c00 	.word	0x40023c00
2000e218:	45670123 	.word	0x45670123
2000e21c:	cdef89ab 	.word	0xcdef89ab

2000e220 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
2000e220:	b480      	push	{r7}
2000e222:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
2000e224:	4b05      	ldr	r3, [pc, #20]	; (2000e23c <HAL_FLASH_Lock+0x1c>)
2000e226:	691b      	ldr	r3, [r3, #16]
2000e228:	4a04      	ldr	r2, [pc, #16]	; (2000e23c <HAL_FLASH_Lock+0x1c>)
2000e22a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
2000e22e:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
2000e230:	2300      	movs	r3, #0
}
2000e232:	4618      	mov	r0, r3
2000e234:	46bd      	mov	sp, r7
2000e236:	f85d 7b04 	ldr.w	r7, [sp], #4
2000e23a:	4770      	bx	lr
2000e23c:	40023c00 	.word	0x40023c00

2000e240 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
2000e240:	b580      	push	{r7, lr}
2000e242:	b084      	sub	sp, #16
2000e244:	af00      	add	r7, sp, #0
2000e246:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
2000e248:	2300      	movs	r3, #0
2000e24a:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
2000e24c:	4b1a      	ldr	r3, [pc, #104]	; (2000e2b8 <FLASH_WaitForLastOperation+0x78>)
2000e24e:	2200      	movs	r2, #0
2000e250:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
2000e252:	f7ff fe7d 	bl	2000df50 <HAL_GetTick>
2000e256:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
2000e258:	e010      	b.n	2000e27c <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
2000e25a:	687b      	ldr	r3, [r7, #4]
2000e25c:	f1b3 3fff 	cmp.w	r3, #4294967295
2000e260:	d00c      	beq.n	2000e27c <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
2000e262:	687b      	ldr	r3, [r7, #4]
2000e264:	2b00      	cmp	r3, #0
2000e266:	d007      	beq.n	2000e278 <FLASH_WaitForLastOperation+0x38>
2000e268:	f7ff fe72 	bl	2000df50 <HAL_GetTick>
2000e26c:	4602      	mov	r2, r0
2000e26e:	68fb      	ldr	r3, [r7, #12]
2000e270:	1ad3      	subs	r3, r2, r3
2000e272:	687a      	ldr	r2, [r7, #4]
2000e274:	429a      	cmp	r2, r3
2000e276:	d201      	bcs.n	2000e27c <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
2000e278:	2303      	movs	r3, #3
2000e27a:	e019      	b.n	2000e2b0 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
2000e27c:	4b0f      	ldr	r3, [pc, #60]	; (2000e2bc <FLASH_WaitForLastOperation+0x7c>)
2000e27e:	68db      	ldr	r3, [r3, #12]
2000e280:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
2000e284:	2b00      	cmp	r3, #0
2000e286:	d1e8      	bne.n	2000e25a <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
2000e288:	4b0c      	ldr	r3, [pc, #48]	; (2000e2bc <FLASH_WaitForLastOperation+0x7c>)
2000e28a:	68db      	ldr	r3, [r3, #12]
2000e28c:	f003 0301 	and.w	r3, r3, #1
2000e290:	2b00      	cmp	r3, #0
2000e292:	d002      	beq.n	2000e29a <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
2000e294:	4b09      	ldr	r3, [pc, #36]	; (2000e2bc <FLASH_WaitForLastOperation+0x7c>)
2000e296:	2201      	movs	r2, #1
2000e298:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
2000e29a:	4b08      	ldr	r3, [pc, #32]	; (2000e2bc <FLASH_WaitForLastOperation+0x7c>)
2000e29c:	68db      	ldr	r3, [r3, #12]
2000e29e:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
2000e2a2:	2b00      	cmp	r3, #0
2000e2a4:	d003      	beq.n	2000e2ae <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
2000e2a6:	f000 f8a3 	bl	2000e3f0 <FLASH_SetErrorCode>
    return HAL_ERROR;
2000e2aa:	2301      	movs	r3, #1
2000e2ac:	e000      	b.n	2000e2b0 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
2000e2ae:	2300      	movs	r3, #0
  
}  
2000e2b0:	4618      	mov	r0, r3
2000e2b2:	3710      	adds	r7, #16
2000e2b4:	46bd      	mov	sp, r7
2000e2b6:	bd80      	pop	{r7, pc}
2000e2b8:	20010058 	.word	0x20010058
2000e2bc:	40023c00 	.word	0x40023c00

2000e2c0 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
2000e2c0:	b490      	push	{r4, r7}
2000e2c2:	b084      	sub	sp, #16
2000e2c4:	af00      	add	r7, sp, #0
2000e2c6:	60f8      	str	r0, [r7, #12]
2000e2c8:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
2000e2cc:	4b13      	ldr	r3, [pc, #76]	; (2000e31c <FLASH_Program_DoubleWord+0x5c>)
2000e2ce:	691b      	ldr	r3, [r3, #16]
2000e2d0:	4a12      	ldr	r2, [pc, #72]	; (2000e31c <FLASH_Program_DoubleWord+0x5c>)
2000e2d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
2000e2d6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
2000e2d8:	4b10      	ldr	r3, [pc, #64]	; (2000e31c <FLASH_Program_DoubleWord+0x5c>)
2000e2da:	691b      	ldr	r3, [r3, #16]
2000e2dc:	4a0f      	ldr	r2, [pc, #60]	; (2000e31c <FLASH_Program_DoubleWord+0x5c>)
2000e2de:	f443 7340 	orr.w	r3, r3, #768	; 0x300
2000e2e2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
2000e2e4:	4b0d      	ldr	r3, [pc, #52]	; (2000e31c <FLASH_Program_DoubleWord+0x5c>)
2000e2e6:	691b      	ldr	r3, [r3, #16]
2000e2e8:	4a0c      	ldr	r2, [pc, #48]	; (2000e31c <FLASH_Program_DoubleWord+0x5c>)
2000e2ea:	f043 0301 	orr.w	r3, r3, #1
2000e2ee:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
2000e2f0:	68fb      	ldr	r3, [r7, #12]
2000e2f2:	683a      	ldr	r2, [r7, #0]
2000e2f4:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
2000e2f6:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
2000e2fa:	e9d7 1200 	ldrd	r1, r2, [r7]
2000e2fe:	f04f 0300 	mov.w	r3, #0
2000e302:	f04f 0400 	mov.w	r4, #0
2000e306:	0013      	movs	r3, r2
2000e308:	2400      	movs	r4, #0
2000e30a:	68fa      	ldr	r2, [r7, #12]
2000e30c:	3204      	adds	r2, #4
2000e30e:	6013      	str	r3, [r2, #0]
}
2000e310:	bf00      	nop
2000e312:	3710      	adds	r7, #16
2000e314:	46bd      	mov	sp, r7
2000e316:	bc90      	pop	{r4, r7}
2000e318:	4770      	bx	lr
2000e31a:	bf00      	nop
2000e31c:	40023c00 	.word	0x40023c00

2000e320 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
2000e320:	b480      	push	{r7}
2000e322:	b083      	sub	sp, #12
2000e324:	af00      	add	r7, sp, #0
2000e326:	6078      	str	r0, [r7, #4]
2000e328:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
2000e32a:	4b0d      	ldr	r3, [pc, #52]	; (2000e360 <FLASH_Program_Word+0x40>)
2000e32c:	691b      	ldr	r3, [r3, #16]
2000e32e:	4a0c      	ldr	r2, [pc, #48]	; (2000e360 <FLASH_Program_Word+0x40>)
2000e330:	f423 7340 	bic.w	r3, r3, #768	; 0x300
2000e334:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
2000e336:	4b0a      	ldr	r3, [pc, #40]	; (2000e360 <FLASH_Program_Word+0x40>)
2000e338:	691b      	ldr	r3, [r3, #16]
2000e33a:	4a09      	ldr	r2, [pc, #36]	; (2000e360 <FLASH_Program_Word+0x40>)
2000e33c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
2000e340:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
2000e342:	4b07      	ldr	r3, [pc, #28]	; (2000e360 <FLASH_Program_Word+0x40>)
2000e344:	691b      	ldr	r3, [r3, #16]
2000e346:	4a06      	ldr	r2, [pc, #24]	; (2000e360 <FLASH_Program_Word+0x40>)
2000e348:	f043 0301 	orr.w	r3, r3, #1
2000e34c:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
2000e34e:	687b      	ldr	r3, [r7, #4]
2000e350:	683a      	ldr	r2, [r7, #0]
2000e352:	601a      	str	r2, [r3, #0]
}
2000e354:	bf00      	nop
2000e356:	370c      	adds	r7, #12
2000e358:	46bd      	mov	sp, r7
2000e35a:	f85d 7b04 	ldr.w	r7, [sp], #4
2000e35e:	4770      	bx	lr
2000e360:	40023c00 	.word	0x40023c00

2000e364 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
2000e364:	b480      	push	{r7}
2000e366:	b083      	sub	sp, #12
2000e368:	af00      	add	r7, sp, #0
2000e36a:	6078      	str	r0, [r7, #4]
2000e36c:	460b      	mov	r3, r1
2000e36e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
2000e370:	4b0d      	ldr	r3, [pc, #52]	; (2000e3a8 <FLASH_Program_HalfWord+0x44>)
2000e372:	691b      	ldr	r3, [r3, #16]
2000e374:	4a0c      	ldr	r2, [pc, #48]	; (2000e3a8 <FLASH_Program_HalfWord+0x44>)
2000e376:	f423 7340 	bic.w	r3, r3, #768	; 0x300
2000e37a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
2000e37c:	4b0a      	ldr	r3, [pc, #40]	; (2000e3a8 <FLASH_Program_HalfWord+0x44>)
2000e37e:	691b      	ldr	r3, [r3, #16]
2000e380:	4a09      	ldr	r2, [pc, #36]	; (2000e3a8 <FLASH_Program_HalfWord+0x44>)
2000e382:	f443 7380 	orr.w	r3, r3, #256	; 0x100
2000e386:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
2000e388:	4b07      	ldr	r3, [pc, #28]	; (2000e3a8 <FLASH_Program_HalfWord+0x44>)
2000e38a:	691b      	ldr	r3, [r3, #16]
2000e38c:	4a06      	ldr	r2, [pc, #24]	; (2000e3a8 <FLASH_Program_HalfWord+0x44>)
2000e38e:	f043 0301 	orr.w	r3, r3, #1
2000e392:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
2000e394:	687b      	ldr	r3, [r7, #4]
2000e396:	887a      	ldrh	r2, [r7, #2]
2000e398:	801a      	strh	r2, [r3, #0]
}
2000e39a:	bf00      	nop
2000e39c:	370c      	adds	r7, #12
2000e39e:	46bd      	mov	sp, r7
2000e3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
2000e3a4:	4770      	bx	lr
2000e3a6:	bf00      	nop
2000e3a8:	40023c00 	.word	0x40023c00

2000e3ac <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
2000e3ac:	b480      	push	{r7}
2000e3ae:	b083      	sub	sp, #12
2000e3b0:	af00      	add	r7, sp, #0
2000e3b2:	6078      	str	r0, [r7, #4]
2000e3b4:	460b      	mov	r3, r1
2000e3b6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
2000e3b8:	4b0c      	ldr	r3, [pc, #48]	; (2000e3ec <FLASH_Program_Byte+0x40>)
2000e3ba:	691b      	ldr	r3, [r3, #16]
2000e3bc:	4a0b      	ldr	r2, [pc, #44]	; (2000e3ec <FLASH_Program_Byte+0x40>)
2000e3be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
2000e3c2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
2000e3c4:	4b09      	ldr	r3, [pc, #36]	; (2000e3ec <FLASH_Program_Byte+0x40>)
2000e3c6:	4a09      	ldr	r2, [pc, #36]	; (2000e3ec <FLASH_Program_Byte+0x40>)
2000e3c8:	691b      	ldr	r3, [r3, #16]
2000e3ca:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
2000e3cc:	4b07      	ldr	r3, [pc, #28]	; (2000e3ec <FLASH_Program_Byte+0x40>)
2000e3ce:	691b      	ldr	r3, [r3, #16]
2000e3d0:	4a06      	ldr	r2, [pc, #24]	; (2000e3ec <FLASH_Program_Byte+0x40>)
2000e3d2:	f043 0301 	orr.w	r3, r3, #1
2000e3d6:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
2000e3d8:	687b      	ldr	r3, [r7, #4]
2000e3da:	78fa      	ldrb	r2, [r7, #3]
2000e3dc:	701a      	strb	r2, [r3, #0]
}
2000e3de:	bf00      	nop
2000e3e0:	370c      	adds	r7, #12
2000e3e2:	46bd      	mov	sp, r7
2000e3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
2000e3e8:	4770      	bx	lr
2000e3ea:	bf00      	nop
2000e3ec:	40023c00 	.word	0x40023c00

2000e3f0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
2000e3f0:	b480      	push	{r7}
2000e3f2:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
2000e3f4:	4b27      	ldr	r3, [pc, #156]	; (2000e494 <FLASH_SetErrorCode+0xa4>)
2000e3f6:	68db      	ldr	r3, [r3, #12]
2000e3f8:	f003 0310 	and.w	r3, r3, #16
2000e3fc:	2b00      	cmp	r3, #0
2000e3fe:	d008      	beq.n	2000e412 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
2000e400:	4b25      	ldr	r3, [pc, #148]	; (2000e498 <FLASH_SetErrorCode+0xa8>)
2000e402:	69db      	ldr	r3, [r3, #28]
2000e404:	f043 0310 	orr.w	r3, r3, #16
2000e408:	4a23      	ldr	r2, [pc, #140]	; (2000e498 <FLASH_SetErrorCode+0xa8>)
2000e40a:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
2000e40c:	4b21      	ldr	r3, [pc, #132]	; (2000e494 <FLASH_SetErrorCode+0xa4>)
2000e40e:	2210      	movs	r2, #16
2000e410:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
2000e412:	4b20      	ldr	r3, [pc, #128]	; (2000e494 <FLASH_SetErrorCode+0xa4>)
2000e414:	68db      	ldr	r3, [r3, #12]
2000e416:	f003 0320 	and.w	r3, r3, #32
2000e41a:	2b00      	cmp	r3, #0
2000e41c:	d008      	beq.n	2000e430 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
2000e41e:	4b1e      	ldr	r3, [pc, #120]	; (2000e498 <FLASH_SetErrorCode+0xa8>)
2000e420:	69db      	ldr	r3, [r3, #28]
2000e422:	f043 0308 	orr.w	r3, r3, #8
2000e426:	4a1c      	ldr	r2, [pc, #112]	; (2000e498 <FLASH_SetErrorCode+0xa8>)
2000e428:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
2000e42a:	4b1a      	ldr	r3, [pc, #104]	; (2000e494 <FLASH_SetErrorCode+0xa4>)
2000e42c:	2220      	movs	r2, #32
2000e42e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
2000e430:	4b18      	ldr	r3, [pc, #96]	; (2000e494 <FLASH_SetErrorCode+0xa4>)
2000e432:	68db      	ldr	r3, [r3, #12]
2000e434:	f003 0340 	and.w	r3, r3, #64	; 0x40
2000e438:	2b00      	cmp	r3, #0
2000e43a:	d008      	beq.n	2000e44e <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
2000e43c:	4b16      	ldr	r3, [pc, #88]	; (2000e498 <FLASH_SetErrorCode+0xa8>)
2000e43e:	69db      	ldr	r3, [r3, #28]
2000e440:	f043 0304 	orr.w	r3, r3, #4
2000e444:	4a14      	ldr	r2, [pc, #80]	; (2000e498 <FLASH_SetErrorCode+0xa8>)
2000e446:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
2000e448:	4b12      	ldr	r3, [pc, #72]	; (2000e494 <FLASH_SetErrorCode+0xa4>)
2000e44a:	2240      	movs	r2, #64	; 0x40
2000e44c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
2000e44e:	4b11      	ldr	r3, [pc, #68]	; (2000e494 <FLASH_SetErrorCode+0xa4>)
2000e450:	68db      	ldr	r3, [r3, #12]
2000e452:	f003 0380 	and.w	r3, r3, #128	; 0x80
2000e456:	2b00      	cmp	r3, #0
2000e458:	d008      	beq.n	2000e46c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
2000e45a:	4b0f      	ldr	r3, [pc, #60]	; (2000e498 <FLASH_SetErrorCode+0xa8>)
2000e45c:	69db      	ldr	r3, [r3, #28]
2000e45e:	f043 0302 	orr.w	r3, r3, #2
2000e462:	4a0d      	ldr	r2, [pc, #52]	; (2000e498 <FLASH_SetErrorCode+0xa8>)
2000e464:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
2000e466:	4b0b      	ldr	r3, [pc, #44]	; (2000e494 <FLASH_SetErrorCode+0xa4>)
2000e468:	2280      	movs	r2, #128	; 0x80
2000e46a:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
2000e46c:	4b09      	ldr	r3, [pc, #36]	; (2000e494 <FLASH_SetErrorCode+0xa4>)
2000e46e:	68db      	ldr	r3, [r3, #12]
2000e470:	f003 0302 	and.w	r3, r3, #2
2000e474:	2b00      	cmp	r3, #0
2000e476:	d008      	beq.n	2000e48a <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
2000e478:	4b07      	ldr	r3, [pc, #28]	; (2000e498 <FLASH_SetErrorCode+0xa8>)
2000e47a:	69db      	ldr	r3, [r3, #28]
2000e47c:	f043 0320 	orr.w	r3, r3, #32
2000e480:	4a05      	ldr	r2, [pc, #20]	; (2000e498 <FLASH_SetErrorCode+0xa8>)
2000e482:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
2000e484:	4b03      	ldr	r3, [pc, #12]	; (2000e494 <FLASH_SetErrorCode+0xa4>)
2000e486:	2202      	movs	r2, #2
2000e488:	60da      	str	r2, [r3, #12]
  }
}
2000e48a:	bf00      	nop
2000e48c:	46bd      	mov	sp, r7
2000e48e:	f85d 7b04 	ldr.w	r7, [sp], #4
2000e492:	4770      	bx	lr
2000e494:	40023c00 	.word	0x40023c00
2000e498:	20010058 	.word	0x20010058

2000e49c <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
2000e49c:	b480      	push	{r7}
2000e49e:	b085      	sub	sp, #20
2000e4a0:	af00      	add	r7, sp, #0
2000e4a2:	6078      	str	r0, [r7, #4]
2000e4a4:	460b      	mov	r3, r1
2000e4a6:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
2000e4a8:	2300      	movs	r3, #0
2000e4aa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
2000e4ac:	78fb      	ldrb	r3, [r7, #3]
2000e4ae:	2b00      	cmp	r3, #0
2000e4b0:	d102      	bne.n	2000e4b8 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
2000e4b2:	2300      	movs	r3, #0
2000e4b4:	60fb      	str	r3, [r7, #12]
2000e4b6:	e010      	b.n	2000e4da <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
2000e4b8:	78fb      	ldrb	r3, [r7, #3]
2000e4ba:	2b01      	cmp	r3, #1
2000e4bc:	d103      	bne.n	2000e4c6 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
2000e4be:	f44f 7380 	mov.w	r3, #256	; 0x100
2000e4c2:	60fb      	str	r3, [r7, #12]
2000e4c4:	e009      	b.n	2000e4da <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
2000e4c6:	78fb      	ldrb	r3, [r7, #3]
2000e4c8:	2b02      	cmp	r3, #2
2000e4ca:	d103      	bne.n	2000e4d4 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
2000e4cc:	f44f 7300 	mov.w	r3, #512	; 0x200
2000e4d0:	60fb      	str	r3, [r7, #12]
2000e4d2:	e002      	b.n	2000e4da <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
2000e4d4:	f44f 7340 	mov.w	r3, #768	; 0x300
2000e4d8:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
2000e4da:	4b13      	ldr	r3, [pc, #76]	; (2000e528 <FLASH_Erase_Sector+0x8c>)
2000e4dc:	691b      	ldr	r3, [r3, #16]
2000e4de:	4a12      	ldr	r2, [pc, #72]	; (2000e528 <FLASH_Erase_Sector+0x8c>)
2000e4e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
2000e4e4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
2000e4e6:	4b10      	ldr	r3, [pc, #64]	; (2000e528 <FLASH_Erase_Sector+0x8c>)
2000e4e8:	691a      	ldr	r2, [r3, #16]
2000e4ea:	490f      	ldr	r1, [pc, #60]	; (2000e528 <FLASH_Erase_Sector+0x8c>)
2000e4ec:	68fb      	ldr	r3, [r7, #12]
2000e4ee:	4313      	orrs	r3, r2
2000e4f0:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
2000e4f2:	4b0d      	ldr	r3, [pc, #52]	; (2000e528 <FLASH_Erase_Sector+0x8c>)
2000e4f4:	691b      	ldr	r3, [r3, #16]
2000e4f6:	4a0c      	ldr	r2, [pc, #48]	; (2000e528 <FLASH_Erase_Sector+0x8c>)
2000e4f8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
2000e4fc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
2000e4fe:	4b0a      	ldr	r3, [pc, #40]	; (2000e528 <FLASH_Erase_Sector+0x8c>)
2000e500:	691a      	ldr	r2, [r3, #16]
2000e502:	687b      	ldr	r3, [r7, #4]
2000e504:	00db      	lsls	r3, r3, #3
2000e506:	4313      	orrs	r3, r2
2000e508:	4a07      	ldr	r2, [pc, #28]	; (2000e528 <FLASH_Erase_Sector+0x8c>)
2000e50a:	f043 0302 	orr.w	r3, r3, #2
2000e50e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
2000e510:	4b05      	ldr	r3, [pc, #20]	; (2000e528 <FLASH_Erase_Sector+0x8c>)
2000e512:	691b      	ldr	r3, [r3, #16]
2000e514:	4a04      	ldr	r2, [pc, #16]	; (2000e528 <FLASH_Erase_Sector+0x8c>)
2000e516:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
2000e51a:	6113      	str	r3, [r2, #16]
}
2000e51c:	bf00      	nop
2000e51e:	3714      	adds	r7, #20
2000e520:	46bd      	mov	sp, r7
2000e522:	f85d 7b04 	ldr.w	r7, [sp], #4
2000e526:	4770      	bx	lr
2000e528:	40023c00 	.word	0x40023c00

2000e52c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
2000e52c:	b480      	push	{r7}
2000e52e:	b089      	sub	sp, #36	; 0x24
2000e530:	af00      	add	r7, sp, #0
2000e532:	6078      	str	r0, [r7, #4]
2000e534:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
2000e536:	2300      	movs	r3, #0
2000e538:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
2000e53a:	2300      	movs	r3, #0
2000e53c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
2000e53e:	2300      	movs	r3, #0
2000e540:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
2000e542:	2300      	movs	r3, #0
2000e544:	61fb      	str	r3, [r7, #28]
2000e546:	e16b      	b.n	2000e820 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
2000e548:	2201      	movs	r2, #1
2000e54a:	69fb      	ldr	r3, [r7, #28]
2000e54c:	fa02 f303 	lsl.w	r3, r2, r3
2000e550:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
2000e552:	683b      	ldr	r3, [r7, #0]
2000e554:	681b      	ldr	r3, [r3, #0]
2000e556:	697a      	ldr	r2, [r7, #20]
2000e558:	4013      	ands	r3, r2
2000e55a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
2000e55c:	693a      	ldr	r2, [r7, #16]
2000e55e:	697b      	ldr	r3, [r7, #20]
2000e560:	429a      	cmp	r2, r3
2000e562:	f040 815a 	bne.w	2000e81a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
2000e566:	683b      	ldr	r3, [r7, #0]
2000e568:	685b      	ldr	r3, [r3, #4]
2000e56a:	2b01      	cmp	r3, #1
2000e56c:	d00b      	beq.n	2000e586 <HAL_GPIO_Init+0x5a>
2000e56e:	683b      	ldr	r3, [r7, #0]
2000e570:	685b      	ldr	r3, [r3, #4]
2000e572:	2b02      	cmp	r3, #2
2000e574:	d007      	beq.n	2000e586 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
2000e576:	683b      	ldr	r3, [r7, #0]
2000e578:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
2000e57a:	2b11      	cmp	r3, #17
2000e57c:	d003      	beq.n	2000e586 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
2000e57e:	683b      	ldr	r3, [r7, #0]
2000e580:	685b      	ldr	r3, [r3, #4]
2000e582:	2b12      	cmp	r3, #18
2000e584:	d130      	bne.n	2000e5e8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
2000e586:	687b      	ldr	r3, [r7, #4]
2000e588:	689b      	ldr	r3, [r3, #8]
2000e58a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
2000e58c:	69fb      	ldr	r3, [r7, #28]
2000e58e:	005b      	lsls	r3, r3, #1
2000e590:	2203      	movs	r2, #3
2000e592:	fa02 f303 	lsl.w	r3, r2, r3
2000e596:	43db      	mvns	r3, r3
2000e598:	69ba      	ldr	r2, [r7, #24]
2000e59a:	4013      	ands	r3, r2
2000e59c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
2000e59e:	683b      	ldr	r3, [r7, #0]
2000e5a0:	68da      	ldr	r2, [r3, #12]
2000e5a2:	69fb      	ldr	r3, [r7, #28]
2000e5a4:	005b      	lsls	r3, r3, #1
2000e5a6:	fa02 f303 	lsl.w	r3, r2, r3
2000e5aa:	69ba      	ldr	r2, [r7, #24]
2000e5ac:	4313      	orrs	r3, r2
2000e5ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
2000e5b0:	687b      	ldr	r3, [r7, #4]
2000e5b2:	69ba      	ldr	r2, [r7, #24]
2000e5b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
2000e5b6:	687b      	ldr	r3, [r7, #4]
2000e5b8:	685b      	ldr	r3, [r3, #4]
2000e5ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
2000e5bc:	2201      	movs	r2, #1
2000e5be:	69fb      	ldr	r3, [r7, #28]
2000e5c0:	fa02 f303 	lsl.w	r3, r2, r3
2000e5c4:	43db      	mvns	r3, r3
2000e5c6:	69ba      	ldr	r2, [r7, #24]
2000e5c8:	4013      	ands	r3, r2
2000e5ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
2000e5cc:	683b      	ldr	r3, [r7, #0]
2000e5ce:	685b      	ldr	r3, [r3, #4]
2000e5d0:	091b      	lsrs	r3, r3, #4
2000e5d2:	f003 0201 	and.w	r2, r3, #1
2000e5d6:	69fb      	ldr	r3, [r7, #28]
2000e5d8:	fa02 f303 	lsl.w	r3, r2, r3
2000e5dc:	69ba      	ldr	r2, [r7, #24]
2000e5de:	4313      	orrs	r3, r2
2000e5e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
2000e5e2:	687b      	ldr	r3, [r7, #4]
2000e5e4:	69ba      	ldr	r2, [r7, #24]
2000e5e6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
2000e5e8:	687b      	ldr	r3, [r7, #4]
2000e5ea:	68db      	ldr	r3, [r3, #12]
2000e5ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
2000e5ee:	69fb      	ldr	r3, [r7, #28]
2000e5f0:	005b      	lsls	r3, r3, #1
2000e5f2:	2203      	movs	r2, #3
2000e5f4:	fa02 f303 	lsl.w	r3, r2, r3
2000e5f8:	43db      	mvns	r3, r3
2000e5fa:	69ba      	ldr	r2, [r7, #24]
2000e5fc:	4013      	ands	r3, r2
2000e5fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
2000e600:	683b      	ldr	r3, [r7, #0]
2000e602:	689a      	ldr	r2, [r3, #8]
2000e604:	69fb      	ldr	r3, [r7, #28]
2000e606:	005b      	lsls	r3, r3, #1
2000e608:	fa02 f303 	lsl.w	r3, r2, r3
2000e60c:	69ba      	ldr	r2, [r7, #24]
2000e60e:	4313      	orrs	r3, r2
2000e610:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
2000e612:	687b      	ldr	r3, [r7, #4]
2000e614:	69ba      	ldr	r2, [r7, #24]
2000e616:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
2000e618:	683b      	ldr	r3, [r7, #0]
2000e61a:	685b      	ldr	r3, [r3, #4]
2000e61c:	2b02      	cmp	r3, #2
2000e61e:	d003      	beq.n	2000e628 <HAL_GPIO_Init+0xfc>
2000e620:	683b      	ldr	r3, [r7, #0]
2000e622:	685b      	ldr	r3, [r3, #4]
2000e624:	2b12      	cmp	r3, #18
2000e626:	d123      	bne.n	2000e670 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
2000e628:	69fb      	ldr	r3, [r7, #28]
2000e62a:	08da      	lsrs	r2, r3, #3
2000e62c:	687b      	ldr	r3, [r7, #4]
2000e62e:	3208      	adds	r2, #8
2000e630:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
2000e634:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
2000e636:	69fb      	ldr	r3, [r7, #28]
2000e638:	f003 0307 	and.w	r3, r3, #7
2000e63c:	009b      	lsls	r3, r3, #2
2000e63e:	220f      	movs	r2, #15
2000e640:	fa02 f303 	lsl.w	r3, r2, r3
2000e644:	43db      	mvns	r3, r3
2000e646:	69ba      	ldr	r2, [r7, #24]
2000e648:	4013      	ands	r3, r2
2000e64a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
2000e64c:	683b      	ldr	r3, [r7, #0]
2000e64e:	691a      	ldr	r2, [r3, #16]
2000e650:	69fb      	ldr	r3, [r7, #28]
2000e652:	f003 0307 	and.w	r3, r3, #7
2000e656:	009b      	lsls	r3, r3, #2
2000e658:	fa02 f303 	lsl.w	r3, r2, r3
2000e65c:	69ba      	ldr	r2, [r7, #24]
2000e65e:	4313      	orrs	r3, r2
2000e660:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
2000e662:	69fb      	ldr	r3, [r7, #28]
2000e664:	08da      	lsrs	r2, r3, #3
2000e666:	687b      	ldr	r3, [r7, #4]
2000e668:	3208      	adds	r2, #8
2000e66a:	69b9      	ldr	r1, [r7, #24]
2000e66c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
2000e670:	687b      	ldr	r3, [r7, #4]
2000e672:	681b      	ldr	r3, [r3, #0]
2000e674:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
2000e676:	69fb      	ldr	r3, [r7, #28]
2000e678:	005b      	lsls	r3, r3, #1
2000e67a:	2203      	movs	r2, #3
2000e67c:	fa02 f303 	lsl.w	r3, r2, r3
2000e680:	43db      	mvns	r3, r3
2000e682:	69ba      	ldr	r2, [r7, #24]
2000e684:	4013      	ands	r3, r2
2000e686:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
2000e688:	683b      	ldr	r3, [r7, #0]
2000e68a:	685b      	ldr	r3, [r3, #4]
2000e68c:	f003 0203 	and.w	r2, r3, #3
2000e690:	69fb      	ldr	r3, [r7, #28]
2000e692:	005b      	lsls	r3, r3, #1
2000e694:	fa02 f303 	lsl.w	r3, r2, r3
2000e698:	69ba      	ldr	r2, [r7, #24]
2000e69a:	4313      	orrs	r3, r2
2000e69c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
2000e69e:	687b      	ldr	r3, [r7, #4]
2000e6a0:	69ba      	ldr	r2, [r7, #24]
2000e6a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
2000e6a4:	683b      	ldr	r3, [r7, #0]
2000e6a6:	685b      	ldr	r3, [r3, #4]
2000e6a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
2000e6ac:	2b00      	cmp	r3, #0
2000e6ae:	f000 80b4 	beq.w	2000e81a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
2000e6b2:	2300      	movs	r3, #0
2000e6b4:	60fb      	str	r3, [r7, #12]
2000e6b6:	4b5f      	ldr	r3, [pc, #380]	; (2000e834 <HAL_GPIO_Init+0x308>)
2000e6b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2000e6ba:	4a5e      	ldr	r2, [pc, #376]	; (2000e834 <HAL_GPIO_Init+0x308>)
2000e6bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
2000e6c0:	6453      	str	r3, [r2, #68]	; 0x44
2000e6c2:	4b5c      	ldr	r3, [pc, #368]	; (2000e834 <HAL_GPIO_Init+0x308>)
2000e6c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2000e6c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
2000e6ca:	60fb      	str	r3, [r7, #12]
2000e6cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
2000e6ce:	4a5a      	ldr	r2, [pc, #360]	; (2000e838 <HAL_GPIO_Init+0x30c>)
2000e6d0:	69fb      	ldr	r3, [r7, #28]
2000e6d2:	089b      	lsrs	r3, r3, #2
2000e6d4:	3302      	adds	r3, #2
2000e6d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
2000e6da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
2000e6dc:	69fb      	ldr	r3, [r7, #28]
2000e6de:	f003 0303 	and.w	r3, r3, #3
2000e6e2:	009b      	lsls	r3, r3, #2
2000e6e4:	220f      	movs	r2, #15
2000e6e6:	fa02 f303 	lsl.w	r3, r2, r3
2000e6ea:	43db      	mvns	r3, r3
2000e6ec:	69ba      	ldr	r2, [r7, #24]
2000e6ee:	4013      	ands	r3, r2
2000e6f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
2000e6f2:	687b      	ldr	r3, [r7, #4]
2000e6f4:	4a51      	ldr	r2, [pc, #324]	; (2000e83c <HAL_GPIO_Init+0x310>)
2000e6f6:	4293      	cmp	r3, r2
2000e6f8:	d02b      	beq.n	2000e752 <HAL_GPIO_Init+0x226>
2000e6fa:	687b      	ldr	r3, [r7, #4]
2000e6fc:	4a50      	ldr	r2, [pc, #320]	; (2000e840 <HAL_GPIO_Init+0x314>)
2000e6fe:	4293      	cmp	r3, r2
2000e700:	d025      	beq.n	2000e74e <HAL_GPIO_Init+0x222>
2000e702:	687b      	ldr	r3, [r7, #4]
2000e704:	4a4f      	ldr	r2, [pc, #316]	; (2000e844 <HAL_GPIO_Init+0x318>)
2000e706:	4293      	cmp	r3, r2
2000e708:	d01f      	beq.n	2000e74a <HAL_GPIO_Init+0x21e>
2000e70a:	687b      	ldr	r3, [r7, #4]
2000e70c:	4a4e      	ldr	r2, [pc, #312]	; (2000e848 <HAL_GPIO_Init+0x31c>)
2000e70e:	4293      	cmp	r3, r2
2000e710:	d019      	beq.n	2000e746 <HAL_GPIO_Init+0x21a>
2000e712:	687b      	ldr	r3, [r7, #4]
2000e714:	4a4d      	ldr	r2, [pc, #308]	; (2000e84c <HAL_GPIO_Init+0x320>)
2000e716:	4293      	cmp	r3, r2
2000e718:	d013      	beq.n	2000e742 <HAL_GPIO_Init+0x216>
2000e71a:	687b      	ldr	r3, [r7, #4]
2000e71c:	4a4c      	ldr	r2, [pc, #304]	; (2000e850 <HAL_GPIO_Init+0x324>)
2000e71e:	4293      	cmp	r3, r2
2000e720:	d00d      	beq.n	2000e73e <HAL_GPIO_Init+0x212>
2000e722:	687b      	ldr	r3, [r7, #4]
2000e724:	4a4b      	ldr	r2, [pc, #300]	; (2000e854 <HAL_GPIO_Init+0x328>)
2000e726:	4293      	cmp	r3, r2
2000e728:	d007      	beq.n	2000e73a <HAL_GPIO_Init+0x20e>
2000e72a:	687b      	ldr	r3, [r7, #4]
2000e72c:	4a4a      	ldr	r2, [pc, #296]	; (2000e858 <HAL_GPIO_Init+0x32c>)
2000e72e:	4293      	cmp	r3, r2
2000e730:	d101      	bne.n	2000e736 <HAL_GPIO_Init+0x20a>
2000e732:	2307      	movs	r3, #7
2000e734:	e00e      	b.n	2000e754 <HAL_GPIO_Init+0x228>
2000e736:	2308      	movs	r3, #8
2000e738:	e00c      	b.n	2000e754 <HAL_GPIO_Init+0x228>
2000e73a:	2306      	movs	r3, #6
2000e73c:	e00a      	b.n	2000e754 <HAL_GPIO_Init+0x228>
2000e73e:	2305      	movs	r3, #5
2000e740:	e008      	b.n	2000e754 <HAL_GPIO_Init+0x228>
2000e742:	2304      	movs	r3, #4
2000e744:	e006      	b.n	2000e754 <HAL_GPIO_Init+0x228>
2000e746:	2303      	movs	r3, #3
2000e748:	e004      	b.n	2000e754 <HAL_GPIO_Init+0x228>
2000e74a:	2302      	movs	r3, #2
2000e74c:	e002      	b.n	2000e754 <HAL_GPIO_Init+0x228>
2000e74e:	2301      	movs	r3, #1
2000e750:	e000      	b.n	2000e754 <HAL_GPIO_Init+0x228>
2000e752:	2300      	movs	r3, #0
2000e754:	69fa      	ldr	r2, [r7, #28]
2000e756:	f002 0203 	and.w	r2, r2, #3
2000e75a:	0092      	lsls	r2, r2, #2
2000e75c:	4093      	lsls	r3, r2
2000e75e:	69ba      	ldr	r2, [r7, #24]
2000e760:	4313      	orrs	r3, r2
2000e762:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
2000e764:	4934      	ldr	r1, [pc, #208]	; (2000e838 <HAL_GPIO_Init+0x30c>)
2000e766:	69fb      	ldr	r3, [r7, #28]
2000e768:	089b      	lsrs	r3, r3, #2
2000e76a:	3302      	adds	r3, #2
2000e76c:	69ba      	ldr	r2, [r7, #24]
2000e76e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
2000e772:	4b3a      	ldr	r3, [pc, #232]	; (2000e85c <HAL_GPIO_Init+0x330>)
2000e774:	681b      	ldr	r3, [r3, #0]
2000e776:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
2000e778:	693b      	ldr	r3, [r7, #16]
2000e77a:	43db      	mvns	r3, r3
2000e77c:	69ba      	ldr	r2, [r7, #24]
2000e77e:	4013      	ands	r3, r2
2000e780:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
2000e782:	683b      	ldr	r3, [r7, #0]
2000e784:	685b      	ldr	r3, [r3, #4]
2000e786:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
2000e78a:	2b00      	cmp	r3, #0
2000e78c:	d003      	beq.n	2000e796 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
2000e78e:	69ba      	ldr	r2, [r7, #24]
2000e790:	693b      	ldr	r3, [r7, #16]
2000e792:	4313      	orrs	r3, r2
2000e794:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
2000e796:	4a31      	ldr	r2, [pc, #196]	; (2000e85c <HAL_GPIO_Init+0x330>)
2000e798:	69bb      	ldr	r3, [r7, #24]
2000e79a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
2000e79c:	4b2f      	ldr	r3, [pc, #188]	; (2000e85c <HAL_GPIO_Init+0x330>)
2000e79e:	685b      	ldr	r3, [r3, #4]
2000e7a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
2000e7a2:	693b      	ldr	r3, [r7, #16]
2000e7a4:	43db      	mvns	r3, r3
2000e7a6:	69ba      	ldr	r2, [r7, #24]
2000e7a8:	4013      	ands	r3, r2
2000e7aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
2000e7ac:	683b      	ldr	r3, [r7, #0]
2000e7ae:	685b      	ldr	r3, [r3, #4]
2000e7b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
2000e7b4:	2b00      	cmp	r3, #0
2000e7b6:	d003      	beq.n	2000e7c0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
2000e7b8:	69ba      	ldr	r2, [r7, #24]
2000e7ba:	693b      	ldr	r3, [r7, #16]
2000e7bc:	4313      	orrs	r3, r2
2000e7be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
2000e7c0:	4a26      	ldr	r2, [pc, #152]	; (2000e85c <HAL_GPIO_Init+0x330>)
2000e7c2:	69bb      	ldr	r3, [r7, #24]
2000e7c4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
2000e7c6:	4b25      	ldr	r3, [pc, #148]	; (2000e85c <HAL_GPIO_Init+0x330>)
2000e7c8:	689b      	ldr	r3, [r3, #8]
2000e7ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
2000e7cc:	693b      	ldr	r3, [r7, #16]
2000e7ce:	43db      	mvns	r3, r3
2000e7d0:	69ba      	ldr	r2, [r7, #24]
2000e7d2:	4013      	ands	r3, r2
2000e7d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
2000e7d6:	683b      	ldr	r3, [r7, #0]
2000e7d8:	685b      	ldr	r3, [r3, #4]
2000e7da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
2000e7de:	2b00      	cmp	r3, #0
2000e7e0:	d003      	beq.n	2000e7ea <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
2000e7e2:	69ba      	ldr	r2, [r7, #24]
2000e7e4:	693b      	ldr	r3, [r7, #16]
2000e7e6:	4313      	orrs	r3, r2
2000e7e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
2000e7ea:	4a1c      	ldr	r2, [pc, #112]	; (2000e85c <HAL_GPIO_Init+0x330>)
2000e7ec:	69bb      	ldr	r3, [r7, #24]
2000e7ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
2000e7f0:	4b1a      	ldr	r3, [pc, #104]	; (2000e85c <HAL_GPIO_Init+0x330>)
2000e7f2:	68db      	ldr	r3, [r3, #12]
2000e7f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
2000e7f6:	693b      	ldr	r3, [r7, #16]
2000e7f8:	43db      	mvns	r3, r3
2000e7fa:	69ba      	ldr	r2, [r7, #24]
2000e7fc:	4013      	ands	r3, r2
2000e7fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
2000e800:	683b      	ldr	r3, [r7, #0]
2000e802:	685b      	ldr	r3, [r3, #4]
2000e804:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
2000e808:	2b00      	cmp	r3, #0
2000e80a:	d003      	beq.n	2000e814 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
2000e80c:	69ba      	ldr	r2, [r7, #24]
2000e80e:	693b      	ldr	r3, [r7, #16]
2000e810:	4313      	orrs	r3, r2
2000e812:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
2000e814:	4a11      	ldr	r2, [pc, #68]	; (2000e85c <HAL_GPIO_Init+0x330>)
2000e816:	69bb      	ldr	r3, [r7, #24]
2000e818:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
2000e81a:	69fb      	ldr	r3, [r7, #28]
2000e81c:	3301      	adds	r3, #1
2000e81e:	61fb      	str	r3, [r7, #28]
2000e820:	69fb      	ldr	r3, [r7, #28]
2000e822:	2b0f      	cmp	r3, #15
2000e824:	f67f ae90 	bls.w	2000e548 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
2000e828:	bf00      	nop
2000e82a:	3724      	adds	r7, #36	; 0x24
2000e82c:	46bd      	mov	sp, r7
2000e82e:	f85d 7b04 	ldr.w	r7, [sp], #4
2000e832:	4770      	bx	lr
2000e834:	40023800 	.word	0x40023800
2000e838:	40013800 	.word	0x40013800
2000e83c:	40020000 	.word	0x40020000
2000e840:	40020400 	.word	0x40020400
2000e844:	40020800 	.word	0x40020800
2000e848:	40020c00 	.word	0x40020c00
2000e84c:	40021000 	.word	0x40021000
2000e850:	40021400 	.word	0x40021400
2000e854:	40021800 	.word	0x40021800
2000e858:	40021c00 	.word	0x40021c00
2000e85c:	40013c00 	.word	0x40013c00

2000e860 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
2000e860:	b480      	push	{r7}
2000e862:	b083      	sub	sp, #12
2000e864:	af00      	add	r7, sp, #0
2000e866:	6078      	str	r0, [r7, #4]
2000e868:	460b      	mov	r3, r1
2000e86a:	807b      	strh	r3, [r7, #2]
2000e86c:	4613      	mov	r3, r2
2000e86e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
2000e870:	787b      	ldrb	r3, [r7, #1]
2000e872:	2b00      	cmp	r3, #0
2000e874:	d003      	beq.n	2000e87e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
2000e876:	887a      	ldrh	r2, [r7, #2]
2000e878:	687b      	ldr	r3, [r7, #4]
2000e87a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
2000e87c:	e003      	b.n	2000e886 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
2000e87e:	887b      	ldrh	r3, [r7, #2]
2000e880:	041a      	lsls	r2, r3, #16
2000e882:	687b      	ldr	r3, [r7, #4]
2000e884:	619a      	str	r2, [r3, #24]
}
2000e886:	bf00      	nop
2000e888:	370c      	adds	r7, #12
2000e88a:	46bd      	mov	sp, r7
2000e88c:	f85d 7b04 	ldr.w	r7, [sp], #4
2000e890:	4770      	bx	lr

2000e892 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
2000e892:	b580      	push	{r7, lr}
2000e894:	b084      	sub	sp, #16
2000e896:	af00      	add	r7, sp, #0
2000e898:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
2000e89a:	687b      	ldr	r3, [r7, #4]
2000e89c:	2b00      	cmp	r3, #0
2000e89e:	d101      	bne.n	2000e8a4 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
2000e8a0:	2301      	movs	r3, #1
2000e8a2:	e02b      	b.n	2000e8fc <HAL_IWDG_Init+0x6a>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
2000e8a4:	687b      	ldr	r3, [r7, #4]
2000e8a6:	681b      	ldr	r3, [r3, #0]
2000e8a8:	f64c 42cc 	movw	r2, #52428	; 0xcccc
2000e8ac:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
2000e8ae:	687b      	ldr	r3, [r7, #4]
2000e8b0:	681b      	ldr	r3, [r3, #0]
2000e8b2:	f245 5255 	movw	r2, #21845	; 0x5555
2000e8b6:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
2000e8b8:	687b      	ldr	r3, [r7, #4]
2000e8ba:	681b      	ldr	r3, [r3, #0]
2000e8bc:	687a      	ldr	r2, [r7, #4]
2000e8be:	6852      	ldr	r2, [r2, #4]
2000e8c0:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
2000e8c2:	687b      	ldr	r3, [r7, #4]
2000e8c4:	681b      	ldr	r3, [r3, #0]
2000e8c6:	687a      	ldr	r2, [r7, #4]
2000e8c8:	6892      	ldr	r2, [r2, #8]
2000e8ca:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
2000e8cc:	f7ff fb40 	bl	2000df50 <HAL_GetTick>
2000e8d0:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while (hiwdg->Instance->SR != 0x00u)
2000e8d2:	e008      	b.n	2000e8e6 <HAL_IWDG_Init+0x54>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
2000e8d4:	f7ff fb3c 	bl	2000df50 <HAL_GetTick>
2000e8d8:	4602      	mov	r2, r0
2000e8da:	68fb      	ldr	r3, [r7, #12]
2000e8dc:	1ad3      	subs	r3, r2, r3
2000e8de:	2b30      	cmp	r3, #48	; 0x30
2000e8e0:	d901      	bls.n	2000e8e6 <HAL_IWDG_Init+0x54>
    {
      return HAL_TIMEOUT;
2000e8e2:	2303      	movs	r3, #3
2000e8e4:	e00a      	b.n	2000e8fc <HAL_IWDG_Init+0x6a>
  while (hiwdg->Instance->SR != 0x00u)
2000e8e6:	687b      	ldr	r3, [r7, #4]
2000e8e8:	681b      	ldr	r3, [r3, #0]
2000e8ea:	68db      	ldr	r3, [r3, #12]
2000e8ec:	2b00      	cmp	r3, #0
2000e8ee:	d1f1      	bne.n	2000e8d4 <HAL_IWDG_Init+0x42>
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
2000e8f0:	687b      	ldr	r3, [r7, #4]
2000e8f2:	681b      	ldr	r3, [r3, #0]
2000e8f4:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
2000e8f8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
2000e8fa:	2300      	movs	r3, #0
}
2000e8fc:	4618      	mov	r0, r3
2000e8fe:	3710      	adds	r7, #16
2000e900:	46bd      	mov	sp, r7
2000e902:	bd80      	pop	{r7, pc}

2000e904 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
2000e904:	b580      	push	{r7, lr}
2000e906:	b086      	sub	sp, #24
2000e908:	af00      	add	r7, sp, #0
2000e90a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
2000e90c:	687b      	ldr	r3, [r7, #4]
2000e90e:	2b00      	cmp	r3, #0
2000e910:	d101      	bne.n	2000e916 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
2000e912:	2301      	movs	r3, #1
2000e914:	e25b      	b.n	2000edce <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
2000e916:	687b      	ldr	r3, [r7, #4]
2000e918:	681b      	ldr	r3, [r3, #0]
2000e91a:	f003 0301 	and.w	r3, r3, #1
2000e91e:	2b00      	cmp	r3, #0
2000e920:	d075      	beq.n	2000ea0e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
2000e922:	4ba3      	ldr	r3, [pc, #652]	; (2000ebb0 <HAL_RCC_OscConfig+0x2ac>)
2000e924:	689b      	ldr	r3, [r3, #8]
2000e926:	f003 030c 	and.w	r3, r3, #12
2000e92a:	2b04      	cmp	r3, #4
2000e92c:	d00c      	beq.n	2000e948 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
2000e92e:	4ba0      	ldr	r3, [pc, #640]	; (2000ebb0 <HAL_RCC_OscConfig+0x2ac>)
2000e930:	689b      	ldr	r3, [r3, #8]
2000e932:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
2000e936:	2b08      	cmp	r3, #8
2000e938:	d112      	bne.n	2000e960 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
2000e93a:	4b9d      	ldr	r3, [pc, #628]	; (2000ebb0 <HAL_RCC_OscConfig+0x2ac>)
2000e93c:	685b      	ldr	r3, [r3, #4]
2000e93e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
2000e942:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
2000e946:	d10b      	bne.n	2000e960 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
2000e948:	4b99      	ldr	r3, [pc, #612]	; (2000ebb0 <HAL_RCC_OscConfig+0x2ac>)
2000e94a:	681b      	ldr	r3, [r3, #0]
2000e94c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
2000e950:	2b00      	cmp	r3, #0
2000e952:	d05b      	beq.n	2000ea0c <HAL_RCC_OscConfig+0x108>
2000e954:	687b      	ldr	r3, [r7, #4]
2000e956:	685b      	ldr	r3, [r3, #4]
2000e958:	2b00      	cmp	r3, #0
2000e95a:	d157      	bne.n	2000ea0c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
2000e95c:	2301      	movs	r3, #1
2000e95e:	e236      	b.n	2000edce <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
2000e960:	687b      	ldr	r3, [r7, #4]
2000e962:	685b      	ldr	r3, [r3, #4]
2000e964:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
2000e968:	d106      	bne.n	2000e978 <HAL_RCC_OscConfig+0x74>
2000e96a:	4b91      	ldr	r3, [pc, #580]	; (2000ebb0 <HAL_RCC_OscConfig+0x2ac>)
2000e96c:	681b      	ldr	r3, [r3, #0]
2000e96e:	4a90      	ldr	r2, [pc, #576]	; (2000ebb0 <HAL_RCC_OscConfig+0x2ac>)
2000e970:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
2000e974:	6013      	str	r3, [r2, #0]
2000e976:	e01d      	b.n	2000e9b4 <HAL_RCC_OscConfig+0xb0>
2000e978:	687b      	ldr	r3, [r7, #4]
2000e97a:	685b      	ldr	r3, [r3, #4]
2000e97c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
2000e980:	d10c      	bne.n	2000e99c <HAL_RCC_OscConfig+0x98>
2000e982:	4b8b      	ldr	r3, [pc, #556]	; (2000ebb0 <HAL_RCC_OscConfig+0x2ac>)
2000e984:	681b      	ldr	r3, [r3, #0]
2000e986:	4a8a      	ldr	r2, [pc, #552]	; (2000ebb0 <HAL_RCC_OscConfig+0x2ac>)
2000e988:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
2000e98c:	6013      	str	r3, [r2, #0]
2000e98e:	4b88      	ldr	r3, [pc, #544]	; (2000ebb0 <HAL_RCC_OscConfig+0x2ac>)
2000e990:	681b      	ldr	r3, [r3, #0]
2000e992:	4a87      	ldr	r2, [pc, #540]	; (2000ebb0 <HAL_RCC_OscConfig+0x2ac>)
2000e994:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
2000e998:	6013      	str	r3, [r2, #0]
2000e99a:	e00b      	b.n	2000e9b4 <HAL_RCC_OscConfig+0xb0>
2000e99c:	4b84      	ldr	r3, [pc, #528]	; (2000ebb0 <HAL_RCC_OscConfig+0x2ac>)
2000e99e:	681b      	ldr	r3, [r3, #0]
2000e9a0:	4a83      	ldr	r2, [pc, #524]	; (2000ebb0 <HAL_RCC_OscConfig+0x2ac>)
2000e9a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
2000e9a6:	6013      	str	r3, [r2, #0]
2000e9a8:	4b81      	ldr	r3, [pc, #516]	; (2000ebb0 <HAL_RCC_OscConfig+0x2ac>)
2000e9aa:	681b      	ldr	r3, [r3, #0]
2000e9ac:	4a80      	ldr	r2, [pc, #512]	; (2000ebb0 <HAL_RCC_OscConfig+0x2ac>)
2000e9ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
2000e9b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
2000e9b4:	687b      	ldr	r3, [r7, #4]
2000e9b6:	685b      	ldr	r3, [r3, #4]
2000e9b8:	2b00      	cmp	r3, #0
2000e9ba:	d013      	beq.n	2000e9e4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
2000e9bc:	f7ff fac8 	bl	2000df50 <HAL_GetTick>
2000e9c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
2000e9c2:	e008      	b.n	2000e9d6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
2000e9c4:	f7ff fac4 	bl	2000df50 <HAL_GetTick>
2000e9c8:	4602      	mov	r2, r0
2000e9ca:	693b      	ldr	r3, [r7, #16]
2000e9cc:	1ad3      	subs	r3, r2, r3
2000e9ce:	2b64      	cmp	r3, #100	; 0x64
2000e9d0:	d901      	bls.n	2000e9d6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
2000e9d2:	2303      	movs	r3, #3
2000e9d4:	e1fb      	b.n	2000edce <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
2000e9d6:	4b76      	ldr	r3, [pc, #472]	; (2000ebb0 <HAL_RCC_OscConfig+0x2ac>)
2000e9d8:	681b      	ldr	r3, [r3, #0]
2000e9da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
2000e9de:	2b00      	cmp	r3, #0
2000e9e0:	d0f0      	beq.n	2000e9c4 <HAL_RCC_OscConfig+0xc0>
2000e9e2:	e014      	b.n	2000ea0e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
2000e9e4:	f7ff fab4 	bl	2000df50 <HAL_GetTick>
2000e9e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
2000e9ea:	e008      	b.n	2000e9fe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
2000e9ec:	f7ff fab0 	bl	2000df50 <HAL_GetTick>
2000e9f0:	4602      	mov	r2, r0
2000e9f2:	693b      	ldr	r3, [r7, #16]
2000e9f4:	1ad3      	subs	r3, r2, r3
2000e9f6:	2b64      	cmp	r3, #100	; 0x64
2000e9f8:	d901      	bls.n	2000e9fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
2000e9fa:	2303      	movs	r3, #3
2000e9fc:	e1e7      	b.n	2000edce <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
2000e9fe:	4b6c      	ldr	r3, [pc, #432]	; (2000ebb0 <HAL_RCC_OscConfig+0x2ac>)
2000ea00:	681b      	ldr	r3, [r3, #0]
2000ea02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
2000ea06:	2b00      	cmp	r3, #0
2000ea08:	d1f0      	bne.n	2000e9ec <HAL_RCC_OscConfig+0xe8>
2000ea0a:	e000      	b.n	2000ea0e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
2000ea0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
2000ea0e:	687b      	ldr	r3, [r7, #4]
2000ea10:	681b      	ldr	r3, [r3, #0]
2000ea12:	f003 0302 	and.w	r3, r3, #2
2000ea16:	2b00      	cmp	r3, #0
2000ea18:	d063      	beq.n	2000eae2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
2000ea1a:	4b65      	ldr	r3, [pc, #404]	; (2000ebb0 <HAL_RCC_OscConfig+0x2ac>)
2000ea1c:	689b      	ldr	r3, [r3, #8]
2000ea1e:	f003 030c 	and.w	r3, r3, #12
2000ea22:	2b00      	cmp	r3, #0
2000ea24:	d00b      	beq.n	2000ea3e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
2000ea26:	4b62      	ldr	r3, [pc, #392]	; (2000ebb0 <HAL_RCC_OscConfig+0x2ac>)
2000ea28:	689b      	ldr	r3, [r3, #8]
2000ea2a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
2000ea2e:	2b08      	cmp	r3, #8
2000ea30:	d11c      	bne.n	2000ea6c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
2000ea32:	4b5f      	ldr	r3, [pc, #380]	; (2000ebb0 <HAL_RCC_OscConfig+0x2ac>)
2000ea34:	685b      	ldr	r3, [r3, #4]
2000ea36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
2000ea3a:	2b00      	cmp	r3, #0
2000ea3c:	d116      	bne.n	2000ea6c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
2000ea3e:	4b5c      	ldr	r3, [pc, #368]	; (2000ebb0 <HAL_RCC_OscConfig+0x2ac>)
2000ea40:	681b      	ldr	r3, [r3, #0]
2000ea42:	f003 0302 	and.w	r3, r3, #2
2000ea46:	2b00      	cmp	r3, #0
2000ea48:	d005      	beq.n	2000ea56 <HAL_RCC_OscConfig+0x152>
2000ea4a:	687b      	ldr	r3, [r7, #4]
2000ea4c:	68db      	ldr	r3, [r3, #12]
2000ea4e:	2b01      	cmp	r3, #1
2000ea50:	d001      	beq.n	2000ea56 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
2000ea52:	2301      	movs	r3, #1
2000ea54:	e1bb      	b.n	2000edce <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
2000ea56:	4b56      	ldr	r3, [pc, #344]	; (2000ebb0 <HAL_RCC_OscConfig+0x2ac>)
2000ea58:	681b      	ldr	r3, [r3, #0]
2000ea5a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
2000ea5e:	687b      	ldr	r3, [r7, #4]
2000ea60:	691b      	ldr	r3, [r3, #16]
2000ea62:	00db      	lsls	r3, r3, #3
2000ea64:	4952      	ldr	r1, [pc, #328]	; (2000ebb0 <HAL_RCC_OscConfig+0x2ac>)
2000ea66:	4313      	orrs	r3, r2
2000ea68:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
2000ea6a:	e03a      	b.n	2000eae2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
2000ea6c:	687b      	ldr	r3, [r7, #4]
2000ea6e:	68db      	ldr	r3, [r3, #12]
2000ea70:	2b00      	cmp	r3, #0
2000ea72:	d020      	beq.n	2000eab6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
2000ea74:	4b4f      	ldr	r3, [pc, #316]	; (2000ebb4 <HAL_RCC_OscConfig+0x2b0>)
2000ea76:	2201      	movs	r2, #1
2000ea78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
2000ea7a:	f7ff fa69 	bl	2000df50 <HAL_GetTick>
2000ea7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
2000ea80:	e008      	b.n	2000ea94 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
2000ea82:	f7ff fa65 	bl	2000df50 <HAL_GetTick>
2000ea86:	4602      	mov	r2, r0
2000ea88:	693b      	ldr	r3, [r7, #16]
2000ea8a:	1ad3      	subs	r3, r2, r3
2000ea8c:	2b02      	cmp	r3, #2
2000ea8e:	d901      	bls.n	2000ea94 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
2000ea90:	2303      	movs	r3, #3
2000ea92:	e19c      	b.n	2000edce <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
2000ea94:	4b46      	ldr	r3, [pc, #280]	; (2000ebb0 <HAL_RCC_OscConfig+0x2ac>)
2000ea96:	681b      	ldr	r3, [r3, #0]
2000ea98:	f003 0302 	and.w	r3, r3, #2
2000ea9c:	2b00      	cmp	r3, #0
2000ea9e:	d0f0      	beq.n	2000ea82 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
2000eaa0:	4b43      	ldr	r3, [pc, #268]	; (2000ebb0 <HAL_RCC_OscConfig+0x2ac>)
2000eaa2:	681b      	ldr	r3, [r3, #0]
2000eaa4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
2000eaa8:	687b      	ldr	r3, [r7, #4]
2000eaaa:	691b      	ldr	r3, [r3, #16]
2000eaac:	00db      	lsls	r3, r3, #3
2000eaae:	4940      	ldr	r1, [pc, #256]	; (2000ebb0 <HAL_RCC_OscConfig+0x2ac>)
2000eab0:	4313      	orrs	r3, r2
2000eab2:	600b      	str	r3, [r1, #0]
2000eab4:	e015      	b.n	2000eae2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
2000eab6:	4b3f      	ldr	r3, [pc, #252]	; (2000ebb4 <HAL_RCC_OscConfig+0x2b0>)
2000eab8:	2200      	movs	r2, #0
2000eaba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
2000eabc:	f7ff fa48 	bl	2000df50 <HAL_GetTick>
2000eac0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
2000eac2:	e008      	b.n	2000ead6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
2000eac4:	f7ff fa44 	bl	2000df50 <HAL_GetTick>
2000eac8:	4602      	mov	r2, r0
2000eaca:	693b      	ldr	r3, [r7, #16]
2000eacc:	1ad3      	subs	r3, r2, r3
2000eace:	2b02      	cmp	r3, #2
2000ead0:	d901      	bls.n	2000ead6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
2000ead2:	2303      	movs	r3, #3
2000ead4:	e17b      	b.n	2000edce <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
2000ead6:	4b36      	ldr	r3, [pc, #216]	; (2000ebb0 <HAL_RCC_OscConfig+0x2ac>)
2000ead8:	681b      	ldr	r3, [r3, #0]
2000eada:	f003 0302 	and.w	r3, r3, #2
2000eade:	2b00      	cmp	r3, #0
2000eae0:	d1f0      	bne.n	2000eac4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
2000eae2:	687b      	ldr	r3, [r7, #4]
2000eae4:	681b      	ldr	r3, [r3, #0]
2000eae6:	f003 0308 	and.w	r3, r3, #8
2000eaea:	2b00      	cmp	r3, #0
2000eaec:	d030      	beq.n	2000eb50 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
2000eaee:	687b      	ldr	r3, [r7, #4]
2000eaf0:	695b      	ldr	r3, [r3, #20]
2000eaf2:	2b00      	cmp	r3, #0
2000eaf4:	d016      	beq.n	2000eb24 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
2000eaf6:	4b30      	ldr	r3, [pc, #192]	; (2000ebb8 <HAL_RCC_OscConfig+0x2b4>)
2000eaf8:	2201      	movs	r2, #1
2000eafa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
2000eafc:	f7ff fa28 	bl	2000df50 <HAL_GetTick>
2000eb00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
2000eb02:	e008      	b.n	2000eb16 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
2000eb04:	f7ff fa24 	bl	2000df50 <HAL_GetTick>
2000eb08:	4602      	mov	r2, r0
2000eb0a:	693b      	ldr	r3, [r7, #16]
2000eb0c:	1ad3      	subs	r3, r2, r3
2000eb0e:	2b02      	cmp	r3, #2
2000eb10:	d901      	bls.n	2000eb16 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
2000eb12:	2303      	movs	r3, #3
2000eb14:	e15b      	b.n	2000edce <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
2000eb16:	4b26      	ldr	r3, [pc, #152]	; (2000ebb0 <HAL_RCC_OscConfig+0x2ac>)
2000eb18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
2000eb1a:	f003 0302 	and.w	r3, r3, #2
2000eb1e:	2b00      	cmp	r3, #0
2000eb20:	d0f0      	beq.n	2000eb04 <HAL_RCC_OscConfig+0x200>
2000eb22:	e015      	b.n	2000eb50 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
2000eb24:	4b24      	ldr	r3, [pc, #144]	; (2000ebb8 <HAL_RCC_OscConfig+0x2b4>)
2000eb26:	2200      	movs	r2, #0
2000eb28:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
2000eb2a:	f7ff fa11 	bl	2000df50 <HAL_GetTick>
2000eb2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
2000eb30:	e008      	b.n	2000eb44 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
2000eb32:	f7ff fa0d 	bl	2000df50 <HAL_GetTick>
2000eb36:	4602      	mov	r2, r0
2000eb38:	693b      	ldr	r3, [r7, #16]
2000eb3a:	1ad3      	subs	r3, r2, r3
2000eb3c:	2b02      	cmp	r3, #2
2000eb3e:	d901      	bls.n	2000eb44 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
2000eb40:	2303      	movs	r3, #3
2000eb42:	e144      	b.n	2000edce <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
2000eb44:	4b1a      	ldr	r3, [pc, #104]	; (2000ebb0 <HAL_RCC_OscConfig+0x2ac>)
2000eb46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
2000eb48:	f003 0302 	and.w	r3, r3, #2
2000eb4c:	2b00      	cmp	r3, #0
2000eb4e:	d1f0      	bne.n	2000eb32 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
2000eb50:	687b      	ldr	r3, [r7, #4]
2000eb52:	681b      	ldr	r3, [r3, #0]
2000eb54:	f003 0304 	and.w	r3, r3, #4
2000eb58:	2b00      	cmp	r3, #0
2000eb5a:	f000 80a0 	beq.w	2000ec9e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
2000eb5e:	2300      	movs	r3, #0
2000eb60:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
2000eb62:	4b13      	ldr	r3, [pc, #76]	; (2000ebb0 <HAL_RCC_OscConfig+0x2ac>)
2000eb64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2000eb66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
2000eb6a:	2b00      	cmp	r3, #0
2000eb6c:	d10f      	bne.n	2000eb8e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
2000eb6e:	2300      	movs	r3, #0
2000eb70:	60bb      	str	r3, [r7, #8]
2000eb72:	4b0f      	ldr	r3, [pc, #60]	; (2000ebb0 <HAL_RCC_OscConfig+0x2ac>)
2000eb74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2000eb76:	4a0e      	ldr	r2, [pc, #56]	; (2000ebb0 <HAL_RCC_OscConfig+0x2ac>)
2000eb78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
2000eb7c:	6413      	str	r3, [r2, #64]	; 0x40
2000eb7e:	4b0c      	ldr	r3, [pc, #48]	; (2000ebb0 <HAL_RCC_OscConfig+0x2ac>)
2000eb80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2000eb82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
2000eb86:	60bb      	str	r3, [r7, #8]
2000eb88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
2000eb8a:	2301      	movs	r3, #1
2000eb8c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
2000eb8e:	4b0b      	ldr	r3, [pc, #44]	; (2000ebbc <HAL_RCC_OscConfig+0x2b8>)
2000eb90:	681b      	ldr	r3, [r3, #0]
2000eb92:	f403 7380 	and.w	r3, r3, #256	; 0x100
2000eb96:	2b00      	cmp	r3, #0
2000eb98:	d121      	bne.n	2000ebde <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
2000eb9a:	4b08      	ldr	r3, [pc, #32]	; (2000ebbc <HAL_RCC_OscConfig+0x2b8>)
2000eb9c:	681b      	ldr	r3, [r3, #0]
2000eb9e:	4a07      	ldr	r2, [pc, #28]	; (2000ebbc <HAL_RCC_OscConfig+0x2b8>)
2000eba0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
2000eba4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
2000eba6:	f7ff f9d3 	bl	2000df50 <HAL_GetTick>
2000ebaa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
2000ebac:	e011      	b.n	2000ebd2 <HAL_RCC_OscConfig+0x2ce>
2000ebae:	bf00      	nop
2000ebb0:	40023800 	.word	0x40023800
2000ebb4:	42470000 	.word	0x42470000
2000ebb8:	42470e80 	.word	0x42470e80
2000ebbc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
2000ebc0:	f7ff f9c6 	bl	2000df50 <HAL_GetTick>
2000ebc4:	4602      	mov	r2, r0
2000ebc6:	693b      	ldr	r3, [r7, #16]
2000ebc8:	1ad3      	subs	r3, r2, r3
2000ebca:	2b02      	cmp	r3, #2
2000ebcc:	d901      	bls.n	2000ebd2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
2000ebce:	2303      	movs	r3, #3
2000ebd0:	e0fd      	b.n	2000edce <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
2000ebd2:	4b81      	ldr	r3, [pc, #516]	; (2000edd8 <HAL_RCC_OscConfig+0x4d4>)
2000ebd4:	681b      	ldr	r3, [r3, #0]
2000ebd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
2000ebda:	2b00      	cmp	r3, #0
2000ebdc:	d0f0      	beq.n	2000ebc0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
2000ebde:	687b      	ldr	r3, [r7, #4]
2000ebe0:	689b      	ldr	r3, [r3, #8]
2000ebe2:	2b01      	cmp	r3, #1
2000ebe4:	d106      	bne.n	2000ebf4 <HAL_RCC_OscConfig+0x2f0>
2000ebe6:	4b7d      	ldr	r3, [pc, #500]	; (2000eddc <HAL_RCC_OscConfig+0x4d8>)
2000ebe8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2000ebea:	4a7c      	ldr	r2, [pc, #496]	; (2000eddc <HAL_RCC_OscConfig+0x4d8>)
2000ebec:	f043 0301 	orr.w	r3, r3, #1
2000ebf0:	6713      	str	r3, [r2, #112]	; 0x70
2000ebf2:	e01c      	b.n	2000ec2e <HAL_RCC_OscConfig+0x32a>
2000ebf4:	687b      	ldr	r3, [r7, #4]
2000ebf6:	689b      	ldr	r3, [r3, #8]
2000ebf8:	2b05      	cmp	r3, #5
2000ebfa:	d10c      	bne.n	2000ec16 <HAL_RCC_OscConfig+0x312>
2000ebfc:	4b77      	ldr	r3, [pc, #476]	; (2000eddc <HAL_RCC_OscConfig+0x4d8>)
2000ebfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2000ec00:	4a76      	ldr	r2, [pc, #472]	; (2000eddc <HAL_RCC_OscConfig+0x4d8>)
2000ec02:	f043 0304 	orr.w	r3, r3, #4
2000ec06:	6713      	str	r3, [r2, #112]	; 0x70
2000ec08:	4b74      	ldr	r3, [pc, #464]	; (2000eddc <HAL_RCC_OscConfig+0x4d8>)
2000ec0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2000ec0c:	4a73      	ldr	r2, [pc, #460]	; (2000eddc <HAL_RCC_OscConfig+0x4d8>)
2000ec0e:	f043 0301 	orr.w	r3, r3, #1
2000ec12:	6713      	str	r3, [r2, #112]	; 0x70
2000ec14:	e00b      	b.n	2000ec2e <HAL_RCC_OscConfig+0x32a>
2000ec16:	4b71      	ldr	r3, [pc, #452]	; (2000eddc <HAL_RCC_OscConfig+0x4d8>)
2000ec18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2000ec1a:	4a70      	ldr	r2, [pc, #448]	; (2000eddc <HAL_RCC_OscConfig+0x4d8>)
2000ec1c:	f023 0301 	bic.w	r3, r3, #1
2000ec20:	6713      	str	r3, [r2, #112]	; 0x70
2000ec22:	4b6e      	ldr	r3, [pc, #440]	; (2000eddc <HAL_RCC_OscConfig+0x4d8>)
2000ec24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2000ec26:	4a6d      	ldr	r2, [pc, #436]	; (2000eddc <HAL_RCC_OscConfig+0x4d8>)
2000ec28:	f023 0304 	bic.w	r3, r3, #4
2000ec2c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
2000ec2e:	687b      	ldr	r3, [r7, #4]
2000ec30:	689b      	ldr	r3, [r3, #8]
2000ec32:	2b00      	cmp	r3, #0
2000ec34:	d015      	beq.n	2000ec62 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
2000ec36:	f7ff f98b 	bl	2000df50 <HAL_GetTick>
2000ec3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
2000ec3c:	e00a      	b.n	2000ec54 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
2000ec3e:	f7ff f987 	bl	2000df50 <HAL_GetTick>
2000ec42:	4602      	mov	r2, r0
2000ec44:	693b      	ldr	r3, [r7, #16]
2000ec46:	1ad3      	subs	r3, r2, r3
2000ec48:	f241 3288 	movw	r2, #5000	; 0x1388
2000ec4c:	4293      	cmp	r3, r2
2000ec4e:	d901      	bls.n	2000ec54 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
2000ec50:	2303      	movs	r3, #3
2000ec52:	e0bc      	b.n	2000edce <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
2000ec54:	4b61      	ldr	r3, [pc, #388]	; (2000eddc <HAL_RCC_OscConfig+0x4d8>)
2000ec56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2000ec58:	f003 0302 	and.w	r3, r3, #2
2000ec5c:	2b00      	cmp	r3, #0
2000ec5e:	d0ee      	beq.n	2000ec3e <HAL_RCC_OscConfig+0x33a>
2000ec60:	e014      	b.n	2000ec8c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
2000ec62:	f7ff f975 	bl	2000df50 <HAL_GetTick>
2000ec66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
2000ec68:	e00a      	b.n	2000ec80 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
2000ec6a:	f7ff f971 	bl	2000df50 <HAL_GetTick>
2000ec6e:	4602      	mov	r2, r0
2000ec70:	693b      	ldr	r3, [r7, #16]
2000ec72:	1ad3      	subs	r3, r2, r3
2000ec74:	f241 3288 	movw	r2, #5000	; 0x1388
2000ec78:	4293      	cmp	r3, r2
2000ec7a:	d901      	bls.n	2000ec80 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
2000ec7c:	2303      	movs	r3, #3
2000ec7e:	e0a6      	b.n	2000edce <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
2000ec80:	4b56      	ldr	r3, [pc, #344]	; (2000eddc <HAL_RCC_OscConfig+0x4d8>)
2000ec82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2000ec84:	f003 0302 	and.w	r3, r3, #2
2000ec88:	2b00      	cmp	r3, #0
2000ec8a:	d1ee      	bne.n	2000ec6a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
2000ec8c:	7dfb      	ldrb	r3, [r7, #23]
2000ec8e:	2b01      	cmp	r3, #1
2000ec90:	d105      	bne.n	2000ec9e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
2000ec92:	4b52      	ldr	r3, [pc, #328]	; (2000eddc <HAL_RCC_OscConfig+0x4d8>)
2000ec94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2000ec96:	4a51      	ldr	r2, [pc, #324]	; (2000eddc <HAL_RCC_OscConfig+0x4d8>)
2000ec98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
2000ec9c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
2000ec9e:	687b      	ldr	r3, [r7, #4]
2000eca0:	699b      	ldr	r3, [r3, #24]
2000eca2:	2b00      	cmp	r3, #0
2000eca4:	f000 8092 	beq.w	2000edcc <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
2000eca8:	4b4c      	ldr	r3, [pc, #304]	; (2000eddc <HAL_RCC_OscConfig+0x4d8>)
2000ecaa:	689b      	ldr	r3, [r3, #8]
2000ecac:	f003 030c 	and.w	r3, r3, #12
2000ecb0:	2b08      	cmp	r3, #8
2000ecb2:	d05c      	beq.n	2000ed6e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
2000ecb4:	687b      	ldr	r3, [r7, #4]
2000ecb6:	699b      	ldr	r3, [r3, #24]
2000ecb8:	2b02      	cmp	r3, #2
2000ecba:	d141      	bne.n	2000ed40 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
2000ecbc:	4b48      	ldr	r3, [pc, #288]	; (2000ede0 <HAL_RCC_OscConfig+0x4dc>)
2000ecbe:	2200      	movs	r2, #0
2000ecc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
2000ecc2:	f7ff f945 	bl	2000df50 <HAL_GetTick>
2000ecc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
2000ecc8:	e008      	b.n	2000ecdc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
2000ecca:	f7ff f941 	bl	2000df50 <HAL_GetTick>
2000ecce:	4602      	mov	r2, r0
2000ecd0:	693b      	ldr	r3, [r7, #16]
2000ecd2:	1ad3      	subs	r3, r2, r3
2000ecd4:	2b02      	cmp	r3, #2
2000ecd6:	d901      	bls.n	2000ecdc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
2000ecd8:	2303      	movs	r3, #3
2000ecda:	e078      	b.n	2000edce <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
2000ecdc:	4b3f      	ldr	r3, [pc, #252]	; (2000eddc <HAL_RCC_OscConfig+0x4d8>)
2000ecde:	681b      	ldr	r3, [r3, #0]
2000ece0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
2000ece4:	2b00      	cmp	r3, #0
2000ece6:	d1f0      	bne.n	2000ecca <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
2000ece8:	687b      	ldr	r3, [r7, #4]
2000ecea:	69da      	ldr	r2, [r3, #28]
2000ecec:	687b      	ldr	r3, [r7, #4]
2000ecee:	6a1b      	ldr	r3, [r3, #32]
2000ecf0:	431a      	orrs	r2, r3
2000ecf2:	687b      	ldr	r3, [r7, #4]
2000ecf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2000ecf6:	019b      	lsls	r3, r3, #6
2000ecf8:	431a      	orrs	r2, r3
2000ecfa:	687b      	ldr	r3, [r7, #4]
2000ecfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
2000ecfe:	085b      	lsrs	r3, r3, #1
2000ed00:	3b01      	subs	r3, #1
2000ed02:	041b      	lsls	r3, r3, #16
2000ed04:	431a      	orrs	r2, r3
2000ed06:	687b      	ldr	r3, [r7, #4]
2000ed08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2000ed0a:	061b      	lsls	r3, r3, #24
2000ed0c:	4933      	ldr	r1, [pc, #204]	; (2000eddc <HAL_RCC_OscConfig+0x4d8>)
2000ed0e:	4313      	orrs	r3, r2
2000ed10:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
2000ed12:	4b33      	ldr	r3, [pc, #204]	; (2000ede0 <HAL_RCC_OscConfig+0x4dc>)
2000ed14:	2201      	movs	r2, #1
2000ed16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
2000ed18:	f7ff f91a 	bl	2000df50 <HAL_GetTick>
2000ed1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
2000ed1e:	e008      	b.n	2000ed32 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
2000ed20:	f7ff f916 	bl	2000df50 <HAL_GetTick>
2000ed24:	4602      	mov	r2, r0
2000ed26:	693b      	ldr	r3, [r7, #16]
2000ed28:	1ad3      	subs	r3, r2, r3
2000ed2a:	2b02      	cmp	r3, #2
2000ed2c:	d901      	bls.n	2000ed32 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
2000ed2e:	2303      	movs	r3, #3
2000ed30:	e04d      	b.n	2000edce <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
2000ed32:	4b2a      	ldr	r3, [pc, #168]	; (2000eddc <HAL_RCC_OscConfig+0x4d8>)
2000ed34:	681b      	ldr	r3, [r3, #0]
2000ed36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
2000ed3a:	2b00      	cmp	r3, #0
2000ed3c:	d0f0      	beq.n	2000ed20 <HAL_RCC_OscConfig+0x41c>
2000ed3e:	e045      	b.n	2000edcc <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
2000ed40:	4b27      	ldr	r3, [pc, #156]	; (2000ede0 <HAL_RCC_OscConfig+0x4dc>)
2000ed42:	2200      	movs	r2, #0
2000ed44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
2000ed46:	f7ff f903 	bl	2000df50 <HAL_GetTick>
2000ed4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
2000ed4c:	e008      	b.n	2000ed60 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
2000ed4e:	f7ff f8ff 	bl	2000df50 <HAL_GetTick>
2000ed52:	4602      	mov	r2, r0
2000ed54:	693b      	ldr	r3, [r7, #16]
2000ed56:	1ad3      	subs	r3, r2, r3
2000ed58:	2b02      	cmp	r3, #2
2000ed5a:	d901      	bls.n	2000ed60 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
2000ed5c:	2303      	movs	r3, #3
2000ed5e:	e036      	b.n	2000edce <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
2000ed60:	4b1e      	ldr	r3, [pc, #120]	; (2000eddc <HAL_RCC_OscConfig+0x4d8>)
2000ed62:	681b      	ldr	r3, [r3, #0]
2000ed64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
2000ed68:	2b00      	cmp	r3, #0
2000ed6a:	d1f0      	bne.n	2000ed4e <HAL_RCC_OscConfig+0x44a>
2000ed6c:	e02e      	b.n	2000edcc <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
2000ed6e:	687b      	ldr	r3, [r7, #4]
2000ed70:	699b      	ldr	r3, [r3, #24]
2000ed72:	2b01      	cmp	r3, #1
2000ed74:	d101      	bne.n	2000ed7a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
2000ed76:	2301      	movs	r3, #1
2000ed78:	e029      	b.n	2000edce <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
2000ed7a:	4b18      	ldr	r3, [pc, #96]	; (2000eddc <HAL_RCC_OscConfig+0x4d8>)
2000ed7c:	685b      	ldr	r3, [r3, #4]
2000ed7e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
2000ed80:	68fb      	ldr	r3, [r7, #12]
2000ed82:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
2000ed86:	687b      	ldr	r3, [r7, #4]
2000ed88:	69db      	ldr	r3, [r3, #28]
2000ed8a:	429a      	cmp	r2, r3
2000ed8c:	d11c      	bne.n	2000edc8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
2000ed8e:	68fb      	ldr	r3, [r7, #12]
2000ed90:	f003 023f 	and.w	r2, r3, #63	; 0x3f
2000ed94:	687b      	ldr	r3, [r7, #4]
2000ed96:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
2000ed98:	429a      	cmp	r2, r3
2000ed9a:	d115      	bne.n	2000edc8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
2000ed9c:	68fa      	ldr	r2, [r7, #12]
2000ed9e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
2000eda2:	4013      	ands	r3, r2
2000eda4:	687a      	ldr	r2, [r7, #4]
2000eda6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
2000eda8:	4293      	cmp	r3, r2
2000edaa:	d10d      	bne.n	2000edc8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
2000edac:	68fb      	ldr	r3, [r7, #12]
2000edae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
2000edb2:	687b      	ldr	r3, [r7, #4]
2000edb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
2000edb6:	429a      	cmp	r2, r3
2000edb8:	d106      	bne.n	2000edc8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
2000edba:	68fb      	ldr	r3, [r7, #12]
2000edbc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
2000edc0:	687b      	ldr	r3, [r7, #4]
2000edc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
2000edc4:	429a      	cmp	r2, r3
2000edc6:	d001      	beq.n	2000edcc <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
2000edc8:	2301      	movs	r3, #1
2000edca:	e000      	b.n	2000edce <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
2000edcc:	2300      	movs	r3, #0
}
2000edce:	4618      	mov	r0, r3
2000edd0:	3718      	adds	r7, #24
2000edd2:	46bd      	mov	sp, r7
2000edd4:	bd80      	pop	{r7, pc}
2000edd6:	bf00      	nop
2000edd8:	40007000 	.word	0x40007000
2000eddc:	40023800 	.word	0x40023800
2000ede0:	42470060 	.word	0x42470060

2000ede4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
2000ede4:	b580      	push	{r7, lr}
2000ede6:	b084      	sub	sp, #16
2000ede8:	af00      	add	r7, sp, #0
2000edea:	6078      	str	r0, [r7, #4]
2000edec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
2000edee:	687b      	ldr	r3, [r7, #4]
2000edf0:	2b00      	cmp	r3, #0
2000edf2:	d101      	bne.n	2000edf8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
2000edf4:	2301      	movs	r3, #1
2000edf6:	e0cc      	b.n	2000ef92 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
2000edf8:	4b68      	ldr	r3, [pc, #416]	; (2000ef9c <HAL_RCC_ClockConfig+0x1b8>)
2000edfa:	681b      	ldr	r3, [r3, #0]
2000edfc:	f003 030f 	and.w	r3, r3, #15
2000ee00:	683a      	ldr	r2, [r7, #0]
2000ee02:	429a      	cmp	r2, r3
2000ee04:	d90c      	bls.n	2000ee20 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
2000ee06:	4b65      	ldr	r3, [pc, #404]	; (2000ef9c <HAL_RCC_ClockConfig+0x1b8>)
2000ee08:	683a      	ldr	r2, [r7, #0]
2000ee0a:	b2d2      	uxtb	r2, r2
2000ee0c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
2000ee0e:	4b63      	ldr	r3, [pc, #396]	; (2000ef9c <HAL_RCC_ClockConfig+0x1b8>)
2000ee10:	681b      	ldr	r3, [r3, #0]
2000ee12:	f003 030f 	and.w	r3, r3, #15
2000ee16:	683a      	ldr	r2, [r7, #0]
2000ee18:	429a      	cmp	r2, r3
2000ee1a:	d001      	beq.n	2000ee20 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
2000ee1c:	2301      	movs	r3, #1
2000ee1e:	e0b8      	b.n	2000ef92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
2000ee20:	687b      	ldr	r3, [r7, #4]
2000ee22:	681b      	ldr	r3, [r3, #0]
2000ee24:	f003 0302 	and.w	r3, r3, #2
2000ee28:	2b00      	cmp	r3, #0
2000ee2a:	d020      	beq.n	2000ee6e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
2000ee2c:	687b      	ldr	r3, [r7, #4]
2000ee2e:	681b      	ldr	r3, [r3, #0]
2000ee30:	f003 0304 	and.w	r3, r3, #4
2000ee34:	2b00      	cmp	r3, #0
2000ee36:	d005      	beq.n	2000ee44 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
2000ee38:	4b59      	ldr	r3, [pc, #356]	; (2000efa0 <HAL_RCC_ClockConfig+0x1bc>)
2000ee3a:	689b      	ldr	r3, [r3, #8]
2000ee3c:	4a58      	ldr	r2, [pc, #352]	; (2000efa0 <HAL_RCC_ClockConfig+0x1bc>)
2000ee3e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
2000ee42:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
2000ee44:	687b      	ldr	r3, [r7, #4]
2000ee46:	681b      	ldr	r3, [r3, #0]
2000ee48:	f003 0308 	and.w	r3, r3, #8
2000ee4c:	2b00      	cmp	r3, #0
2000ee4e:	d005      	beq.n	2000ee5c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
2000ee50:	4b53      	ldr	r3, [pc, #332]	; (2000efa0 <HAL_RCC_ClockConfig+0x1bc>)
2000ee52:	689b      	ldr	r3, [r3, #8]
2000ee54:	4a52      	ldr	r2, [pc, #328]	; (2000efa0 <HAL_RCC_ClockConfig+0x1bc>)
2000ee56:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
2000ee5a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
2000ee5c:	4b50      	ldr	r3, [pc, #320]	; (2000efa0 <HAL_RCC_ClockConfig+0x1bc>)
2000ee5e:	689b      	ldr	r3, [r3, #8]
2000ee60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
2000ee64:	687b      	ldr	r3, [r7, #4]
2000ee66:	689b      	ldr	r3, [r3, #8]
2000ee68:	494d      	ldr	r1, [pc, #308]	; (2000efa0 <HAL_RCC_ClockConfig+0x1bc>)
2000ee6a:	4313      	orrs	r3, r2
2000ee6c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
2000ee6e:	687b      	ldr	r3, [r7, #4]
2000ee70:	681b      	ldr	r3, [r3, #0]
2000ee72:	f003 0301 	and.w	r3, r3, #1
2000ee76:	2b00      	cmp	r3, #0
2000ee78:	d044      	beq.n	2000ef04 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
2000ee7a:	687b      	ldr	r3, [r7, #4]
2000ee7c:	685b      	ldr	r3, [r3, #4]
2000ee7e:	2b01      	cmp	r3, #1
2000ee80:	d107      	bne.n	2000ee92 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
2000ee82:	4b47      	ldr	r3, [pc, #284]	; (2000efa0 <HAL_RCC_ClockConfig+0x1bc>)
2000ee84:	681b      	ldr	r3, [r3, #0]
2000ee86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
2000ee8a:	2b00      	cmp	r3, #0
2000ee8c:	d119      	bne.n	2000eec2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
2000ee8e:	2301      	movs	r3, #1
2000ee90:	e07f      	b.n	2000ef92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
2000ee92:	687b      	ldr	r3, [r7, #4]
2000ee94:	685b      	ldr	r3, [r3, #4]
2000ee96:	2b02      	cmp	r3, #2
2000ee98:	d003      	beq.n	2000eea2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
2000ee9a:	687b      	ldr	r3, [r7, #4]
2000ee9c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
2000ee9e:	2b03      	cmp	r3, #3
2000eea0:	d107      	bne.n	2000eeb2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
2000eea2:	4b3f      	ldr	r3, [pc, #252]	; (2000efa0 <HAL_RCC_ClockConfig+0x1bc>)
2000eea4:	681b      	ldr	r3, [r3, #0]
2000eea6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
2000eeaa:	2b00      	cmp	r3, #0
2000eeac:	d109      	bne.n	2000eec2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
2000eeae:	2301      	movs	r3, #1
2000eeb0:	e06f      	b.n	2000ef92 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
2000eeb2:	4b3b      	ldr	r3, [pc, #236]	; (2000efa0 <HAL_RCC_ClockConfig+0x1bc>)
2000eeb4:	681b      	ldr	r3, [r3, #0]
2000eeb6:	f003 0302 	and.w	r3, r3, #2
2000eeba:	2b00      	cmp	r3, #0
2000eebc:	d101      	bne.n	2000eec2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
2000eebe:	2301      	movs	r3, #1
2000eec0:	e067      	b.n	2000ef92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
2000eec2:	4b37      	ldr	r3, [pc, #220]	; (2000efa0 <HAL_RCC_ClockConfig+0x1bc>)
2000eec4:	689b      	ldr	r3, [r3, #8]
2000eec6:	f023 0203 	bic.w	r2, r3, #3
2000eeca:	687b      	ldr	r3, [r7, #4]
2000eecc:	685b      	ldr	r3, [r3, #4]
2000eece:	4934      	ldr	r1, [pc, #208]	; (2000efa0 <HAL_RCC_ClockConfig+0x1bc>)
2000eed0:	4313      	orrs	r3, r2
2000eed2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
2000eed4:	f7ff f83c 	bl	2000df50 <HAL_GetTick>
2000eed8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
2000eeda:	e00a      	b.n	2000eef2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
2000eedc:	f7ff f838 	bl	2000df50 <HAL_GetTick>
2000eee0:	4602      	mov	r2, r0
2000eee2:	68fb      	ldr	r3, [r7, #12]
2000eee4:	1ad3      	subs	r3, r2, r3
2000eee6:	f241 3288 	movw	r2, #5000	; 0x1388
2000eeea:	4293      	cmp	r3, r2
2000eeec:	d901      	bls.n	2000eef2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
2000eeee:	2303      	movs	r3, #3
2000eef0:	e04f      	b.n	2000ef92 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
2000eef2:	4b2b      	ldr	r3, [pc, #172]	; (2000efa0 <HAL_RCC_ClockConfig+0x1bc>)
2000eef4:	689b      	ldr	r3, [r3, #8]
2000eef6:	f003 020c 	and.w	r2, r3, #12
2000eefa:	687b      	ldr	r3, [r7, #4]
2000eefc:	685b      	ldr	r3, [r3, #4]
2000eefe:	009b      	lsls	r3, r3, #2
2000ef00:	429a      	cmp	r2, r3
2000ef02:	d1eb      	bne.n	2000eedc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
2000ef04:	4b25      	ldr	r3, [pc, #148]	; (2000ef9c <HAL_RCC_ClockConfig+0x1b8>)
2000ef06:	681b      	ldr	r3, [r3, #0]
2000ef08:	f003 030f 	and.w	r3, r3, #15
2000ef0c:	683a      	ldr	r2, [r7, #0]
2000ef0e:	429a      	cmp	r2, r3
2000ef10:	d20c      	bcs.n	2000ef2c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
2000ef12:	4b22      	ldr	r3, [pc, #136]	; (2000ef9c <HAL_RCC_ClockConfig+0x1b8>)
2000ef14:	683a      	ldr	r2, [r7, #0]
2000ef16:	b2d2      	uxtb	r2, r2
2000ef18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
2000ef1a:	4b20      	ldr	r3, [pc, #128]	; (2000ef9c <HAL_RCC_ClockConfig+0x1b8>)
2000ef1c:	681b      	ldr	r3, [r3, #0]
2000ef1e:	f003 030f 	and.w	r3, r3, #15
2000ef22:	683a      	ldr	r2, [r7, #0]
2000ef24:	429a      	cmp	r2, r3
2000ef26:	d001      	beq.n	2000ef2c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
2000ef28:	2301      	movs	r3, #1
2000ef2a:	e032      	b.n	2000ef92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
2000ef2c:	687b      	ldr	r3, [r7, #4]
2000ef2e:	681b      	ldr	r3, [r3, #0]
2000ef30:	f003 0304 	and.w	r3, r3, #4
2000ef34:	2b00      	cmp	r3, #0
2000ef36:	d008      	beq.n	2000ef4a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
2000ef38:	4b19      	ldr	r3, [pc, #100]	; (2000efa0 <HAL_RCC_ClockConfig+0x1bc>)
2000ef3a:	689b      	ldr	r3, [r3, #8]
2000ef3c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
2000ef40:	687b      	ldr	r3, [r7, #4]
2000ef42:	68db      	ldr	r3, [r3, #12]
2000ef44:	4916      	ldr	r1, [pc, #88]	; (2000efa0 <HAL_RCC_ClockConfig+0x1bc>)
2000ef46:	4313      	orrs	r3, r2
2000ef48:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
2000ef4a:	687b      	ldr	r3, [r7, #4]
2000ef4c:	681b      	ldr	r3, [r3, #0]
2000ef4e:	f003 0308 	and.w	r3, r3, #8
2000ef52:	2b00      	cmp	r3, #0
2000ef54:	d009      	beq.n	2000ef6a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
2000ef56:	4b12      	ldr	r3, [pc, #72]	; (2000efa0 <HAL_RCC_ClockConfig+0x1bc>)
2000ef58:	689b      	ldr	r3, [r3, #8]
2000ef5a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
2000ef5e:	687b      	ldr	r3, [r7, #4]
2000ef60:	691b      	ldr	r3, [r3, #16]
2000ef62:	00db      	lsls	r3, r3, #3
2000ef64:	490e      	ldr	r1, [pc, #56]	; (2000efa0 <HAL_RCC_ClockConfig+0x1bc>)
2000ef66:	4313      	orrs	r3, r2
2000ef68:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
2000ef6a:	f000 f821 	bl	2000efb0 <HAL_RCC_GetSysClockFreq>
2000ef6e:	4601      	mov	r1, r0
2000ef70:	4b0b      	ldr	r3, [pc, #44]	; (2000efa0 <HAL_RCC_ClockConfig+0x1bc>)
2000ef72:	689b      	ldr	r3, [r3, #8]
2000ef74:	091b      	lsrs	r3, r3, #4
2000ef76:	f003 030f 	and.w	r3, r3, #15
2000ef7a:	4a0a      	ldr	r2, [pc, #40]	; (2000efa4 <HAL_RCC_ClockConfig+0x1c0>)
2000ef7c:	5cd3      	ldrb	r3, [r2, r3]
2000ef7e:	fa21 f303 	lsr.w	r3, r1, r3
2000ef82:	4a09      	ldr	r2, [pc, #36]	; (2000efa8 <HAL_RCC_ClockConfig+0x1c4>)
2000ef84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
2000ef86:	4b09      	ldr	r3, [pc, #36]	; (2000efac <HAL_RCC_ClockConfig+0x1c8>)
2000ef88:	681b      	ldr	r3, [r3, #0]
2000ef8a:	4618      	mov	r0, r3
2000ef8c:	f7fe ff9c 	bl	2000dec8 <HAL_InitTick>

  return HAL_OK;
2000ef90:	2300      	movs	r3, #0
}
2000ef92:	4618      	mov	r0, r3
2000ef94:	3710      	adds	r7, #16
2000ef96:	46bd      	mov	sp, r7
2000ef98:	bd80      	pop	{r7, pc}
2000ef9a:	bf00      	nop
2000ef9c:	40023c00 	.word	0x40023c00
2000efa0:	40023800 	.word	0x40023800
2000efa4:	2000fe40 	.word	0x2000fe40
2000efa8:	2000fe94 	.word	0x2000fe94
2000efac:	2000fea8 	.word	0x2000fea8

2000efb0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
2000efb0:	b5f0      	push	{r4, r5, r6, r7, lr}
2000efb2:	b085      	sub	sp, #20
2000efb4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
2000efb6:	2300      	movs	r3, #0
2000efb8:	607b      	str	r3, [r7, #4]
2000efba:	2300      	movs	r3, #0
2000efbc:	60fb      	str	r3, [r7, #12]
2000efbe:	2300      	movs	r3, #0
2000efc0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
2000efc2:	2300      	movs	r3, #0
2000efc4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
2000efc6:	4b50      	ldr	r3, [pc, #320]	; (2000f108 <HAL_RCC_GetSysClockFreq+0x158>)
2000efc8:	689b      	ldr	r3, [r3, #8]
2000efca:	f003 030c 	and.w	r3, r3, #12
2000efce:	2b04      	cmp	r3, #4
2000efd0:	d007      	beq.n	2000efe2 <HAL_RCC_GetSysClockFreq+0x32>
2000efd2:	2b08      	cmp	r3, #8
2000efd4:	d008      	beq.n	2000efe8 <HAL_RCC_GetSysClockFreq+0x38>
2000efd6:	2b00      	cmp	r3, #0
2000efd8:	f040 808d 	bne.w	2000f0f6 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
2000efdc:	4b4b      	ldr	r3, [pc, #300]	; (2000f10c <HAL_RCC_GetSysClockFreq+0x15c>)
2000efde:	60bb      	str	r3, [r7, #8]
       break;
2000efe0:	e08c      	b.n	2000f0fc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
2000efe2:	4b4b      	ldr	r3, [pc, #300]	; (2000f110 <HAL_RCC_GetSysClockFreq+0x160>)
2000efe4:	60bb      	str	r3, [r7, #8]
      break;
2000efe6:	e089      	b.n	2000f0fc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
2000efe8:	4b47      	ldr	r3, [pc, #284]	; (2000f108 <HAL_RCC_GetSysClockFreq+0x158>)
2000efea:	685b      	ldr	r3, [r3, #4]
2000efec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
2000eff0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
2000eff2:	4b45      	ldr	r3, [pc, #276]	; (2000f108 <HAL_RCC_GetSysClockFreq+0x158>)
2000eff4:	685b      	ldr	r3, [r3, #4]
2000eff6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
2000effa:	2b00      	cmp	r3, #0
2000effc:	d023      	beq.n	2000f046 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
2000effe:	4b42      	ldr	r3, [pc, #264]	; (2000f108 <HAL_RCC_GetSysClockFreq+0x158>)
2000f000:	685b      	ldr	r3, [r3, #4]
2000f002:	099b      	lsrs	r3, r3, #6
2000f004:	f04f 0400 	mov.w	r4, #0
2000f008:	f240 11ff 	movw	r1, #511	; 0x1ff
2000f00c:	f04f 0200 	mov.w	r2, #0
2000f010:	ea03 0501 	and.w	r5, r3, r1
2000f014:	ea04 0602 	and.w	r6, r4, r2
2000f018:	4a3d      	ldr	r2, [pc, #244]	; (2000f110 <HAL_RCC_GetSysClockFreq+0x160>)
2000f01a:	fb02 f106 	mul.w	r1, r2, r6
2000f01e:	2200      	movs	r2, #0
2000f020:	fb02 f205 	mul.w	r2, r2, r5
2000f024:	440a      	add	r2, r1
2000f026:	493a      	ldr	r1, [pc, #232]	; (2000f110 <HAL_RCC_GetSysClockFreq+0x160>)
2000f028:	fba5 0101 	umull	r0, r1, r5, r1
2000f02c:	1853      	adds	r3, r2, r1
2000f02e:	4619      	mov	r1, r3
2000f030:	687b      	ldr	r3, [r7, #4]
2000f032:	f04f 0400 	mov.w	r4, #0
2000f036:	461a      	mov	r2, r3
2000f038:	4623      	mov	r3, r4
2000f03a:	f7fe f921 	bl	2000d280 <__aeabi_uldivmod>
2000f03e:	4603      	mov	r3, r0
2000f040:	460c      	mov	r4, r1
2000f042:	60fb      	str	r3, [r7, #12]
2000f044:	e049      	b.n	2000f0da <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
2000f046:	4b30      	ldr	r3, [pc, #192]	; (2000f108 <HAL_RCC_GetSysClockFreq+0x158>)
2000f048:	685b      	ldr	r3, [r3, #4]
2000f04a:	099b      	lsrs	r3, r3, #6
2000f04c:	f04f 0400 	mov.w	r4, #0
2000f050:	f240 11ff 	movw	r1, #511	; 0x1ff
2000f054:	f04f 0200 	mov.w	r2, #0
2000f058:	ea03 0501 	and.w	r5, r3, r1
2000f05c:	ea04 0602 	and.w	r6, r4, r2
2000f060:	4629      	mov	r1, r5
2000f062:	4632      	mov	r2, r6
2000f064:	f04f 0300 	mov.w	r3, #0
2000f068:	f04f 0400 	mov.w	r4, #0
2000f06c:	0154      	lsls	r4, r2, #5
2000f06e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
2000f072:	014b      	lsls	r3, r1, #5
2000f074:	4619      	mov	r1, r3
2000f076:	4622      	mov	r2, r4
2000f078:	1b49      	subs	r1, r1, r5
2000f07a:	eb62 0206 	sbc.w	r2, r2, r6
2000f07e:	f04f 0300 	mov.w	r3, #0
2000f082:	f04f 0400 	mov.w	r4, #0
2000f086:	0194      	lsls	r4, r2, #6
2000f088:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
2000f08c:	018b      	lsls	r3, r1, #6
2000f08e:	1a5b      	subs	r3, r3, r1
2000f090:	eb64 0402 	sbc.w	r4, r4, r2
2000f094:	f04f 0100 	mov.w	r1, #0
2000f098:	f04f 0200 	mov.w	r2, #0
2000f09c:	00e2      	lsls	r2, r4, #3
2000f09e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
2000f0a2:	00d9      	lsls	r1, r3, #3
2000f0a4:	460b      	mov	r3, r1
2000f0a6:	4614      	mov	r4, r2
2000f0a8:	195b      	adds	r3, r3, r5
2000f0aa:	eb44 0406 	adc.w	r4, r4, r6
2000f0ae:	f04f 0100 	mov.w	r1, #0
2000f0b2:	f04f 0200 	mov.w	r2, #0
2000f0b6:	02a2      	lsls	r2, r4, #10
2000f0b8:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
2000f0bc:	0299      	lsls	r1, r3, #10
2000f0be:	460b      	mov	r3, r1
2000f0c0:	4614      	mov	r4, r2
2000f0c2:	4618      	mov	r0, r3
2000f0c4:	4621      	mov	r1, r4
2000f0c6:	687b      	ldr	r3, [r7, #4]
2000f0c8:	f04f 0400 	mov.w	r4, #0
2000f0cc:	461a      	mov	r2, r3
2000f0ce:	4623      	mov	r3, r4
2000f0d0:	f7fe f8d6 	bl	2000d280 <__aeabi_uldivmod>
2000f0d4:	4603      	mov	r3, r0
2000f0d6:	460c      	mov	r4, r1
2000f0d8:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
2000f0da:	4b0b      	ldr	r3, [pc, #44]	; (2000f108 <HAL_RCC_GetSysClockFreq+0x158>)
2000f0dc:	685b      	ldr	r3, [r3, #4]
2000f0de:	0c1b      	lsrs	r3, r3, #16
2000f0e0:	f003 0303 	and.w	r3, r3, #3
2000f0e4:	3301      	adds	r3, #1
2000f0e6:	005b      	lsls	r3, r3, #1
2000f0e8:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
2000f0ea:	68fa      	ldr	r2, [r7, #12]
2000f0ec:	683b      	ldr	r3, [r7, #0]
2000f0ee:	fbb2 f3f3 	udiv	r3, r2, r3
2000f0f2:	60bb      	str	r3, [r7, #8]
      break;
2000f0f4:	e002      	b.n	2000f0fc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
2000f0f6:	4b05      	ldr	r3, [pc, #20]	; (2000f10c <HAL_RCC_GetSysClockFreq+0x15c>)
2000f0f8:	60bb      	str	r3, [r7, #8]
      break;
2000f0fa:	bf00      	nop
    }
  }
  return sysclockfreq;
2000f0fc:	68bb      	ldr	r3, [r7, #8]
}
2000f0fe:	4618      	mov	r0, r3
2000f100:	3714      	adds	r7, #20
2000f102:	46bd      	mov	sp, r7
2000f104:	bdf0      	pop	{r4, r5, r6, r7, pc}
2000f106:	bf00      	nop
2000f108:	40023800 	.word	0x40023800
2000f10c:	00f42400 	.word	0x00f42400
2000f110:	017d7840 	.word	0x017d7840

2000f114 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
2000f114:	b480      	push	{r7}
2000f116:	af00      	add	r7, sp, #0
  return SystemCoreClock;
2000f118:	4b03      	ldr	r3, [pc, #12]	; (2000f128 <HAL_RCC_GetHCLKFreq+0x14>)
2000f11a:	681b      	ldr	r3, [r3, #0]
}
2000f11c:	4618      	mov	r0, r3
2000f11e:	46bd      	mov	sp, r7
2000f120:	f85d 7b04 	ldr.w	r7, [sp], #4
2000f124:	4770      	bx	lr
2000f126:	bf00      	nop
2000f128:	2000fe94 	.word	0x2000fe94

2000f12c <calloc>:
2000f12c:	4b02      	ldr	r3, [pc, #8]	; (2000f138 <calloc+0xc>)
2000f12e:	460a      	mov	r2, r1
2000f130:	4601      	mov	r1, r0
2000f132:	6818      	ldr	r0, [r3, #0]
2000f134:	f000 b83c 	b.w	2000f1b0 <_calloc_r>
2000f138:	2000feb0 	.word	0x2000feb0

2000f13c <__errno>:
2000f13c:	4b01      	ldr	r3, [pc, #4]	; (2000f144 <__errno+0x8>)
2000f13e:	6818      	ldr	r0, [r3, #0]
2000f140:	4770      	bx	lr
2000f142:	bf00      	nop
2000f144:	2000feb0 	.word	0x2000feb0

2000f148 <__libc_init_array>:
2000f148:	b570      	push	{r4, r5, r6, lr}
2000f14a:	4e0d      	ldr	r6, [pc, #52]	; (2000f180 <__libc_init_array+0x38>)
2000f14c:	4c0d      	ldr	r4, [pc, #52]	; (2000f184 <__libc_init_array+0x3c>)
2000f14e:	1ba4      	subs	r4, r4, r6
2000f150:	10a4      	asrs	r4, r4, #2
2000f152:	2500      	movs	r5, #0
2000f154:	42a5      	cmp	r5, r4
2000f156:	d109      	bne.n	2000f16c <__libc_init_array+0x24>
2000f158:	4e0b      	ldr	r6, [pc, #44]	; (2000f188 <__libc_init_array+0x40>)
2000f15a:	4c0c      	ldr	r4, [pc, #48]	; (2000f18c <__libc_init_array+0x44>)
2000f15c:	f000 fc3c 	bl	2000f9d8 <_init>
2000f160:	1ba4      	subs	r4, r4, r6
2000f162:	10a4      	asrs	r4, r4, #2
2000f164:	2500      	movs	r5, #0
2000f166:	42a5      	cmp	r5, r4
2000f168:	d105      	bne.n	2000f176 <__libc_init_array+0x2e>
2000f16a:	bd70      	pop	{r4, r5, r6, pc}
2000f16c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
2000f170:	4798      	blx	r3
2000f172:	3501      	adds	r5, #1
2000f174:	e7ee      	b.n	2000f154 <__libc_init_array+0xc>
2000f176:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
2000f17a:	4798      	blx	r3
2000f17c:	3501      	adds	r5, #1
2000f17e:	e7f2      	b.n	2000f166 <__libc_init_array+0x1e>
2000f180:	2000fe8c 	.word	0x2000fe8c
2000f184:	2000fe8c 	.word	0x2000fe8c
2000f188:	2000fe8c 	.word	0x2000fe8c
2000f18c:	2000fe90 	.word	0x2000fe90

2000f190 <free>:
2000f190:	4b02      	ldr	r3, [pc, #8]	; (2000f19c <free+0xc>)
2000f192:	4601      	mov	r1, r0
2000f194:	6818      	ldr	r0, [r3, #0]
2000f196:	f000 b819 	b.w	2000f1cc <_free_r>
2000f19a:	bf00      	nop
2000f19c:	2000feb0 	.word	0x2000feb0

2000f1a0 <memset>:
2000f1a0:	4402      	add	r2, r0
2000f1a2:	4603      	mov	r3, r0
2000f1a4:	4293      	cmp	r3, r2
2000f1a6:	d100      	bne.n	2000f1aa <memset+0xa>
2000f1a8:	4770      	bx	lr
2000f1aa:	f803 1b01 	strb.w	r1, [r3], #1
2000f1ae:	e7f9      	b.n	2000f1a4 <memset+0x4>

2000f1b0 <_calloc_r>:
2000f1b0:	b538      	push	{r3, r4, r5, lr}
2000f1b2:	fb02 f401 	mul.w	r4, r2, r1
2000f1b6:	4621      	mov	r1, r4
2000f1b8:	f000 f856 	bl	2000f268 <_malloc_r>
2000f1bc:	4605      	mov	r5, r0
2000f1be:	b118      	cbz	r0, 2000f1c8 <_calloc_r+0x18>
2000f1c0:	4622      	mov	r2, r4
2000f1c2:	2100      	movs	r1, #0
2000f1c4:	f7ff ffec 	bl	2000f1a0 <memset>
2000f1c8:	4628      	mov	r0, r5
2000f1ca:	bd38      	pop	{r3, r4, r5, pc}

2000f1cc <_free_r>:
2000f1cc:	b538      	push	{r3, r4, r5, lr}
2000f1ce:	4605      	mov	r5, r0
2000f1d0:	2900      	cmp	r1, #0
2000f1d2:	d045      	beq.n	2000f260 <_free_r+0x94>
2000f1d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
2000f1d8:	1f0c      	subs	r4, r1, #4
2000f1da:	2b00      	cmp	r3, #0
2000f1dc:	bfb8      	it	lt
2000f1de:	18e4      	addlt	r4, r4, r3
2000f1e0:	f000 f8cc 	bl	2000f37c <__malloc_lock>
2000f1e4:	4a1f      	ldr	r2, [pc, #124]	; (2000f264 <_free_r+0x98>)
2000f1e6:	6813      	ldr	r3, [r2, #0]
2000f1e8:	4610      	mov	r0, r2
2000f1ea:	b933      	cbnz	r3, 2000f1fa <_free_r+0x2e>
2000f1ec:	6063      	str	r3, [r4, #4]
2000f1ee:	6014      	str	r4, [r2, #0]
2000f1f0:	4628      	mov	r0, r5
2000f1f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
2000f1f6:	f000 b8c2 	b.w	2000f37e <__malloc_unlock>
2000f1fa:	42a3      	cmp	r3, r4
2000f1fc:	d90c      	bls.n	2000f218 <_free_r+0x4c>
2000f1fe:	6821      	ldr	r1, [r4, #0]
2000f200:	1862      	adds	r2, r4, r1
2000f202:	4293      	cmp	r3, r2
2000f204:	bf04      	itt	eq
2000f206:	681a      	ldreq	r2, [r3, #0]
2000f208:	685b      	ldreq	r3, [r3, #4]
2000f20a:	6063      	str	r3, [r4, #4]
2000f20c:	bf04      	itt	eq
2000f20e:	1852      	addeq	r2, r2, r1
2000f210:	6022      	streq	r2, [r4, #0]
2000f212:	6004      	str	r4, [r0, #0]
2000f214:	e7ec      	b.n	2000f1f0 <_free_r+0x24>
2000f216:	4613      	mov	r3, r2
2000f218:	685a      	ldr	r2, [r3, #4]
2000f21a:	b10a      	cbz	r2, 2000f220 <_free_r+0x54>
2000f21c:	42a2      	cmp	r2, r4
2000f21e:	d9fa      	bls.n	2000f216 <_free_r+0x4a>
2000f220:	6819      	ldr	r1, [r3, #0]
2000f222:	1858      	adds	r0, r3, r1
2000f224:	42a0      	cmp	r0, r4
2000f226:	d10b      	bne.n	2000f240 <_free_r+0x74>
2000f228:	6820      	ldr	r0, [r4, #0]
2000f22a:	4401      	add	r1, r0
2000f22c:	1858      	adds	r0, r3, r1
2000f22e:	4282      	cmp	r2, r0
2000f230:	6019      	str	r1, [r3, #0]
2000f232:	d1dd      	bne.n	2000f1f0 <_free_r+0x24>
2000f234:	6810      	ldr	r0, [r2, #0]
2000f236:	6852      	ldr	r2, [r2, #4]
2000f238:	605a      	str	r2, [r3, #4]
2000f23a:	4401      	add	r1, r0
2000f23c:	6019      	str	r1, [r3, #0]
2000f23e:	e7d7      	b.n	2000f1f0 <_free_r+0x24>
2000f240:	d902      	bls.n	2000f248 <_free_r+0x7c>
2000f242:	230c      	movs	r3, #12
2000f244:	602b      	str	r3, [r5, #0]
2000f246:	e7d3      	b.n	2000f1f0 <_free_r+0x24>
2000f248:	6820      	ldr	r0, [r4, #0]
2000f24a:	1821      	adds	r1, r4, r0
2000f24c:	428a      	cmp	r2, r1
2000f24e:	bf04      	itt	eq
2000f250:	6811      	ldreq	r1, [r2, #0]
2000f252:	6852      	ldreq	r2, [r2, #4]
2000f254:	6062      	str	r2, [r4, #4]
2000f256:	bf04      	itt	eq
2000f258:	1809      	addeq	r1, r1, r0
2000f25a:	6021      	streq	r1, [r4, #0]
2000f25c:	605c      	str	r4, [r3, #4]
2000f25e:	e7c7      	b.n	2000f1f0 <_free_r+0x24>
2000f260:	bd38      	pop	{r3, r4, r5, pc}
2000f262:	bf00      	nop
2000f264:	2000ff40 	.word	0x2000ff40

2000f268 <_malloc_r>:
2000f268:	b570      	push	{r4, r5, r6, lr}
2000f26a:	1ccd      	adds	r5, r1, #3
2000f26c:	f025 0503 	bic.w	r5, r5, #3
2000f270:	3508      	adds	r5, #8
2000f272:	2d0c      	cmp	r5, #12
2000f274:	bf38      	it	cc
2000f276:	250c      	movcc	r5, #12
2000f278:	2d00      	cmp	r5, #0
2000f27a:	4606      	mov	r6, r0
2000f27c:	db01      	blt.n	2000f282 <_malloc_r+0x1a>
2000f27e:	42a9      	cmp	r1, r5
2000f280:	d903      	bls.n	2000f28a <_malloc_r+0x22>
2000f282:	230c      	movs	r3, #12
2000f284:	6033      	str	r3, [r6, #0]
2000f286:	2000      	movs	r0, #0
2000f288:	bd70      	pop	{r4, r5, r6, pc}
2000f28a:	f000 f877 	bl	2000f37c <__malloc_lock>
2000f28e:	4a21      	ldr	r2, [pc, #132]	; (2000f314 <_malloc_r+0xac>)
2000f290:	6814      	ldr	r4, [r2, #0]
2000f292:	4621      	mov	r1, r4
2000f294:	b991      	cbnz	r1, 2000f2bc <_malloc_r+0x54>
2000f296:	4c20      	ldr	r4, [pc, #128]	; (2000f318 <_malloc_r+0xb0>)
2000f298:	6823      	ldr	r3, [r4, #0]
2000f29a:	b91b      	cbnz	r3, 2000f2a4 <_malloc_r+0x3c>
2000f29c:	4630      	mov	r0, r6
2000f29e:	f000 f83d 	bl	2000f31c <_sbrk_r>
2000f2a2:	6020      	str	r0, [r4, #0]
2000f2a4:	4629      	mov	r1, r5
2000f2a6:	4630      	mov	r0, r6
2000f2a8:	f000 f838 	bl	2000f31c <_sbrk_r>
2000f2ac:	1c43      	adds	r3, r0, #1
2000f2ae:	d124      	bne.n	2000f2fa <_malloc_r+0x92>
2000f2b0:	230c      	movs	r3, #12
2000f2b2:	6033      	str	r3, [r6, #0]
2000f2b4:	4630      	mov	r0, r6
2000f2b6:	f000 f862 	bl	2000f37e <__malloc_unlock>
2000f2ba:	e7e4      	b.n	2000f286 <_malloc_r+0x1e>
2000f2bc:	680b      	ldr	r3, [r1, #0]
2000f2be:	1b5b      	subs	r3, r3, r5
2000f2c0:	d418      	bmi.n	2000f2f4 <_malloc_r+0x8c>
2000f2c2:	2b0b      	cmp	r3, #11
2000f2c4:	d90f      	bls.n	2000f2e6 <_malloc_r+0x7e>
2000f2c6:	600b      	str	r3, [r1, #0]
2000f2c8:	50cd      	str	r5, [r1, r3]
2000f2ca:	18cc      	adds	r4, r1, r3
2000f2cc:	4630      	mov	r0, r6
2000f2ce:	f000 f856 	bl	2000f37e <__malloc_unlock>
2000f2d2:	f104 000b 	add.w	r0, r4, #11
2000f2d6:	1d23      	adds	r3, r4, #4
2000f2d8:	f020 0007 	bic.w	r0, r0, #7
2000f2dc:	1ac3      	subs	r3, r0, r3
2000f2de:	d0d3      	beq.n	2000f288 <_malloc_r+0x20>
2000f2e0:	425a      	negs	r2, r3
2000f2e2:	50e2      	str	r2, [r4, r3]
2000f2e4:	e7d0      	b.n	2000f288 <_malloc_r+0x20>
2000f2e6:	428c      	cmp	r4, r1
2000f2e8:	684b      	ldr	r3, [r1, #4]
2000f2ea:	bf16      	itet	ne
2000f2ec:	6063      	strne	r3, [r4, #4]
2000f2ee:	6013      	streq	r3, [r2, #0]
2000f2f0:	460c      	movne	r4, r1
2000f2f2:	e7eb      	b.n	2000f2cc <_malloc_r+0x64>
2000f2f4:	460c      	mov	r4, r1
2000f2f6:	6849      	ldr	r1, [r1, #4]
2000f2f8:	e7cc      	b.n	2000f294 <_malloc_r+0x2c>
2000f2fa:	1cc4      	adds	r4, r0, #3
2000f2fc:	f024 0403 	bic.w	r4, r4, #3
2000f300:	42a0      	cmp	r0, r4
2000f302:	d005      	beq.n	2000f310 <_malloc_r+0xa8>
2000f304:	1a21      	subs	r1, r4, r0
2000f306:	4630      	mov	r0, r6
2000f308:	f000 f808 	bl	2000f31c <_sbrk_r>
2000f30c:	3001      	adds	r0, #1
2000f30e:	d0cf      	beq.n	2000f2b0 <_malloc_r+0x48>
2000f310:	6025      	str	r5, [r4, #0]
2000f312:	e7db      	b.n	2000f2cc <_malloc_r+0x64>
2000f314:	2000ff40 	.word	0x2000ff40
2000f318:	2000ff44 	.word	0x2000ff44

2000f31c <_sbrk_r>:
2000f31c:	b538      	push	{r3, r4, r5, lr}
2000f31e:	4c06      	ldr	r4, [pc, #24]	; (2000f338 <_sbrk_r+0x1c>)
2000f320:	2300      	movs	r3, #0
2000f322:	4605      	mov	r5, r0
2000f324:	4608      	mov	r0, r1
2000f326:	6023      	str	r3, [r4, #0]
2000f328:	f7fe fc26 	bl	2000db78 <_sbrk>
2000f32c:	1c43      	adds	r3, r0, #1
2000f32e:	d102      	bne.n	2000f336 <_sbrk_r+0x1a>
2000f330:	6823      	ldr	r3, [r4, #0]
2000f332:	b103      	cbz	r3, 2000f336 <_sbrk_r+0x1a>
2000f334:	602b      	str	r3, [r5, #0]
2000f336:	bd38      	pop	{r3, r4, r5, pc}
2000f338:	20010078 	.word	0x20010078

2000f33c <_vsiprintf_r>:
2000f33c:	b500      	push	{lr}
2000f33e:	b09b      	sub	sp, #108	; 0x6c
2000f340:	9100      	str	r1, [sp, #0]
2000f342:	9104      	str	r1, [sp, #16]
2000f344:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
2000f348:	9105      	str	r1, [sp, #20]
2000f34a:	9102      	str	r1, [sp, #8]
2000f34c:	4905      	ldr	r1, [pc, #20]	; (2000f364 <_vsiprintf_r+0x28>)
2000f34e:	9103      	str	r1, [sp, #12]
2000f350:	4669      	mov	r1, sp
2000f352:	f000 f86f 	bl	2000f434 <_svfiprintf_r>
2000f356:	9b00      	ldr	r3, [sp, #0]
2000f358:	2200      	movs	r2, #0
2000f35a:	701a      	strb	r2, [r3, #0]
2000f35c:	b01b      	add	sp, #108	; 0x6c
2000f35e:	f85d fb04 	ldr.w	pc, [sp], #4
2000f362:	bf00      	nop
2000f364:	ffff0208 	.word	0xffff0208

2000f368 <vsiprintf>:
2000f368:	4613      	mov	r3, r2
2000f36a:	460a      	mov	r2, r1
2000f36c:	4601      	mov	r1, r0
2000f36e:	4802      	ldr	r0, [pc, #8]	; (2000f378 <vsiprintf+0x10>)
2000f370:	6800      	ldr	r0, [r0, #0]
2000f372:	f7ff bfe3 	b.w	2000f33c <_vsiprintf_r>
2000f376:	bf00      	nop
2000f378:	2000feb0 	.word	0x2000feb0

2000f37c <__malloc_lock>:
2000f37c:	4770      	bx	lr

2000f37e <__malloc_unlock>:
2000f37e:	4770      	bx	lr

2000f380 <__ssputs_r>:
2000f380:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
2000f384:	688e      	ldr	r6, [r1, #8]
2000f386:	429e      	cmp	r6, r3
2000f388:	4682      	mov	sl, r0
2000f38a:	460c      	mov	r4, r1
2000f38c:	4690      	mov	r8, r2
2000f38e:	4699      	mov	r9, r3
2000f390:	d837      	bhi.n	2000f402 <__ssputs_r+0x82>
2000f392:	898a      	ldrh	r2, [r1, #12]
2000f394:	f412 6f90 	tst.w	r2, #1152	; 0x480
2000f398:	d031      	beq.n	2000f3fe <__ssputs_r+0x7e>
2000f39a:	6825      	ldr	r5, [r4, #0]
2000f39c:	6909      	ldr	r1, [r1, #16]
2000f39e:	1a6f      	subs	r7, r5, r1
2000f3a0:	6965      	ldr	r5, [r4, #20]
2000f3a2:	2302      	movs	r3, #2
2000f3a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
2000f3a8:	fb95 f5f3 	sdiv	r5, r5, r3
2000f3ac:	f109 0301 	add.w	r3, r9, #1
2000f3b0:	443b      	add	r3, r7
2000f3b2:	429d      	cmp	r5, r3
2000f3b4:	bf38      	it	cc
2000f3b6:	461d      	movcc	r5, r3
2000f3b8:	0553      	lsls	r3, r2, #21
2000f3ba:	d530      	bpl.n	2000f41e <__ssputs_r+0x9e>
2000f3bc:	4629      	mov	r1, r5
2000f3be:	f7ff ff53 	bl	2000f268 <_malloc_r>
2000f3c2:	4606      	mov	r6, r0
2000f3c4:	b950      	cbnz	r0, 2000f3dc <__ssputs_r+0x5c>
2000f3c6:	230c      	movs	r3, #12
2000f3c8:	f8ca 3000 	str.w	r3, [sl]
2000f3cc:	89a3      	ldrh	r3, [r4, #12]
2000f3ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
2000f3d2:	81a3      	strh	r3, [r4, #12]
2000f3d4:	f04f 30ff 	mov.w	r0, #4294967295
2000f3d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
2000f3dc:	463a      	mov	r2, r7
2000f3de:	6921      	ldr	r1, [r4, #16]
2000f3e0:	f000 faa8 	bl	2000f934 <memcpy>
2000f3e4:	89a3      	ldrh	r3, [r4, #12]
2000f3e6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
2000f3ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
2000f3ee:	81a3      	strh	r3, [r4, #12]
2000f3f0:	6126      	str	r6, [r4, #16]
2000f3f2:	6165      	str	r5, [r4, #20]
2000f3f4:	443e      	add	r6, r7
2000f3f6:	1bed      	subs	r5, r5, r7
2000f3f8:	6026      	str	r6, [r4, #0]
2000f3fa:	60a5      	str	r5, [r4, #8]
2000f3fc:	464e      	mov	r6, r9
2000f3fe:	454e      	cmp	r6, r9
2000f400:	d900      	bls.n	2000f404 <__ssputs_r+0x84>
2000f402:	464e      	mov	r6, r9
2000f404:	4632      	mov	r2, r6
2000f406:	4641      	mov	r1, r8
2000f408:	6820      	ldr	r0, [r4, #0]
2000f40a:	f000 fa9e 	bl	2000f94a <memmove>
2000f40e:	68a3      	ldr	r3, [r4, #8]
2000f410:	1b9b      	subs	r3, r3, r6
2000f412:	60a3      	str	r3, [r4, #8]
2000f414:	6823      	ldr	r3, [r4, #0]
2000f416:	441e      	add	r6, r3
2000f418:	6026      	str	r6, [r4, #0]
2000f41a:	2000      	movs	r0, #0
2000f41c:	e7dc      	b.n	2000f3d8 <__ssputs_r+0x58>
2000f41e:	462a      	mov	r2, r5
2000f420:	f000 faac 	bl	2000f97c <_realloc_r>
2000f424:	4606      	mov	r6, r0
2000f426:	2800      	cmp	r0, #0
2000f428:	d1e2      	bne.n	2000f3f0 <__ssputs_r+0x70>
2000f42a:	6921      	ldr	r1, [r4, #16]
2000f42c:	4650      	mov	r0, sl
2000f42e:	f7ff fecd 	bl	2000f1cc <_free_r>
2000f432:	e7c8      	b.n	2000f3c6 <__ssputs_r+0x46>

2000f434 <_svfiprintf_r>:
2000f434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
2000f438:	461d      	mov	r5, r3
2000f43a:	898b      	ldrh	r3, [r1, #12]
2000f43c:	061f      	lsls	r7, r3, #24
2000f43e:	b09d      	sub	sp, #116	; 0x74
2000f440:	4680      	mov	r8, r0
2000f442:	460c      	mov	r4, r1
2000f444:	4616      	mov	r6, r2
2000f446:	d50f      	bpl.n	2000f468 <_svfiprintf_r+0x34>
2000f448:	690b      	ldr	r3, [r1, #16]
2000f44a:	b96b      	cbnz	r3, 2000f468 <_svfiprintf_r+0x34>
2000f44c:	2140      	movs	r1, #64	; 0x40
2000f44e:	f7ff ff0b 	bl	2000f268 <_malloc_r>
2000f452:	6020      	str	r0, [r4, #0]
2000f454:	6120      	str	r0, [r4, #16]
2000f456:	b928      	cbnz	r0, 2000f464 <_svfiprintf_r+0x30>
2000f458:	230c      	movs	r3, #12
2000f45a:	f8c8 3000 	str.w	r3, [r8]
2000f45e:	f04f 30ff 	mov.w	r0, #4294967295
2000f462:	e0c8      	b.n	2000f5f6 <_svfiprintf_r+0x1c2>
2000f464:	2340      	movs	r3, #64	; 0x40
2000f466:	6163      	str	r3, [r4, #20]
2000f468:	2300      	movs	r3, #0
2000f46a:	9309      	str	r3, [sp, #36]	; 0x24
2000f46c:	2320      	movs	r3, #32
2000f46e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
2000f472:	2330      	movs	r3, #48	; 0x30
2000f474:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
2000f478:	9503      	str	r5, [sp, #12]
2000f47a:	f04f 0b01 	mov.w	fp, #1
2000f47e:	4637      	mov	r7, r6
2000f480:	463d      	mov	r5, r7
2000f482:	f815 3b01 	ldrb.w	r3, [r5], #1
2000f486:	b10b      	cbz	r3, 2000f48c <_svfiprintf_r+0x58>
2000f488:	2b25      	cmp	r3, #37	; 0x25
2000f48a:	d13e      	bne.n	2000f50a <_svfiprintf_r+0xd6>
2000f48c:	ebb7 0a06 	subs.w	sl, r7, r6
2000f490:	d00b      	beq.n	2000f4aa <_svfiprintf_r+0x76>
2000f492:	4653      	mov	r3, sl
2000f494:	4632      	mov	r2, r6
2000f496:	4621      	mov	r1, r4
2000f498:	4640      	mov	r0, r8
2000f49a:	f7ff ff71 	bl	2000f380 <__ssputs_r>
2000f49e:	3001      	adds	r0, #1
2000f4a0:	f000 80a4 	beq.w	2000f5ec <_svfiprintf_r+0x1b8>
2000f4a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
2000f4a6:	4453      	add	r3, sl
2000f4a8:	9309      	str	r3, [sp, #36]	; 0x24
2000f4aa:	783b      	ldrb	r3, [r7, #0]
2000f4ac:	2b00      	cmp	r3, #0
2000f4ae:	f000 809d 	beq.w	2000f5ec <_svfiprintf_r+0x1b8>
2000f4b2:	2300      	movs	r3, #0
2000f4b4:	f04f 32ff 	mov.w	r2, #4294967295
2000f4b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
2000f4bc:	9304      	str	r3, [sp, #16]
2000f4be:	9307      	str	r3, [sp, #28]
2000f4c0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
2000f4c4:	931a      	str	r3, [sp, #104]	; 0x68
2000f4c6:	462f      	mov	r7, r5
2000f4c8:	2205      	movs	r2, #5
2000f4ca:	f817 1b01 	ldrb.w	r1, [r7], #1
2000f4ce:	4850      	ldr	r0, [pc, #320]	; (2000f610 <_svfiprintf_r+0x1dc>)
2000f4d0:	f7fd fe86 	bl	2000d1e0 <memchr>
2000f4d4:	9b04      	ldr	r3, [sp, #16]
2000f4d6:	b9d0      	cbnz	r0, 2000f50e <_svfiprintf_r+0xda>
2000f4d8:	06d9      	lsls	r1, r3, #27
2000f4da:	bf44      	itt	mi
2000f4dc:	2220      	movmi	r2, #32
2000f4de:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
2000f4e2:	071a      	lsls	r2, r3, #28
2000f4e4:	bf44      	itt	mi
2000f4e6:	222b      	movmi	r2, #43	; 0x2b
2000f4e8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
2000f4ec:	782a      	ldrb	r2, [r5, #0]
2000f4ee:	2a2a      	cmp	r2, #42	; 0x2a
2000f4f0:	d015      	beq.n	2000f51e <_svfiprintf_r+0xea>
2000f4f2:	9a07      	ldr	r2, [sp, #28]
2000f4f4:	462f      	mov	r7, r5
2000f4f6:	2000      	movs	r0, #0
2000f4f8:	250a      	movs	r5, #10
2000f4fa:	4639      	mov	r1, r7
2000f4fc:	f811 3b01 	ldrb.w	r3, [r1], #1
2000f500:	3b30      	subs	r3, #48	; 0x30
2000f502:	2b09      	cmp	r3, #9
2000f504:	d94d      	bls.n	2000f5a2 <_svfiprintf_r+0x16e>
2000f506:	b1b8      	cbz	r0, 2000f538 <_svfiprintf_r+0x104>
2000f508:	e00f      	b.n	2000f52a <_svfiprintf_r+0xf6>
2000f50a:	462f      	mov	r7, r5
2000f50c:	e7b8      	b.n	2000f480 <_svfiprintf_r+0x4c>
2000f50e:	4a40      	ldr	r2, [pc, #256]	; (2000f610 <_svfiprintf_r+0x1dc>)
2000f510:	1a80      	subs	r0, r0, r2
2000f512:	fa0b f000 	lsl.w	r0, fp, r0
2000f516:	4318      	orrs	r0, r3
2000f518:	9004      	str	r0, [sp, #16]
2000f51a:	463d      	mov	r5, r7
2000f51c:	e7d3      	b.n	2000f4c6 <_svfiprintf_r+0x92>
2000f51e:	9a03      	ldr	r2, [sp, #12]
2000f520:	1d11      	adds	r1, r2, #4
2000f522:	6812      	ldr	r2, [r2, #0]
2000f524:	9103      	str	r1, [sp, #12]
2000f526:	2a00      	cmp	r2, #0
2000f528:	db01      	blt.n	2000f52e <_svfiprintf_r+0xfa>
2000f52a:	9207      	str	r2, [sp, #28]
2000f52c:	e004      	b.n	2000f538 <_svfiprintf_r+0x104>
2000f52e:	4252      	negs	r2, r2
2000f530:	f043 0302 	orr.w	r3, r3, #2
2000f534:	9207      	str	r2, [sp, #28]
2000f536:	9304      	str	r3, [sp, #16]
2000f538:	783b      	ldrb	r3, [r7, #0]
2000f53a:	2b2e      	cmp	r3, #46	; 0x2e
2000f53c:	d10c      	bne.n	2000f558 <_svfiprintf_r+0x124>
2000f53e:	787b      	ldrb	r3, [r7, #1]
2000f540:	2b2a      	cmp	r3, #42	; 0x2a
2000f542:	d133      	bne.n	2000f5ac <_svfiprintf_r+0x178>
2000f544:	9b03      	ldr	r3, [sp, #12]
2000f546:	1d1a      	adds	r2, r3, #4
2000f548:	681b      	ldr	r3, [r3, #0]
2000f54a:	9203      	str	r2, [sp, #12]
2000f54c:	2b00      	cmp	r3, #0
2000f54e:	bfb8      	it	lt
2000f550:	f04f 33ff 	movlt.w	r3, #4294967295
2000f554:	3702      	adds	r7, #2
2000f556:	9305      	str	r3, [sp, #20]
2000f558:	4d2e      	ldr	r5, [pc, #184]	; (2000f614 <_svfiprintf_r+0x1e0>)
2000f55a:	7839      	ldrb	r1, [r7, #0]
2000f55c:	2203      	movs	r2, #3
2000f55e:	4628      	mov	r0, r5
2000f560:	f7fd fe3e 	bl	2000d1e0 <memchr>
2000f564:	b138      	cbz	r0, 2000f576 <_svfiprintf_r+0x142>
2000f566:	2340      	movs	r3, #64	; 0x40
2000f568:	1b40      	subs	r0, r0, r5
2000f56a:	fa03 f000 	lsl.w	r0, r3, r0
2000f56e:	9b04      	ldr	r3, [sp, #16]
2000f570:	4303      	orrs	r3, r0
2000f572:	3701      	adds	r7, #1
2000f574:	9304      	str	r3, [sp, #16]
2000f576:	7839      	ldrb	r1, [r7, #0]
2000f578:	4827      	ldr	r0, [pc, #156]	; (2000f618 <_svfiprintf_r+0x1e4>)
2000f57a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
2000f57e:	2206      	movs	r2, #6
2000f580:	1c7e      	adds	r6, r7, #1
2000f582:	f7fd fe2d 	bl	2000d1e0 <memchr>
2000f586:	2800      	cmp	r0, #0
2000f588:	d038      	beq.n	2000f5fc <_svfiprintf_r+0x1c8>
2000f58a:	4b24      	ldr	r3, [pc, #144]	; (2000f61c <_svfiprintf_r+0x1e8>)
2000f58c:	bb13      	cbnz	r3, 2000f5d4 <_svfiprintf_r+0x1a0>
2000f58e:	9b03      	ldr	r3, [sp, #12]
2000f590:	3307      	adds	r3, #7
2000f592:	f023 0307 	bic.w	r3, r3, #7
2000f596:	3308      	adds	r3, #8
2000f598:	9303      	str	r3, [sp, #12]
2000f59a:	9b09      	ldr	r3, [sp, #36]	; 0x24
2000f59c:	444b      	add	r3, r9
2000f59e:	9309      	str	r3, [sp, #36]	; 0x24
2000f5a0:	e76d      	b.n	2000f47e <_svfiprintf_r+0x4a>
2000f5a2:	fb05 3202 	mla	r2, r5, r2, r3
2000f5a6:	2001      	movs	r0, #1
2000f5a8:	460f      	mov	r7, r1
2000f5aa:	e7a6      	b.n	2000f4fa <_svfiprintf_r+0xc6>
2000f5ac:	2300      	movs	r3, #0
2000f5ae:	3701      	adds	r7, #1
2000f5b0:	9305      	str	r3, [sp, #20]
2000f5b2:	4619      	mov	r1, r3
2000f5b4:	250a      	movs	r5, #10
2000f5b6:	4638      	mov	r0, r7
2000f5b8:	f810 2b01 	ldrb.w	r2, [r0], #1
2000f5bc:	3a30      	subs	r2, #48	; 0x30
2000f5be:	2a09      	cmp	r2, #9
2000f5c0:	d903      	bls.n	2000f5ca <_svfiprintf_r+0x196>
2000f5c2:	2b00      	cmp	r3, #0
2000f5c4:	d0c8      	beq.n	2000f558 <_svfiprintf_r+0x124>
2000f5c6:	9105      	str	r1, [sp, #20]
2000f5c8:	e7c6      	b.n	2000f558 <_svfiprintf_r+0x124>
2000f5ca:	fb05 2101 	mla	r1, r5, r1, r2
2000f5ce:	2301      	movs	r3, #1
2000f5d0:	4607      	mov	r7, r0
2000f5d2:	e7f0      	b.n	2000f5b6 <_svfiprintf_r+0x182>
2000f5d4:	ab03      	add	r3, sp, #12
2000f5d6:	9300      	str	r3, [sp, #0]
2000f5d8:	4622      	mov	r2, r4
2000f5da:	4b11      	ldr	r3, [pc, #68]	; (2000f620 <_svfiprintf_r+0x1ec>)
2000f5dc:	a904      	add	r1, sp, #16
2000f5de:	4640      	mov	r0, r8
2000f5e0:	f3af 8000 	nop.w
2000f5e4:	f1b0 3fff 	cmp.w	r0, #4294967295
2000f5e8:	4681      	mov	r9, r0
2000f5ea:	d1d6      	bne.n	2000f59a <_svfiprintf_r+0x166>
2000f5ec:	89a3      	ldrh	r3, [r4, #12]
2000f5ee:	065b      	lsls	r3, r3, #25
2000f5f0:	f53f af35 	bmi.w	2000f45e <_svfiprintf_r+0x2a>
2000f5f4:	9809      	ldr	r0, [sp, #36]	; 0x24
2000f5f6:	b01d      	add	sp, #116	; 0x74
2000f5f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
2000f5fc:	ab03      	add	r3, sp, #12
2000f5fe:	9300      	str	r3, [sp, #0]
2000f600:	4622      	mov	r2, r4
2000f602:	4b07      	ldr	r3, [pc, #28]	; (2000f620 <_svfiprintf_r+0x1ec>)
2000f604:	a904      	add	r1, sp, #16
2000f606:	4640      	mov	r0, r8
2000f608:	f000 f882 	bl	2000f710 <_printf_i>
2000f60c:	e7ea      	b.n	2000f5e4 <_svfiprintf_r+0x1b0>
2000f60e:	bf00      	nop
2000f610:	2000fe50 	.word	0x2000fe50
2000f614:	2000fe56 	.word	0x2000fe56
2000f618:	2000fe5a 	.word	0x2000fe5a
2000f61c:	00000000 	.word	0x00000000
2000f620:	2000f381 	.word	0x2000f381

2000f624 <_printf_common>:
2000f624:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
2000f628:	4691      	mov	r9, r2
2000f62a:	461f      	mov	r7, r3
2000f62c:	688a      	ldr	r2, [r1, #8]
2000f62e:	690b      	ldr	r3, [r1, #16]
2000f630:	f8dd 8020 	ldr.w	r8, [sp, #32]
2000f634:	4293      	cmp	r3, r2
2000f636:	bfb8      	it	lt
2000f638:	4613      	movlt	r3, r2
2000f63a:	f8c9 3000 	str.w	r3, [r9]
2000f63e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
2000f642:	4606      	mov	r6, r0
2000f644:	460c      	mov	r4, r1
2000f646:	b112      	cbz	r2, 2000f64e <_printf_common+0x2a>
2000f648:	3301      	adds	r3, #1
2000f64a:	f8c9 3000 	str.w	r3, [r9]
2000f64e:	6823      	ldr	r3, [r4, #0]
2000f650:	0699      	lsls	r1, r3, #26
2000f652:	bf42      	ittt	mi
2000f654:	f8d9 3000 	ldrmi.w	r3, [r9]
2000f658:	3302      	addmi	r3, #2
2000f65a:	f8c9 3000 	strmi.w	r3, [r9]
2000f65e:	6825      	ldr	r5, [r4, #0]
2000f660:	f015 0506 	ands.w	r5, r5, #6
2000f664:	d107      	bne.n	2000f676 <_printf_common+0x52>
2000f666:	f104 0a19 	add.w	sl, r4, #25
2000f66a:	68e3      	ldr	r3, [r4, #12]
2000f66c:	f8d9 2000 	ldr.w	r2, [r9]
2000f670:	1a9b      	subs	r3, r3, r2
2000f672:	42ab      	cmp	r3, r5
2000f674:	dc28      	bgt.n	2000f6c8 <_printf_common+0xa4>
2000f676:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
2000f67a:	6822      	ldr	r2, [r4, #0]
2000f67c:	3300      	adds	r3, #0
2000f67e:	bf18      	it	ne
2000f680:	2301      	movne	r3, #1
2000f682:	0692      	lsls	r2, r2, #26
2000f684:	d42d      	bmi.n	2000f6e2 <_printf_common+0xbe>
2000f686:	f104 0243 	add.w	r2, r4, #67	; 0x43
2000f68a:	4639      	mov	r1, r7
2000f68c:	4630      	mov	r0, r6
2000f68e:	47c0      	blx	r8
2000f690:	3001      	adds	r0, #1
2000f692:	d020      	beq.n	2000f6d6 <_printf_common+0xb2>
2000f694:	6823      	ldr	r3, [r4, #0]
2000f696:	68e5      	ldr	r5, [r4, #12]
2000f698:	f8d9 2000 	ldr.w	r2, [r9]
2000f69c:	f003 0306 	and.w	r3, r3, #6
2000f6a0:	2b04      	cmp	r3, #4
2000f6a2:	bf08      	it	eq
2000f6a4:	1aad      	subeq	r5, r5, r2
2000f6a6:	68a3      	ldr	r3, [r4, #8]
2000f6a8:	6922      	ldr	r2, [r4, #16]
2000f6aa:	bf0c      	ite	eq
2000f6ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
2000f6b0:	2500      	movne	r5, #0
2000f6b2:	4293      	cmp	r3, r2
2000f6b4:	bfc4      	itt	gt
2000f6b6:	1a9b      	subgt	r3, r3, r2
2000f6b8:	18ed      	addgt	r5, r5, r3
2000f6ba:	f04f 0900 	mov.w	r9, #0
2000f6be:	341a      	adds	r4, #26
2000f6c0:	454d      	cmp	r5, r9
2000f6c2:	d11a      	bne.n	2000f6fa <_printf_common+0xd6>
2000f6c4:	2000      	movs	r0, #0
2000f6c6:	e008      	b.n	2000f6da <_printf_common+0xb6>
2000f6c8:	2301      	movs	r3, #1
2000f6ca:	4652      	mov	r2, sl
2000f6cc:	4639      	mov	r1, r7
2000f6ce:	4630      	mov	r0, r6
2000f6d0:	47c0      	blx	r8
2000f6d2:	3001      	adds	r0, #1
2000f6d4:	d103      	bne.n	2000f6de <_printf_common+0xba>
2000f6d6:	f04f 30ff 	mov.w	r0, #4294967295
2000f6da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
2000f6de:	3501      	adds	r5, #1
2000f6e0:	e7c3      	b.n	2000f66a <_printf_common+0x46>
2000f6e2:	18e1      	adds	r1, r4, r3
2000f6e4:	1c5a      	adds	r2, r3, #1
2000f6e6:	2030      	movs	r0, #48	; 0x30
2000f6e8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
2000f6ec:	4422      	add	r2, r4
2000f6ee:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
2000f6f2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
2000f6f6:	3302      	adds	r3, #2
2000f6f8:	e7c5      	b.n	2000f686 <_printf_common+0x62>
2000f6fa:	2301      	movs	r3, #1
2000f6fc:	4622      	mov	r2, r4
2000f6fe:	4639      	mov	r1, r7
2000f700:	4630      	mov	r0, r6
2000f702:	47c0      	blx	r8
2000f704:	3001      	adds	r0, #1
2000f706:	d0e6      	beq.n	2000f6d6 <_printf_common+0xb2>
2000f708:	f109 0901 	add.w	r9, r9, #1
2000f70c:	e7d8      	b.n	2000f6c0 <_printf_common+0x9c>
	...

2000f710 <_printf_i>:
2000f710:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
2000f714:	f101 0c43 	add.w	ip, r1, #67	; 0x43
2000f718:	460c      	mov	r4, r1
2000f71a:	7e09      	ldrb	r1, [r1, #24]
2000f71c:	b085      	sub	sp, #20
2000f71e:	296e      	cmp	r1, #110	; 0x6e
2000f720:	4617      	mov	r7, r2
2000f722:	4606      	mov	r6, r0
2000f724:	4698      	mov	r8, r3
2000f726:	9a0c      	ldr	r2, [sp, #48]	; 0x30
2000f728:	f000 80b3 	beq.w	2000f892 <_printf_i+0x182>
2000f72c:	d822      	bhi.n	2000f774 <_printf_i+0x64>
2000f72e:	2963      	cmp	r1, #99	; 0x63
2000f730:	d036      	beq.n	2000f7a0 <_printf_i+0x90>
2000f732:	d80a      	bhi.n	2000f74a <_printf_i+0x3a>
2000f734:	2900      	cmp	r1, #0
2000f736:	f000 80b9 	beq.w	2000f8ac <_printf_i+0x19c>
2000f73a:	2958      	cmp	r1, #88	; 0x58
2000f73c:	f000 8083 	beq.w	2000f846 <_printf_i+0x136>
2000f740:	f104 0542 	add.w	r5, r4, #66	; 0x42
2000f744:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
2000f748:	e032      	b.n	2000f7b0 <_printf_i+0xa0>
2000f74a:	2964      	cmp	r1, #100	; 0x64
2000f74c:	d001      	beq.n	2000f752 <_printf_i+0x42>
2000f74e:	2969      	cmp	r1, #105	; 0x69
2000f750:	d1f6      	bne.n	2000f740 <_printf_i+0x30>
2000f752:	6820      	ldr	r0, [r4, #0]
2000f754:	6813      	ldr	r3, [r2, #0]
2000f756:	0605      	lsls	r5, r0, #24
2000f758:	f103 0104 	add.w	r1, r3, #4
2000f75c:	d52a      	bpl.n	2000f7b4 <_printf_i+0xa4>
2000f75e:	681b      	ldr	r3, [r3, #0]
2000f760:	6011      	str	r1, [r2, #0]
2000f762:	2b00      	cmp	r3, #0
2000f764:	da03      	bge.n	2000f76e <_printf_i+0x5e>
2000f766:	222d      	movs	r2, #45	; 0x2d
2000f768:	425b      	negs	r3, r3
2000f76a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
2000f76e:	486f      	ldr	r0, [pc, #444]	; (2000f92c <_printf_i+0x21c>)
2000f770:	220a      	movs	r2, #10
2000f772:	e039      	b.n	2000f7e8 <_printf_i+0xd8>
2000f774:	2973      	cmp	r1, #115	; 0x73
2000f776:	f000 809d 	beq.w	2000f8b4 <_printf_i+0x1a4>
2000f77a:	d808      	bhi.n	2000f78e <_printf_i+0x7e>
2000f77c:	296f      	cmp	r1, #111	; 0x6f
2000f77e:	d020      	beq.n	2000f7c2 <_printf_i+0xb2>
2000f780:	2970      	cmp	r1, #112	; 0x70
2000f782:	d1dd      	bne.n	2000f740 <_printf_i+0x30>
2000f784:	6823      	ldr	r3, [r4, #0]
2000f786:	f043 0320 	orr.w	r3, r3, #32
2000f78a:	6023      	str	r3, [r4, #0]
2000f78c:	e003      	b.n	2000f796 <_printf_i+0x86>
2000f78e:	2975      	cmp	r1, #117	; 0x75
2000f790:	d017      	beq.n	2000f7c2 <_printf_i+0xb2>
2000f792:	2978      	cmp	r1, #120	; 0x78
2000f794:	d1d4      	bne.n	2000f740 <_printf_i+0x30>
2000f796:	2378      	movs	r3, #120	; 0x78
2000f798:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
2000f79c:	4864      	ldr	r0, [pc, #400]	; (2000f930 <_printf_i+0x220>)
2000f79e:	e055      	b.n	2000f84c <_printf_i+0x13c>
2000f7a0:	6813      	ldr	r3, [r2, #0]
2000f7a2:	1d19      	adds	r1, r3, #4
2000f7a4:	681b      	ldr	r3, [r3, #0]
2000f7a6:	6011      	str	r1, [r2, #0]
2000f7a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
2000f7ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
2000f7b0:	2301      	movs	r3, #1
2000f7b2:	e08c      	b.n	2000f8ce <_printf_i+0x1be>
2000f7b4:	681b      	ldr	r3, [r3, #0]
2000f7b6:	6011      	str	r1, [r2, #0]
2000f7b8:	f010 0f40 	tst.w	r0, #64	; 0x40
2000f7bc:	bf18      	it	ne
2000f7be:	b21b      	sxthne	r3, r3
2000f7c0:	e7cf      	b.n	2000f762 <_printf_i+0x52>
2000f7c2:	6813      	ldr	r3, [r2, #0]
2000f7c4:	6825      	ldr	r5, [r4, #0]
2000f7c6:	1d18      	adds	r0, r3, #4
2000f7c8:	6010      	str	r0, [r2, #0]
2000f7ca:	0628      	lsls	r0, r5, #24
2000f7cc:	d501      	bpl.n	2000f7d2 <_printf_i+0xc2>
2000f7ce:	681b      	ldr	r3, [r3, #0]
2000f7d0:	e002      	b.n	2000f7d8 <_printf_i+0xc8>
2000f7d2:	0668      	lsls	r0, r5, #25
2000f7d4:	d5fb      	bpl.n	2000f7ce <_printf_i+0xbe>
2000f7d6:	881b      	ldrh	r3, [r3, #0]
2000f7d8:	4854      	ldr	r0, [pc, #336]	; (2000f92c <_printf_i+0x21c>)
2000f7da:	296f      	cmp	r1, #111	; 0x6f
2000f7dc:	bf14      	ite	ne
2000f7de:	220a      	movne	r2, #10
2000f7e0:	2208      	moveq	r2, #8
2000f7e2:	2100      	movs	r1, #0
2000f7e4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
2000f7e8:	6865      	ldr	r5, [r4, #4]
2000f7ea:	60a5      	str	r5, [r4, #8]
2000f7ec:	2d00      	cmp	r5, #0
2000f7ee:	f2c0 8095 	blt.w	2000f91c <_printf_i+0x20c>
2000f7f2:	6821      	ldr	r1, [r4, #0]
2000f7f4:	f021 0104 	bic.w	r1, r1, #4
2000f7f8:	6021      	str	r1, [r4, #0]
2000f7fa:	2b00      	cmp	r3, #0
2000f7fc:	d13d      	bne.n	2000f87a <_printf_i+0x16a>
2000f7fe:	2d00      	cmp	r5, #0
2000f800:	f040 808e 	bne.w	2000f920 <_printf_i+0x210>
2000f804:	4665      	mov	r5, ip
2000f806:	2a08      	cmp	r2, #8
2000f808:	d10b      	bne.n	2000f822 <_printf_i+0x112>
2000f80a:	6823      	ldr	r3, [r4, #0]
2000f80c:	07db      	lsls	r3, r3, #31
2000f80e:	d508      	bpl.n	2000f822 <_printf_i+0x112>
2000f810:	6923      	ldr	r3, [r4, #16]
2000f812:	6862      	ldr	r2, [r4, #4]
2000f814:	429a      	cmp	r2, r3
2000f816:	bfde      	ittt	le
2000f818:	2330      	movle	r3, #48	; 0x30
2000f81a:	f805 3c01 	strble.w	r3, [r5, #-1]
2000f81e:	f105 35ff 	addle.w	r5, r5, #4294967295
2000f822:	ebac 0305 	sub.w	r3, ip, r5
2000f826:	6123      	str	r3, [r4, #16]
2000f828:	f8cd 8000 	str.w	r8, [sp]
2000f82c:	463b      	mov	r3, r7
2000f82e:	aa03      	add	r2, sp, #12
2000f830:	4621      	mov	r1, r4
2000f832:	4630      	mov	r0, r6
2000f834:	f7ff fef6 	bl	2000f624 <_printf_common>
2000f838:	3001      	adds	r0, #1
2000f83a:	d14d      	bne.n	2000f8d8 <_printf_i+0x1c8>
2000f83c:	f04f 30ff 	mov.w	r0, #4294967295
2000f840:	b005      	add	sp, #20
2000f842:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
2000f846:	4839      	ldr	r0, [pc, #228]	; (2000f92c <_printf_i+0x21c>)
2000f848:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
2000f84c:	6813      	ldr	r3, [r2, #0]
2000f84e:	6821      	ldr	r1, [r4, #0]
2000f850:	1d1d      	adds	r5, r3, #4
2000f852:	681b      	ldr	r3, [r3, #0]
2000f854:	6015      	str	r5, [r2, #0]
2000f856:	060a      	lsls	r2, r1, #24
2000f858:	d50b      	bpl.n	2000f872 <_printf_i+0x162>
2000f85a:	07ca      	lsls	r2, r1, #31
2000f85c:	bf44      	itt	mi
2000f85e:	f041 0120 	orrmi.w	r1, r1, #32
2000f862:	6021      	strmi	r1, [r4, #0]
2000f864:	b91b      	cbnz	r3, 2000f86e <_printf_i+0x15e>
2000f866:	6822      	ldr	r2, [r4, #0]
2000f868:	f022 0220 	bic.w	r2, r2, #32
2000f86c:	6022      	str	r2, [r4, #0]
2000f86e:	2210      	movs	r2, #16
2000f870:	e7b7      	b.n	2000f7e2 <_printf_i+0xd2>
2000f872:	064d      	lsls	r5, r1, #25
2000f874:	bf48      	it	mi
2000f876:	b29b      	uxthmi	r3, r3
2000f878:	e7ef      	b.n	2000f85a <_printf_i+0x14a>
2000f87a:	4665      	mov	r5, ip
2000f87c:	fbb3 f1f2 	udiv	r1, r3, r2
2000f880:	fb02 3311 	mls	r3, r2, r1, r3
2000f884:	5cc3      	ldrb	r3, [r0, r3]
2000f886:	f805 3d01 	strb.w	r3, [r5, #-1]!
2000f88a:	460b      	mov	r3, r1
2000f88c:	2900      	cmp	r1, #0
2000f88e:	d1f5      	bne.n	2000f87c <_printf_i+0x16c>
2000f890:	e7b9      	b.n	2000f806 <_printf_i+0xf6>
2000f892:	6813      	ldr	r3, [r2, #0]
2000f894:	6825      	ldr	r5, [r4, #0]
2000f896:	6961      	ldr	r1, [r4, #20]
2000f898:	1d18      	adds	r0, r3, #4
2000f89a:	6010      	str	r0, [r2, #0]
2000f89c:	0628      	lsls	r0, r5, #24
2000f89e:	681b      	ldr	r3, [r3, #0]
2000f8a0:	d501      	bpl.n	2000f8a6 <_printf_i+0x196>
2000f8a2:	6019      	str	r1, [r3, #0]
2000f8a4:	e002      	b.n	2000f8ac <_printf_i+0x19c>
2000f8a6:	066a      	lsls	r2, r5, #25
2000f8a8:	d5fb      	bpl.n	2000f8a2 <_printf_i+0x192>
2000f8aa:	8019      	strh	r1, [r3, #0]
2000f8ac:	2300      	movs	r3, #0
2000f8ae:	6123      	str	r3, [r4, #16]
2000f8b0:	4665      	mov	r5, ip
2000f8b2:	e7b9      	b.n	2000f828 <_printf_i+0x118>
2000f8b4:	6813      	ldr	r3, [r2, #0]
2000f8b6:	1d19      	adds	r1, r3, #4
2000f8b8:	6011      	str	r1, [r2, #0]
2000f8ba:	681d      	ldr	r5, [r3, #0]
2000f8bc:	6862      	ldr	r2, [r4, #4]
2000f8be:	2100      	movs	r1, #0
2000f8c0:	4628      	mov	r0, r5
2000f8c2:	f7fd fc8d 	bl	2000d1e0 <memchr>
2000f8c6:	b108      	cbz	r0, 2000f8cc <_printf_i+0x1bc>
2000f8c8:	1b40      	subs	r0, r0, r5
2000f8ca:	6060      	str	r0, [r4, #4]
2000f8cc:	6863      	ldr	r3, [r4, #4]
2000f8ce:	6123      	str	r3, [r4, #16]
2000f8d0:	2300      	movs	r3, #0
2000f8d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
2000f8d6:	e7a7      	b.n	2000f828 <_printf_i+0x118>
2000f8d8:	6923      	ldr	r3, [r4, #16]
2000f8da:	462a      	mov	r2, r5
2000f8dc:	4639      	mov	r1, r7
2000f8de:	4630      	mov	r0, r6
2000f8e0:	47c0      	blx	r8
2000f8e2:	3001      	adds	r0, #1
2000f8e4:	d0aa      	beq.n	2000f83c <_printf_i+0x12c>
2000f8e6:	6823      	ldr	r3, [r4, #0]
2000f8e8:	079b      	lsls	r3, r3, #30
2000f8ea:	d413      	bmi.n	2000f914 <_printf_i+0x204>
2000f8ec:	68e0      	ldr	r0, [r4, #12]
2000f8ee:	9b03      	ldr	r3, [sp, #12]
2000f8f0:	4298      	cmp	r0, r3
2000f8f2:	bfb8      	it	lt
2000f8f4:	4618      	movlt	r0, r3
2000f8f6:	e7a3      	b.n	2000f840 <_printf_i+0x130>
2000f8f8:	2301      	movs	r3, #1
2000f8fa:	464a      	mov	r2, r9
2000f8fc:	4639      	mov	r1, r7
2000f8fe:	4630      	mov	r0, r6
2000f900:	47c0      	blx	r8
2000f902:	3001      	adds	r0, #1
2000f904:	d09a      	beq.n	2000f83c <_printf_i+0x12c>
2000f906:	3501      	adds	r5, #1
2000f908:	68e3      	ldr	r3, [r4, #12]
2000f90a:	9a03      	ldr	r2, [sp, #12]
2000f90c:	1a9b      	subs	r3, r3, r2
2000f90e:	42ab      	cmp	r3, r5
2000f910:	dcf2      	bgt.n	2000f8f8 <_printf_i+0x1e8>
2000f912:	e7eb      	b.n	2000f8ec <_printf_i+0x1dc>
2000f914:	2500      	movs	r5, #0
2000f916:	f104 0919 	add.w	r9, r4, #25
2000f91a:	e7f5      	b.n	2000f908 <_printf_i+0x1f8>
2000f91c:	2b00      	cmp	r3, #0
2000f91e:	d1ac      	bne.n	2000f87a <_printf_i+0x16a>
2000f920:	7803      	ldrb	r3, [r0, #0]
2000f922:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
2000f926:	f104 0542 	add.w	r5, r4, #66	; 0x42
2000f92a:	e76c      	b.n	2000f806 <_printf_i+0xf6>
2000f92c:	2000fe61 	.word	0x2000fe61
2000f930:	2000fe72 	.word	0x2000fe72

2000f934 <memcpy>:
2000f934:	b510      	push	{r4, lr}
2000f936:	1e43      	subs	r3, r0, #1
2000f938:	440a      	add	r2, r1
2000f93a:	4291      	cmp	r1, r2
2000f93c:	d100      	bne.n	2000f940 <memcpy+0xc>
2000f93e:	bd10      	pop	{r4, pc}
2000f940:	f811 4b01 	ldrb.w	r4, [r1], #1
2000f944:	f803 4f01 	strb.w	r4, [r3, #1]!
2000f948:	e7f7      	b.n	2000f93a <memcpy+0x6>

2000f94a <memmove>:
2000f94a:	4288      	cmp	r0, r1
2000f94c:	b510      	push	{r4, lr}
2000f94e:	eb01 0302 	add.w	r3, r1, r2
2000f952:	d807      	bhi.n	2000f964 <memmove+0x1a>
2000f954:	1e42      	subs	r2, r0, #1
2000f956:	4299      	cmp	r1, r3
2000f958:	d00a      	beq.n	2000f970 <memmove+0x26>
2000f95a:	f811 4b01 	ldrb.w	r4, [r1], #1
2000f95e:	f802 4f01 	strb.w	r4, [r2, #1]!
2000f962:	e7f8      	b.n	2000f956 <memmove+0xc>
2000f964:	4283      	cmp	r3, r0
2000f966:	d9f5      	bls.n	2000f954 <memmove+0xa>
2000f968:	1881      	adds	r1, r0, r2
2000f96a:	1ad2      	subs	r2, r2, r3
2000f96c:	42d3      	cmn	r3, r2
2000f96e:	d100      	bne.n	2000f972 <memmove+0x28>
2000f970:	bd10      	pop	{r4, pc}
2000f972:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
2000f976:	f801 4d01 	strb.w	r4, [r1, #-1]!
2000f97a:	e7f7      	b.n	2000f96c <memmove+0x22>

2000f97c <_realloc_r>:
2000f97c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
2000f97e:	4607      	mov	r7, r0
2000f980:	4614      	mov	r4, r2
2000f982:	460e      	mov	r6, r1
2000f984:	b921      	cbnz	r1, 2000f990 <_realloc_r+0x14>
2000f986:	4611      	mov	r1, r2
2000f988:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
2000f98c:	f7ff bc6c 	b.w	2000f268 <_malloc_r>
2000f990:	b922      	cbnz	r2, 2000f99c <_realloc_r+0x20>
2000f992:	f7ff fc1b 	bl	2000f1cc <_free_r>
2000f996:	4625      	mov	r5, r4
2000f998:	4628      	mov	r0, r5
2000f99a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
2000f99c:	f000 f814 	bl	2000f9c8 <_malloc_usable_size_r>
2000f9a0:	42a0      	cmp	r0, r4
2000f9a2:	d20f      	bcs.n	2000f9c4 <_realloc_r+0x48>
2000f9a4:	4621      	mov	r1, r4
2000f9a6:	4638      	mov	r0, r7
2000f9a8:	f7ff fc5e 	bl	2000f268 <_malloc_r>
2000f9ac:	4605      	mov	r5, r0
2000f9ae:	2800      	cmp	r0, #0
2000f9b0:	d0f2      	beq.n	2000f998 <_realloc_r+0x1c>
2000f9b2:	4631      	mov	r1, r6
2000f9b4:	4622      	mov	r2, r4
2000f9b6:	f7ff ffbd 	bl	2000f934 <memcpy>
2000f9ba:	4631      	mov	r1, r6
2000f9bc:	4638      	mov	r0, r7
2000f9be:	f7ff fc05 	bl	2000f1cc <_free_r>
2000f9c2:	e7e9      	b.n	2000f998 <_realloc_r+0x1c>
2000f9c4:	4635      	mov	r5, r6
2000f9c6:	e7e7      	b.n	2000f998 <_realloc_r+0x1c>

2000f9c8 <_malloc_usable_size_r>:
2000f9c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
2000f9cc:	1f18      	subs	r0, r3, #4
2000f9ce:	2b00      	cmp	r3, #0
2000f9d0:	bfbc      	itt	lt
2000f9d2:	580b      	ldrlt	r3, [r1, r0]
2000f9d4:	18c0      	addlt	r0, r0, r3
2000f9d6:	4770      	bx	lr

2000f9d8 <_init>:
2000f9d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
2000f9da:	bf00      	nop
2000f9dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
2000f9de:	bc08      	pop	{r3}
2000f9e0:	469e      	mov	lr, r3
2000f9e2:	4770      	bx	lr

2000f9e4 <_fini>:
2000f9e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
2000f9e6:	bf00      	nop
2000f9e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
2000f9ea:	bc08      	pop	{r3}
2000f9ec:	469e      	mov	lr, r3
2000f9ee:	4770      	bx	lr
